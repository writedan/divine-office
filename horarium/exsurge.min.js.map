{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///exsurge.min.js","webpack:///webpack/bootstrap 1adf79a25a8f9a5c836b","webpack:///./src/index.js","webpack:///./src/Exsurge.Core.js","webpack:///./src/Exsurge.Text.js","webpack:///./src/Exsurge.Glyphs.js","webpack:///./src/Exsurge.Drawing.js","webpack:///./src/addAccent.js","webpack:///./src/makeLigature.js","webpack:///./src/greextraGlyphs.js","webpack:///./src/Exsurge.Chant.js","webpack:///./src/Exsurge.Chant.ChantLine.js","webpack:///./src/Exsurge.Chant.Markings.js","webpack:///./src/Exsurge.Chant.Signs.js","webpack:///./src/Exsurge.Gabc.js","webpack:///./src/Exsurge.Chant.Neumes.js","webpack:///./src/Exsurge.Titles.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","_ExsurgeCore","keys","forEach","key","enumerable","get","_ExsurgeText","_ExsurgeGlyphs","_ExsurgeDrawing","_ExsurgeChant","_ExsurgeChantChantLine","_ExsurgeChantMarkings","_ExsurgeChantSigns","_ExsurgeChantNeumes","_ExsurgeGabc","_ExsurgeTitles","_greextraGlyphs","_classCallCheck","instance","Constructor","TypeError","DeviceIndependent","n","Centimeters","Units","ToDeviceIndependent","Millimeters","Inches","ToCentimeters","FromDeviceIndependent","ToMillimeters","ToInches","generateRandomGuid","s4","Math","floor","random","toString","substring","getCssForProperties","properties","entries","map","_ref","_ref2","_slicedToArray","val","join","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","length","err","Array","isArray","_createClass","defineProperties","target","props","descriptor","configurable","writable","protoProps","staticProps","prototype","DeviceIndepenedent","DIU_PER_INCH","DIU_PER_CENTIMETER","inputUnits","outputUnits","StringToUnitsType","s","ToLower","UnitsTypeToString","units","Point","x","y","point","Step","Rect","width","height","Infinity","rect","other","right","max","bottom","min","Margins","left","top","margins","Size","size","Do","Du","Re","Me","Mi","Fa","Fu","So","La","Te","Ti","__StepToStaffPosition","__StaffOffsetToStep","Pitch","step","octave","toInt","pitch","offset","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","Language","name","centerNeume","text","parsedWords","words","split","end","syllabifyWord","English","_Language","_this","getPrototypeOf","startIndex","regexLetter","match","exec","slice","found","index","Latin","_Language2","_this2","diphthongs","possibleDiphthongs","concat","regexVowel","wordExceptions","vowels","vowelsThatMightBeConsonants","muteConsonantsAndF","liquidConsonants","isVowelThatMightBeConsonant","isVowel","word","lookahead","haveLookahead","syllables","haveCompleteSyllable","previousWasVowel","workingString","toLowerCase","startSyllable","makeSyllable","substr","wordLength","cIsVowel","isDiphthong","isMuteConsonantOrF","isLiquidConsonant","Spanish","_Language3","_this3","weakVowels","strongVowels","uDiphthongExceptions","previousIsVowel","previousIsStrongVowel","cIsStrongVowel","isStrongVowel","createSyllable","consonant2","numberOfConsonants","j","d","indexOf","tripthong","endj","findVowelSegment","language","english","latin","spanish","Glyphs","None","paths","type","data","bounds","origin","align","AcuteAccent","GraveAccent","Circle","Semicircle","ReversedSemicircle","Stropha","BeginningAscLiquescent","BeginningDesLiquescent","CustosDescLong","CustosDescShort","CustosLong","CustosShort","DoClef","FaClef","Flat","Mora","Natural","Sharp","OriscusAsc","OriscusDes","OriscusLiquescent","PodatusLower","PodatusUpper","Porrectus1","Porrectus2","Porrectus3","Porrectus4","PunctumCavum","PunctumQuadratum","PunctumQuadratumLiquescent","PunctumQuadratumAscLiquescent","PunctumQuadratumDesLiquescent","PunctumInclinatum","PunctumInclinatumLiquescent","Quilisma","TerminatingAscLiquescent","TerminatingDesLiquescent","VerticalEpisemaAbove","VerticalEpisemaBelow","VirgaLong","VirgaShort","Virgula","_toConsumableArray","arr2","from","getFontFilenameForProperties","arguments","url","italic","bold","replace","MarkupStackFrame","tagName","symbol","ChantNotationElement","Annotations","Annotation","TextLeftRight","Subtitle","Title","Supertitle","TitleTextElement","DropCap","TranslationText","AboveLinesText","ChoralSign","Lyric","LyricArray","LyricType","TextElement","TextSpan","CurlyBraceVisualizer","RoundBraceVisualizer","GlyphVisualizer","LineaVisualizer","VirgaLineVisualizer","NeumeLineVisualizer","DividerLineVisualizer","ChantLayoutElement","ChantContext","TextMeasuringStrategy","QuickSvg","GlyphCode","DefaultTrailingSpace","TextTypesByClass","TextTypes","MarkingPositionHint","_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getter","_addAccent","_makeLigature","canAccessDOM","document","__getNeumeFromSvgElem","score","elem","note","notes","parentElement","querySelector","getAttribute","neume","Default","Above","Below","supertitle","display","defaultSize","containedInScore","titles","hasSupertitle","getFromScore","title","hasTitle","subtitle","hasSubtitle","leftRight","cssClass","hasTextLeft","hasTextRight","extraClass","getFromSvgElem","classList","contains","annotation","mergeAnnotationWithTextLeft","dropCap","_ref$elementIndex","elementIndex","annotations","al","hasAboveLinesText","notations","notation","notationIndex","alText","alIndex","choralSign","ctxt","staffInterval","lyric","hasLyrics","lyrics","lyricIndex","translation","hasTranslations","translationText","translationIndex","_ref3","entry","intraNeumeSpacing","interSyllabicMultiplier","isDefault","StrophaLiquescent","UpperBrace","ns","xmlns","xlink","hasDOMAccess","svg","node","createElementNS","setAttribute","setAttributeNS","defs","appendChild","clearNotations","removeChild","hasChildNodes","lastChild","line","x1","y1","x2","y2","g","tspan","str","textContent","use","nodeRef","svgFragmentForGlyph","glyph","svgSrc","path","createFragment","fill","nodesForGlyph","functionName","nodes","createNode","attributes","children","source","attr","hasOwnProperty","createSvgTree","_len","_key","className","class","convertKeysToCamelCase","obj","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","test","camelCase","whole","letter","toUpperCase","return","style","sourceGabc","child","fragment","parseFragment","well","createElement","container","innerHTML","il","firstChild","childNodes","translate","scale","sx","sy","Svg","Canvas","OpenTypeJS","textMeasuringStrategy","makeDefs","defsNode","textStyles","textColor","setFont","rubricColor","specialCharProperties","font-family","textBeforeSpecialChar","textAfterSpecialChar","specialCharMap","℣","℟","+","*","plusProperties","asteriskProperties","specialCharText","char","fontStyleDictionary","b","font-weight","font-style","u","text-decoration","ul","sc","font-variant","font-variant-caps","font-feature-settings","-webkit-font-feature-settings","v","markupSymbolDictionary","_","^","%","prefix","padding","minLedgerSeparation","minSpaceAboveStaff","minSpaceBelowStaff","spaceBetweenSystems","glyphPunctumWidth","glyphPunctumHeight","maxExtraSpaceInStaffIntervals","activeClef","neumeLineColor","staffLineColor","dividerLineColor","defaultLanguage","pixelRatio","window","devicePixelRatio","svgTextMeasurer","body","insertBefore","makeCanvasIfNeeded","syllableConnector","scaleDefs","setGlyphScaling","accidentalSpaceMultiplier","interVerbalMultiplier","drawGuides","drawDebuggingBounds","activeNotations","currNotationIndex","minSyllablesLastLine","minNotesLastLine","condensingTolerance","autoColor","useExtraTextOnly","noteIdPrefix","insertFontsInDoc","fontFamily","keyWithFontFamily","fontDictionary","Regular","font","baseStyle","opentypeFontDictionary","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_step2$value","textType","textStyle","color","baseTextStyle","glyphScaling","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_step3$value","_textStyles$key","createStyleCss","hyphen","SingleSyllable","multiplier","minLyricWordSpacing","hyphenWidth","staffHeight","staffLineWeight","ceil","neumeLineWeight","dividerLineWeight","episemaLineWeight","updateHyphenWidth","staffPosition","styleElement","getElementById","head","isNeume","hasNoWidth","canvas","canvasCtxt","getContext","setTransform","selected","highlighted","_ChantLayoutElement","staffPosition0","staffPosition1","divider","y0","calculateHeightFromStaffPosition","temp","fillStyle","fillRect","sourceIndex","getSvgProps","_ChantLayoutElement2","note0","note1","hanging","abs","_ChantLayoutElement3","_this4","_ChantLayoutElement4","_this5","_this6","_this7","apply","_this8","_ChantLayoutElement5","glyphCode","_this9","setGlyph","getDefProps","options","transform","makeDef","makeSvgTree","Path2D","noteIndex","nextNote","isSelected","model","result","xlink:href","glyphVisualizer","getSvgAttributes","_ChantLayoutElement6","isAbove","_this10","braceHeight","generatePathString","stroke","stroke-width","getSvgPathProps","accent","createSvgNode","createSvgFragment","dx","dy","cx1","cy","cx2","dp","toFixed","_ChantLayoutElement7","addAcuteAccent","_this11","union","h","q","qy1","qx2","qy2","tx1","ty1","qy3","qx4","qy4","activeTags","createStackFrame","extraProperties","assign","__subsForTspans","&","<",">","_ChantLayoutElement8","fontSize","textAnchor","_this12","dominantBaseline","generateSpansFromText","recalculateMetrics","_this13","spans","markupStack","spanStartIndex","newLineInNextSpan","filterFrames","frame","closeSpan","spanText","newLine","markupRegex","vTagRegex","openedAsterisk","closeCurrentSpan","_match","_match2","vTag","asterisk","plus","tilde","vowelLigature","specialChar","specialChar2","specialChar3","markupSymbol","closingTag","family","enclosedText","vMatch","lastIndex","iOffset","_vMatch","_vMatch2","grecross","greextra","greextraGlyphs","pop","vowel","makeLigature","addAccent","filter","findIndex","splice","parseFloat","resize","measureSubstring","returnBBox","lines","widths","newLineSpans","subStringLength","numLines","bbox","span","myText","parseInt","rightAligned","xOffset","firstLineMaxWidth","getCanvasFontForProperties","metrics","measureText","actualBoundingBoxLeft","actualBoundingBoxAscent","actualBoundingBoxDescent","getFontForProperties","features","liga","smcp","spanFontSize","subBbox","getPath","getBoundingBox","subWidth","getAdvanceWidth","resetNewLines","maxWidth","createStyleNode","getBBox","measureSubstringBBox","reduce","percentage","lastWidth","lastMatch","regex","_spans","spanIndex","splitSpan","textLeft","textRight","newSpans","needsLayout","textAlign","translateWidth","translateHeight","count","getExtraStyleProperties","fillText","textLength","source-index","getCssClasses","trim","text-anchor","useStyleObject","lengthAdjust","getSpanOptions","extraStyleProperties","svgNode","escapeForTspan","setFontFamilyAttributes","string","String","BeginningSyllable","MiddleSyllable","EndingSyllable","Directive","getLeft","lyricArray","NaN","Number","MAX_VALUE","getRight","presumeConnectorNeeded","MIN_VALUE","l","allowsConnector","needsConnector","getConnectorWidth","hasOnlyOneLyric","originalText","indexOfLyric","mergeIn","newLyrics","mergeInArray","setNotation","_TextElement","lyricType","_this14","centerStartIndex","centerLength","connectorSpan","force","forceConnector","needs","setConnectorWidth","widthWithoutConnector","connectorWidth","defaultConnectorWidth","setNeedsConnector","activeLanguage","vowelSegmentWidth","getSubStringLength","lastIndexOf","dropCapSpan","clone","dropCapLowerCase","dropCapSourceGabcLength","classes","_TextElement2","_this15","positionHint","_TextElement3","_this16","_TextElement4","gabcSource","anchor","_this17","_TextElement5","_this18","_TextElement6","_TitleTextElement","_this20","_TitleTextElement2","_this21","_TitleTextElement3","_this22","_TitleTextElement4","_this23","headerKey","_TextElement7","_this24","_ChantLayoutElement9","_this25","_len2","texts","_key2","updateBounds","draw","_ChantLayoutElement10","_this26","leadingSpace","trailingSpace","keepWithNext","visualizers","chantLayoutElement","ignoreBounds","isEmpty","unshift","calculatedTrailingSpace","_this27","calculateLyricX","inner","getInnerSvgNodes","svgProps","Æ","Œ","A","E","I","O","U","Y","æ","œ","a","e","o","AE","Ae","ae","OE","Oe","oe","MedicaeaFlat","HufnagelCustosUpShort","HufnagelCustosUpLong","HufnagelCustosUpMedium","HufnagelCustosDownShort","HufnagelCustosDownLong","HufnagelCustosDownMedium","MedicaeaCustosUpShort","MedicaeaCustosUpLong","MedicaeaCustosUpMedium","MedicaeaCustosDownShort","MedicaeaCustosDownLong","MedicaeaCustosDownMedium","MensuralCustosUpShort","MensuralCustosUpLong","MensuralCustosUpMedium","MensuralCustosDownShort","MensuralCustosDownLong","MensuralCustosDownMedium","MensuralFlat","HufnagelFlat","MedicaeaCClef","MedicaeaCClefChange","MedicaeaFClef","MedicaeaFClefChange","HufnagelCClef","HufnagelCClefChange","HufnagelFClef","HufnagelFClefChange","HugnagelCFClef","HufnagelCFClefChange","MensuralFlatHole","HufnagelFlatHole","MedicaeaFlatHole","StarSix","Dagger","Bar.alt","StarHeight","Cross","RBar.alt","VBar.alt","Drawing1","Drawing2","RWithBarGoth","VWithBarGoth","Line1","Line2","Line3","Line4","Line5","Cross.alt","ABarCaption","RBarCaption","VBarCaption","ABarCaptionSC","RBarCaptionSC","VBarCaptionSC","ABar","RBar","VBar","ABarSC","RBarSC","VBarSC","ABarSmall","RBarSmall","VBarSmall","ABarSmallSC","RBarSmallSC","VBarSmallSC","RBar.alt2","VBar.alt2","ABarCaptionSlant","RBarCaptionSlant","VBarCaptionSlant","ABarSlant","RBarSlant","VBarSlant","ABarSmallSlant","RBarSmallSlant","VBarSmallSlant","ChantDocument","ChantScore","ChantMapping","ChantLineBreak","TextOnly","Clef","Note","NoteShapeModifiers","NoteShape","LiquescentType","Large","Small","Ascending","Descending","InitioDebilis","LargeAscending","LargeDescending","SmallAscending","SmallDescending","Virga","Inclinatum","Oriscus","Cavum","Stemmed","Linea","Reverse","liquescent","shape","shapeModifiers","episemata","morae","setStaffPosition","shapeModifier","_ChantNotationElement","defaultAccidental","isClef","activeAccidental","performLayout","accidentalGlyph","createGlyphVisualizer","addVisualizer","__defaultDoClef","_Clef","stepToStaffOffset","octaveOffset","staffOffsetToStep","accidentalType","finishLayout","_Clef2","_ChantNotationElement2","sourceLength","__connectorSpan","_ChantNotationElement3","justify","lb","__mergeAnnotationWithTextLeft","annotationSpans","mappings","useDropCap","Titles","startingClef","compiled","autoColoring","updateNotations","startLine","endLine","lastLine","selection","elementSelection","element","indices","selectedIndices","insertion","afterElementIndex","includes","insertionCursor","insertionElement","insertionLine","chantLine","InsertionCursor","mapping","nonNoteElementCount","default","elements","recreateDropCap","generateDropCap","initializeLayout","finishedCallback","setTimeout","onFontLoaded","performLayoutAsync","layoutElementsAsync","timeout","Date","getTime","overrideTextLeft","mapAnnotationSpansToTextLeft","layoutTitles","currIndex","ChantLine","buildFromChantNotationIndex","notationsStartIndex","numNotationsOnLine","pages","updateSelection","pageHeightOffset","startLineIndex","pageHeight","copyLines","setCanvasSize","clearRect","zoom","version","editable","viewBox","cloneNode","createStyleTree","def","createStyle","lineFragment","fragmentDefs","xmlns:xlink","createDropCap","Gabc","parseChantNotations","unsanitizedText","defaults","layout","default-font","font-size","page","margin-left","margin-top","margin-right","margin-bottom","scores","copyLayout","to","unserializeFromJson","serializeToJson","notationBounds","staffLeft","staffRight","custos","ledgerLines","braces","nextLine","previousLine","lyricLineHeight","lyricLineBaseline","numLyricLines","spaceAfterNotations","spaceBetweenTextTracks","lastLyrics","lastNeumeIndex","extraTextOnlyIndex","altLineHeight","altLineBaseline","numAltLines","translationLineHeight","translationLineBaseline","numTranslationLines","notationBoundsOffset","extraTextOnlyHeight","extraTextOnlyLyricIndex","lastNotation","extraLines","lineWidth","lowestPossibleAnnotationY","lyricAndTextRect","altLineTextRect","totalHeight","strokeStyle","beginPath","moveTo","lineTo","layoutInsertionCursor","ledgerLine","functionNames","quickSvg","getInnerNodes","element-index","len","qx1","qx3","newElementStart","beginningLyrics","prev","prevNeume","prevLyrics","condensableSpaces","paddingLeft","DoubleBar","newLyric","elidesToNext","MAX_SAFE_INTEGER","minX","curr","rightNotationBoundary","lastTranslationTextWithEndNeume","lastNotationIndex","lastStartBrace","lastLyricsBeforeTextOnly","textOnlyStartIndex","actualRightBoundary","Custos","isDivider","forceBreak","fitsOnLine","positionNotationElement","candidateForExtraTextOnlyLine","currentLyric","nextNotation","firstOnLine","startExtraTextOnlyFromFirst","lastNotationWithLyrics","reverse","find","lastLyricRight","setMaxWidth","isTextOnlyBeforeDivider","firstDivider","every","notationsAfterBreak","countSyllables","countNotes","flatMap","cne","firstWithNoWidth","allowLineBreakBeforeNext","maxNumNotationsOnLine","findNeumesToJustify","extraSpace","getWhitespaceOnRight","toJustify","sum","condensable","endNeume","last","isLastLine","whitespace","rightEdge","minHyphenWidth","justifyElements","centerDividers","oldBoundsX","barWidth","leftPoint","rightPoint","FullBar","nextOrCurr","isAccidental","lastRightNeume","lastRightLyric","doJustify","extraSpaceBeforeCustos","increment","toJustifyIndex","nextToJustify","incrementOffsetAtNextChance","startBrace","k","startNote","BraceShape","RoundBrace","getAttachmentX","braceEnd","AccentedCurlyBrace","processElementForLedgerLine","endElem","offsetX","half","minY","maxY","positionNonLyricText","rightX","beyondStaffRight","ll","episema","spaceBetweenEpisemata","terminating","alignment","HorizontalEpisemaAlignment","Left","Center","Right","newY","newWidth","handleEndBrace","braceStart","nextNotationButOne","nextNoteButOne","BracePoint","BraceAttachment","space","fixedX","total","maxRight","currLyric","minLeft","firstOfSyllable","hasShifted","atLeastOneWithoutConnector","prevLyricRight","condensableSpacesSincePrevLyric","condensableSpaceSincePrevLyric","notationI","currLyricLeft","shift","spaceBetweenSyls","pLyrics","lastCondensable","useMidpoint","minIndex","maxIndex","curIndex","notationX","closenessToLeft","closenessToRight","Ictus","HorizontalEpisema","Accent","_GlyphVisualizer","minDistanceAway","punctumInclinatumShorten","prevNote","_GlyphVisualizer2","horizontalOffset","collisionWithEpisema","verticalOffset","shortOffset","extraOffset","collisionWithStaffLine","_GlyphVisualizer3","CurlyBrace","attachment","Accidental","AccidentalType","DominicanBar","HalfBar","QuarterBar","Divider","auto","findNextNeume","pitchToStaffPosition","getGlyphCode","resetsAccidentals","_Divider","_Divider2","_Divider3","_Divider4","_Divider5","parity","_Divider6","line0","line1","adjustStep","_Divider7","_interopRequireWildcard","__esModule","newObj","GabcHeader","Markings","Signs","Neumes","__syllablesRegex","__altTranslationRegex","__notationsRegex","__notationsRegex_group_insideBraces","__bracketedCommandRegex","__braceSpecRegex","TrailingSpaceForAccidental","TrailingSpaceMultiple","regexHeaderEnd","regexHeaderLine","regexHeaderComment","comments","cValues","original","txtHeader","arrayName","gabc","alternateKey","array","console","warn","elementCountForNotations","items","item","headerLength","getLength","splitWords","createMappingsFromWords","clef","before","after","oldIndexMap","startOld","startNew","subLength","inew","overlap","_overlap","iold","diffDescriptorsAndNewWords","newGabcSource","insertionIndex","oldInsertionIndex","newWords","results","lastTranslationNeumes","resultCode","resultValues","sourceIndexDiff","elementCount","createMappingFromWord","curNotation","prevIsAccidental","resetDependencies","resetAccidentals","staffPositionToPitch","automatic","needToEndBrace","transText","lastTranslationText","matches","currSyllable","lyricText","pre","main","post","notationData","parseNotations","firstOfParentheses","notationWithLyrics","indexOffset","proposedLyricType","createSyllableLyrics","lyricTexts","_loop","lyricTextWithoutVTags","vtagRegex","vtags","indexClosingBracket","getTrueIndex","indexWithoutVTags","accum","makeLyric","textIndex","centerEndIndex","elides","setForceConnector","baseSourceIndex","addToLastSourceGabc","addNotation","neumes","createNeumesFromNotes","prevNotation","RegExp","atom","gabcHeightToExsurgeHeight","noteArray","createNoteFromData","accidental","gabcHeightToExsurgePitch","bracketedNotations","finalTrailingSpace","firstNoteIndex","currNoteIndex","createNeume","includeCurrNote","lastNoteIndex","includePrevNote","addNote","unknownState","Punctum","handle","currNote","virgaState","apostrophaState","oriscusState","punctaInclinataState","punctumState","notesRemaining","state","ictus","podatusState","climacusState","clivisState","distrophaState","PunctaInclinata","PesQuassus","Clivis","Podatus","salicusState","scandicusState","pesSubpunctisState","torculusState","porrectusState","Climacus","Porrectus","PorrectusFlexus","PesSubpunctis","Salicus","salicusFlexusState","SalicusFlexus","Scandicus","scandicusFlexusState","ScandicusFlexus","bivirgaState","Bivirga","Trivirga","Apostropha","Distropha","tristrophaState","Tristropha","Torculus","prevNoteButOne","torculusResupinusState","TorculusResupinus","TorculusResupinusFlexus","mark","episemaNoteIndex","episemaNote","previousNote","previousMora","episemaHadModifier","newNote","shapeModifers","processInstructionForNote","instruction","sourceIndexOffset","cmd","above","attachmentPoint","gabcNotations","parseWords","gabcWords","parseWord","gabcWord","gabcHeight","charCodeAt","exsurgeHeight","Neume","NeumeBuilder","startingX","lastNote","lineIsHanging","previousNotation","withLineTo","noteAlignsRight","needsLine","linea","noteAt","lowerNote","upperNote","upperGlyph","lowerGlyph","upper","lower","lineFrom","prevStaffPosition","advanceWidth","multiple","start","requiresLedgerLine","positionMarkings","firstAbove","needsAbove","firstBelow","needsBelow","endI","position","positionEpisemata","bottomNote","topNote","positionEpisemataBelow","positionEpisemataAbove","positionPodatusEpisemata","positionPodatusMorae","firstNote","secondNote","thirdNote","hasTopEpisema","positionClivisMarkings","positionClivisMorae","positionClivisEpisemata","positionPodatusMarkings","first","second","third","fourth","_Neume","build","getNoteGlyphCode","_Neume2","virgaAt","advanceBy","_Neume3","_Neume4","positionInclinataMorae","withInclinata","_Neume5","withClivis","_Neume6","glyphCodes","glyphAdvance","_Neume7","nextNoteStaffPosition","_Neume8","lowerStaffPos","upperStaffPos","builder","withLineEndingAt","_Neume9","withPodatus","_Neume10","_Neume11","positionPorrectusMarkings","thirdGlyph","withPorrectusSwash","_Neume12","positionPorrectusFlexusMarkings","fourthGlyph","_Neume13","_Neume14","_Neume15","_Neume16","positionTorculusMarkings","_Neume17","_Neume18","_Neume19","glyph1","glyph3","note2","note3","_Neume20","firstGlyph","_Neume21","fifthGlyph","fifth","_Neume22","_Neume23","setSupertitle","setTitle","setSubtitle","setTextLeft","setTextRight","elementName","setBoundsX","finalY","el","_arr2","_i2","_arr3","_i3"],"mappings":"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","file":"exsurge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"exsurge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"exsurge\"] = factory();\n\telse\n\t\troot[\"exsurge\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"exsurge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"exsurge\"] = factory();\n\telse\n\t\troot[\"exsurge\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t'use strict';\n\t\n\t// import { Annotation, ChantContext } from './Exsurge.Drawing.js'\n\t// import { Gabc } from './Exsurge.Gabc.js'\n\t//\n\t// // client side support\n\t//\n\t// if (typeof document !== 'undefined' && document.registerElement) {\n\t//   var ChantVisualElementPrototype = Object.create(HTMLElement.prototype);\n\t//\n\t//   ChantVisualElementPrototype.createdCallback = function() {\n\t//     var ctxt = new ChantContext();\n\t//\n\t//     ctxt.setFont(\"'Crimson Text', serif\", 19.2);\n\t//\n\t//     var useDropCap = true;\n\t//     var useDropCapAttr = this.getAttribute(\"use-drop-cap\");\n\t//     if (useDropCapAttr === 'false')\n\t//       useDropCap = false;\n\t//\n\t//     var score = Gabc.loadChantScore(ctxt, this.innerText, useDropCap);\n\t//\n\t//     var annotationAttr = this.getAttribute(\"annotation\");\n\t//     if (annotationAttr) {\n\t//       // add an annotation\n\t//       score.annotation = new Annotation(ctxt, annotationAttr);\n\t//     }\n\t//\n\t//     var _element = this;\n\t//\n\t//     var width = 0;\n\t//     var doLayout = function() {\n\t//       var newWidth = _element.parentElement.clientWidth;\n\t//       if(width === newWidth) return;\n\t//       width = newWidth;\n\t//       // perform layout on the chant\n\t//       score.performLayout(ctxt, function() {\n\t//         score.layoutChantLines(ctxt, width, function() {\n\t//           // render the score to svg code\n\t//           _element.appendElement(score.createSvgNode(ctxt));\n\t//         });\n\t//       });\n\t//     }\n\t//     doLayout();\n\t//     if (window.addEventListener)\n\t//       window.addEventListener('resize',doLayout,false);\n\t//     else if (window.attachEvent)\n\t//       window.attachEvent('onresize',doLayout);\n\t//   }\n\t//\n\t//   ChantVisualElementPrototype.attachedCallback = function() {\n\t//\n\t//   }\n\t//\n\t//   // register the custom element\n\t//   // if(window.customElements && window.customElements.define) {\n\t//   //   window.customElements.define('chant-visual', ChantVisualElementPrototype);\n\t//   // } else {\n\t//     document.registerElement('chant-visual', {\n\t//       prototype: ChantVisualElementPrototype\n\t//     });\n\t//   // }\n\t// }\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tObject.keys(_ExsurgeCore).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeCore[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeText = __webpack_require__(2);\n\t\n\tObject.keys(_ExsurgeText).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeText[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tObject.keys(_ExsurgeGlyphs).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeGlyphs[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tObject.keys(_ExsurgeDrawing).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeDrawing[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tObject.keys(_ExsurgeChant).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChant[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantChantLine = __webpack_require__(9);\n\t\n\tObject.keys(_ExsurgeChantChantLine).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantChantLine[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(10);\n\t\n\tObject.keys(_ExsurgeChantMarkings).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantMarkings[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(11);\n\t\n\tObject.keys(_ExsurgeChantSigns).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantSigns[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantNeumes = __webpack_require__(13);\n\t\n\tObject.keys(_ExsurgeChantNeumes).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantNeumes[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeGabc = __webpack_require__(12);\n\t\n\tObject.keys(_ExsurgeGabc).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeGabc[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeTitles = __webpack_require__(14);\n\t\n\tObject.keys(_ExsurgeTitles).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeTitles[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _greextraGlyphs = __webpack_require__(7);\n\t\n\tObject.keys(_greextraGlyphs).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _greextraGlyphs[key];\n\t    }\n\t  });\n\t});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\texports.DeviceIndependent = DeviceIndependent;\n\texports.Centimeters = Centimeters;\n\texports.Millimeters = Millimeters;\n\texports.Inches = Inches;\n\texports.ToCentimeters = ToCentimeters;\n\texports.ToMillimeters = ToMillimeters;\n\texports.ToInches = ToInches;\n\texports.generateRandomGuid = generateRandomGuid;\n\texports.getCssForProperties = getCssForProperties;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Units = exports.Units = {\n\t  // enums\n\t  DeviceIndepenedent: 0, // device independent units: 96/inch\n\t  Centimeters: 1,\n\t  Millimeters: 2,\n\t  Inches: 3,\n\t\n\t  // constants for device independent units (diu)\n\t  DIU_PER_INCH: 96,\n\t  DIU_PER_CENTIMETER: 96 / 2.54,\n\t\n\t  ToDeviceIndependent: function ToDeviceIndependent(n, inputUnits) {\n\t    switch (inputUnits) {\n\t      case Centimeters:\n\t        return n * Units.DIU_PER_CENTIMETER;\n\t      case Millimeters:\n\t        return n * Units.DIU_PER_CENTIMETER / 10;\n\t      case Inches:\n\t        return n * Units.DIU_PER_INCH;\n\t      default:\n\t        return n;\n\t    }\n\t  },\n\t\n\t  FromDeviceIndependent: function FromDeviceIndependent(n, outputUnits) {\n\t    switch (outputUnits) {\n\t      case Centimeters:\n\t        return n / Units.DIU_PER_CENTIMETER;\n\t      case Millimeters:\n\t        return n / Units.DIU_PER_CENTIMETER * 10;\n\t      case Inches:\n\t        return n / Units.DIU_PER_INCH;\n\t      default:\n\t        return n;\n\t    }\n\t  },\n\t\n\t  StringToUnitsType: function StringToUnitsType(s) {\n\t    switch (s.ToLower()) {\n\t      case \"in\":\n\t      case \"inches\":\n\t        return Units.Inches;\n\t\n\t      case \"cm\":\n\t      case \"centimeters\":\n\t        return Units.Centimeters;\n\t\n\t      case \"mm\":\n\t      case \"millimeters\":\n\t        return Units.Millimeters;\n\t\n\t      case \"di\":\n\t      case \"device-independent\":\n\t        return Units.DeviceIndepenedent;\n\t\n\t      default:\n\t        return Units.DeviceIndepenedent;\n\t    }\n\t  },\n\t\n\t  UnitsTypeToString: function UnitsTypeToString(units) {\n\t    switch (units) {\n\t      case Units.Inches:\n\t        return \"in\";\n\t      case Units.Centimeters:\n\t        return \"cm\";\n\t      case Units.Millimeters:\n\t        return \"mm\";\n\t      case Units.DeviceIndepenedent:\n\t        return \"device-independent\";\n\t      default:\n\t        return \"device-independent\";\n\t    }\n\t  }\n\t};\n\t\n\tfunction DeviceIndependent(n) {\n\t  return n;\n\t}\n\t\n\tfunction Centimeters(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Centimeters);\n\t}\n\t\n\tfunction Millimeters(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Millimeters);\n\t}\n\t\n\tfunction Inches(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Inches);\n\t}\n\t\n\tfunction ToCentimeters(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Centimeters);\n\t}\n\t\n\tfunction ToMillimeters(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Millimeters);\n\t}\n\t\n\tfunction ToInches(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Inches);\n\t}\n\t\n\t/*\n\t * Point\n\t */\n\t\n\tvar Point = exports.Point = function () {\n\t  function Point(x, y) {\n\t    _classCallCheck(this, Point);\n\t\n\t    this.x = typeof x !== 'undefined' ? x : 0;\n\t    this.y = typeof y !== 'undefined' ? y : 0;\n\t  }\n\t\n\t  _createClass(Point, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Point(this.x, this.y);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(point) {\n\t      return this.x === point.x && this.y === point.y;\n\t    }\n\t  }]);\n\t\n\t  return Point;\n\t}();\n\t\n\t/*\n\t * Rect\n\t */\n\t\n\t\n\tvar Rect = exports.Rect = function () {\n\t  function Rect(x, y, width, height) {\n\t    _classCallCheck(this, Rect);\n\t\n\t    this.x = typeof x !== 'undefined' ? x : Infinity;\n\t    this.y = typeof y !== 'undefined' ? y : Infinity;\n\t    this.width = typeof width !== 'undefined' ? width : -Infinity;\n\t    this.height = typeof height !== 'undefined' ? height : -Infinity;\n\t  }\n\t\n\t  _createClass(Rect, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Rect(this.x, this.y, this.width, this.height);\n\t    }\n\t  }, {\n\t    key: \"isEmpty\",\n\t    value: function isEmpty() {\n\t      return this.x === Infinity && this.y === Infinity && this.width === -Infinity && this.height === -Infinity;\n\t    }\n\t\n\t    // convenience method\n\t\n\t  }, {\n\t    key: \"right\",\n\t    value: function right() {\n\t      return this.x + this.width;\n\t    }\n\t  }, {\n\t    key: \"bottom\",\n\t    value: function bottom() {\n\t      return this.y + this.height;\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(rect) {\n\t      return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;\n\t    }\n\t\n\t    // other can be a Point or a Rect\n\t\n\t  }, {\n\t    key: \"contains\",\n\t    value: function contains(other) {\n\t      if (other instanceof Point) {\n\t        return other.x >= this.x && other.x <= this.x + this.width && other.y >= this.y && other.y <= this.y + this.height;\n\t      } else {\n\t        // better be instance of Rect\n\t        return this.x <= other.x && this.x + this.width >= other.x + other.width && this.y <= other.y && this.y + this.height >= other.y + other.height;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"union\",\n\t    value: function union(rect) {\n\t\n\t      var right = Math.max(this.x + this.width, rect.x + rect.width);\n\t      var bottom = Math.max(this.y + this.height, rect.y + rect.height);\n\t\n\t      this.x = Math.min(this.x, rect.x);\n\t      this.y = Math.min(this.y, rect.y);\n\t\n\t      this.width = right - this.x;\n\t      this.height = bottom - this.y;\n\t    }\n\t  }]);\n\t\n\t  return Rect;\n\t}();\n\t\n\t/**\n\t * Margins\n\t *\n\t * @class\n\t */\n\t\n\t\n\tvar Margins = exports.Margins = function () {\n\t  function Margins(left, top, right, bottom) {\n\t    _classCallCheck(this, Margins);\n\t\n\t    this.left = typeof left !== 'undefined' ? left : 0;\n\t    this.top = typeof top !== 'undefined' ? top : 0;\n\t    this.right = typeof right !== 'undefined' ? right : 0;\n\t    this.bottom = typeof bottom !== 'undefined' ? bottom : 0;\n\t  }\n\t\n\t  _createClass(Margins, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Margins(this.left, this.top, this.right, this.bottom);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(margins) {\n\t      return this.left === margins.left && this.top === margins.top && this.right === margins.right && this.bottom === margins.bottom;\n\t    }\n\t  }]);\n\t\n\t  return Margins;\n\t}();\n\t\n\t/**\n\t * Size\n\t *\n\t * @class\n\t */\n\t\n\t\n\tvar Size = exports.Size = function () {\n\t  function Size(width, height) {\n\t    _classCallCheck(this, Size);\n\t\n\t    this.width = typeof width !== 'undefined' ? width : 0;\n\t    this.height = typeof height !== 'undefined' ? height : 0;\n\t  }\n\t\n\t  _createClass(Size, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Size(this.width, this.height);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(size) {\n\t      return this.width === size.width && this.height === size.height;\n\t    }\n\t  }]);\n\t\n\t  return Size;\n\t}();\n\t\n\t/*\n\t * Pitches, notes\n\t */\n\t\n\t\n\tvar Step = exports.Step = {\n\t  Do: 0,\n\t  Du: 1,\n\t  Re: 2,\n\t  Me: 3,\n\t  Mi: 4,\n\t  Fa: 5,\n\t  Fu: 6,\n\t  So: 7,\n\t  La: 9,\n\t  Te: 10,\n\t  Ti: 11\n\t};\n\t\n\t// this little array helps map step values to staff positions. The numeric values of steps\n\t// correspond to whole step increments (2) or half step increments (1). This gives us the ability\n\t// to compare pitches precisely, but makes it challenging to place steps on the staff. this little\n\t// array maps the steps to an incremental position the steps take on the staff line. This works\n\t// so simply because chant only uses do and fa clefs, and only has a flatted ti (te), making\n\t// for relatively easy mapping to staff line locations.\n\t//                         Do Du Re Me Mi Fa Fu So    La Te Ti\n\tvar __StepToStaffPosition = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6];\n\tvar __StaffOffsetToStep = [Step.Do, Step.Re, Step.Mi, Step.Fa, Step.So, Step.La, Step.Ti]; // no accidentals in this one\n\t\n\t\n\tvar Pitch = exports.Pitch = function () {\n\t  function Pitch(step, octave) {\n\t    _classCallCheck(this, Pitch);\n\t\n\t    if (typeof octave === 'undefined') {\n\t      octave = Math.floor(step / 12);\n\t      step = step % 12;\n\t    }\n\t    this.step = step;\n\t    this.octave = octave;\n\t  }\n\t\n\t  _createClass(Pitch, [{\n\t    key: \"toInt\",\n\t    value: function toInt() {\n\t      return this.octave * 12 + this.step;\n\t    }\n\t  }, {\n\t    key: \"transpose\",\n\t    value: function transpose(step) {\n\t      return new Pitch(this.toInt() + step);\n\t    }\n\t  }, {\n\t    key: \"isHigherThan\",\n\t    value: function isHigherThan(pitch) {\n\t      return this.toInt() > pitch.toInt();\n\t    }\n\t  }, {\n\t    key: \"isLowerThan\",\n\t    value: function isLowerThan(pitch) {\n\t      return this.toInt() < pitch.toInt();\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(pitch) {\n\t      return this.toInt() === pitch.toInt();\n\t    }\n\t  }], [{\n\t    key: \"stepToStaffOffset\",\n\t    value: function stepToStaffOffset(step) {\n\t      return __StepToStaffPosition[step];\n\t    }\n\t  }, {\n\t    key: \"staffOffsetToStep\",\n\t    value: function staffOffsetToStep(offset) {\n\t      while (offset < 0) {\n\t        offset = __StaffOffsetToStep.length + offset;\n\t      }return __StaffOffsetToStep[offset % __StaffOffsetToStep.length];\n\t    }\n\t  }]);\n\t\n\t  return Pitch;\n\t}();\n\t\n\tfunction generateRandomGuid() {\n\t  function s4() {\n\t    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n\t  }\n\t  return s4() + s4();\n\t}\n\t\n\tfunction getCssForProperties(properties) {\n\t  return Object.entries(properties).map(function (_ref) {\n\t    var _ref2 = _slicedToArray(_ref, 2),\n\t        key = _ref2[0],\n\t        val = _ref2[1];\n\t\n\t    return key && val && key !== \"class\" ? key + \": \" + val + \";\" : \"\";\n\t  }).join(\"\");\n\t}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t//\n\t\n\t/**\n\t * @class\n\t */\n\tvar Language = exports.Language = function () {\n\t  function Language(name) {\n\t    _classCallCheck(this, Language);\n\t\n\t    this.name = typeof name !== \"undefined\" ? name : \"<unknown>\";\n\t    this.centerNeume = false;\n\t  }\n\t\n\t  /**\n\t   * @param {String} text The string to parsed into words.\n\t   * @return {Word[]} the resulting parsed words from syllabification\n\t   */\n\t\n\t\n\t  _createClass(Language, [{\n\t    key: \"syllabify\",\n\t    value: function syllabify(text) {\n\t      var parsedWords = [];\n\t\n\t      if (typeof text === \"undefined\" || text === \"\") return parsedWords;\n\t\n\t      // Divide the text into words separated by whitespace\n\t      var words = text.split(/[\\s]+/);\n\t\n\t      for (var i = 0, end = words.length; i < end; i++) {\n\t        parsedWords.push(this.syllabifyWord(words[i]));\n\t      }return parsedWords;\n\t    }\n\t  }]);\n\t\n\t  return Language;\n\t}();\n\t\n\tvar English = exports.English = function (_Language) {\n\t  _inherits(English, _Language);\n\t\n\t  function English() {\n\t    _classCallCheck(this, English);\n\t\n\t    var _this = _possibleConstructorReturn(this, (English.__proto__ || Object.getPrototypeOf(English)).call(this, \"English\"));\n\t\n\t    _this.centerNeume = true;\n\t    return _this;\n\t  }\n\t\n\t  /**\n\t   * @param {String} s the string to search\n\t   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t   */\n\t\n\t\n\t  _createClass(English, [{\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var regexLetter = /[a-z\\u0300-\\u0311äëïöüÿáéíóúýàèìòùỳāēīōūȳăĕĭŏŭæœ‿]+/i;\n\t      var match = regexLetter.exec(s.slice(startIndex));\n\t      if (match) return {\n\t        found: true,\n\t        startIndex: startIndex + match.index,\n\t        length: match[0].length\n\t      };\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return English;\n\t}(Language);\n\t\n\t/**\n\t * @class\n\t */\n\t\n\t\n\tvar Latin = exports.Latin = function (_Language2) {\n\t  _inherits(Latin, _Language2);\n\t\n\t  /**\n\t   * @constructs\n\t   */\n\t  function Latin() {\n\t    _classCallCheck(this, Latin);\n\t\n\t    // fixme: ui is only diphthong in the exceptional cases below (according to Wheelock's Latin)\n\t    var _this2 = _possibleConstructorReturn(this, (Latin.__proto__ || Object.getPrototypeOf(Latin)).call(this, \"Latin\"));\n\t\n\t    _this2.diphthongs = [\"ae\", \"au\", \"oe\", \"aé\", \"áu\", \"oé\"];\n\t    // for centering over the vowel, we will need to know any combinations that might be diphthongs:\n\t    _this2.possibleDiphthongs = _this2.diphthongs.concat([\"ei\", \"eu\", \"ui\", \"éi\", \"éu\", \"úi\"]);\n\t    _this2.regexVowel = /(i|(?:[qg]|^)u)?([eé][iu]|[uú]i|[ao][eé]|[aá]u|[aeiouáéíóúäëïöüāēīōūăĕĭŏŭåe̊o̊ůæœǽyýÿ])/i;\n\t\n\t    // some words that are simply exceptions to standard syllabification rules!\n\t    var wordExceptions = new Object();\n\t\n\t    // ui combos pronounced as diphthongs\n\t    wordExceptions[\"huius\"] = [\"hui\", \"us\"];\n\t    wordExceptions[\"cuius\"] = [\"cui\", \"us\"];\n\t    wordExceptions[\"huic\"] = [\"huic\"];\n\t    wordExceptions[\"cui\"] = [\"cui\"];\n\t    wordExceptions[\"hui\"] = [\"hui\"];\n\t\n\t    // eu combos pronounced as diphthongs\n\t    wordExceptions[\"euge\"] = [\"eu\", \"ge\"];\n\t    wordExceptions[\"seu\"] = [\"seu\"];\n\t\n\t    _this2.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ä\", \"ë\", \"ï\", \"ö\", \"ü\", \"ā\", \"ē\", \"ī\", \"ō\", \"ū\", \"ă\", \"ĕ\", \"ĭ\", \"ŏ\", \"ŭ\", \"å\", \"e̊\", \"o̊\", \"ů\", \"æ\", \"œ\", \"ǽ\", // no accented œ in unicode?\n\t    \"y\", \"ý\", \"ÿ\"]; // y is treated as a vowel; not native to Latin but useful for words borrowed from Greek\n\t\n\t    _this2.vowelsThatMightBeConsonants = [\"i\", \"u\"];\n\t\n\t    _this2.muteConsonantsAndF = [\"b\", \"c\", \"d\", \"g\", \"p\", \"t\", \"f\"];\n\t\n\t    _this2.liquidConsonants = [\"l\", \"r\"];\n\t    return _this2;\n\t  }\n\t\n\t  // c must be lowercase!\n\t\n\t\n\t  _createClass(Latin, [{\n\t    key: \"isVowel\",\n\t    value: function isVowel(c) {\n\t      for (var i = 0, end = this.vowels.length; i < end; i++) {\n\t        if (this.vowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t  }, {\n\t    key: \"isVowelThatMightBeConsonant\",\n\t    value: function isVowelThatMightBeConsonant(c) {\n\t      for (var i = 0, end = this.vowelsThatMightBeConsonants.length; i < end; i++) {\n\t        if (this.vowelsThatMightBeConsonants[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    // substring should be a vowel and the character following\n\t\n\t  }, {\n\t    key: \"isVowelActingAsConsonant\",\n\t    value: function isVowelActingAsConsonant(substring) {\n\t      return this.isVowelThatMightBeConsonant(substring[0]) && this.isVowel(substring[1]);\n\t    }\n\t\n\t    /**\n\t     * f is not a mute consonant, but we lump it together for syllabification\n\t     * since it is syntactically treated the same way\n\t     *\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isMuteConsonantOrF\",\n\t    value: function isMuteConsonantOrF(c) {\n\t      for (var i = 0, end = this.muteConsonantsAndF.length; i < end; i++) {\n\t        if (this.muteConsonantsAndF[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is a liquid consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isLiquidConsonant\",\n\t    value: function isLiquidConsonant(c) {\n\t      for (var i = 0, end = this.liquidConsonants.length; i < end; i++) {\n\t        if (this.liquidConsonants[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isDiphthong\",\n\t    value: function isDiphthong(s) {\n\t      for (var i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        if (this.diphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isPossibleDiphthong\",\n\t    value: function isPossibleDiphthong(s) {\n\t      for (var i = 0, end = this.possibleDiphthongs.length; i < end; i++) {\n\t        if (this.possibleDiphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * Rules for Latin syllabification (from Collins, \"A Primer on Ecclesiastical Latin\")\n\t     *\n\t     * Divisions occur when:\n\t     *   1. After open vowels (those not followed by a consonant) (e.g., \"pi-us\" and \"De-us\")\n\t     *   2. After vowels followed by a single consonant (e.g., \"vi-ta\" and \"ho-ra\")\n\t     *   3. After the first consonant when two or more consonants follow a vowel\n\t     *      (e.g., \"mis-sa\", \"minis-ter\", and \"san-ctus\").\n\t     *\n\t     * Exceptions:\n\t     *   1. In compound words the consonants stay together (e.g., \"de-scribo\").\n\t     *   2. A mute consonant (b, c, d, g, p, t) or f followed by a liquid consonant (l, r)\n\t     *      go with the succeeding vowel: \"la-crima\", \"pa-tris\"\n\t     *\n\t     * In addition to these rules, Wheelock's Latin provides this sound exception:\n\t     *   -  Also counted as single consonants are qu and the aspirates ch, ph,\n\t     *      th, which should never be separated in syllabification:\n\t     *      architectus, ar-chi-tec-tus; loquacem, lo-qua-cem.\n\t     *\n\t     */\n\t\n\t  }, {\n\t    key: \"syllabifyWord\",\n\t    value: function syllabifyWord(word) {\n\t      var syllables = [];\n\t      var haveCompleteSyllable = false;\n\t      var previousWasVowel = false;\n\t      var workingString = word.toLowerCase();\n\t      var startSyllable = 0;\n\t\n\t      var c, lookahead, haveLookahead;\n\t\n\t      // a helper function to create syllables\n\t      var makeSyllable = function makeSyllable(length) {\n\t        if (haveCompleteSyllable) {\n\t          syllables.push(word.substr(startSyllable, length));\n\t          startSyllable += length;\n\t        }\n\t\n\t        haveCompleteSyllable = false;\n\t      };\n\t\n\t      for (var i = 0, wordLength = workingString.length; i < wordLength; i++) {\n\t        c = workingString[i];\n\t\n\t        // get our lookahead in case we need them...\n\t        lookahead = \"*\";\n\t        haveLookahead = i + 1 < wordLength;\n\t\n\t        if (haveLookahead) lookahead = workingString[i + 1];\n\t\n\t        var cIsVowel = this.isVowel(c);\n\t\n\t        // i is a special case for a vowel. when i is at the beginning\n\t        // of the word (Iesu) or i is between vowels (alleluia),\n\t        // then the i is treated as a consonant (y)\n\t        if (c === \"i\") {\n\t          if (i === 0 && haveLookahead && this.isVowel(lookahead)) cIsVowel = false;else if (previousWasVowel && haveLookahead && this.isVowel(lookahead)) {\n\t            cIsVowel = false;\n\t          }\n\t        }\n\t\n\t        if (c === \"-\") {\n\t          // a hyphen forces a syllable break, which effectively resets\n\t          // the logic...\n\t\n\t          haveCompleteSyllable = true;\n\t          previousWasVowel = false;\n\t          makeSyllable(i - startSyllable);\n\t          startSyllable++;\n\t        } else if (cIsVowel) {\n\t          // once we get a vowel, we have a complete syllable\n\t          haveCompleteSyllable = true;\n\t\n\t          if (previousWasVowel && !this.isDiphthong(workingString[i - 1] + \"\" + c)) {\n\t            makeSyllable(i - startSyllable);\n\t            haveCompleteSyllable = true;\n\t          }\n\t\n\t          previousWasVowel = true;\n\t        } else if (haveLookahead) {\n\t          if (c === \"q\" && lookahead === \"u\" || lookahead === \"h\" && (c === \"c\" || c === \"p\" || c === \"t\")) {\n\t            // handle wheelock's exceptions for qu, ch, ph and th\n\t            makeSyllable(i - startSyllable);\n\t            i++; // skip over the 'h' or 'u'\n\t          } else if (previousWasVowel && this.isVowel(lookahead)) {\n\t            // handle division rule 2\n\t            makeSyllable(i - startSyllable);\n\t          } else if (this.isMuteConsonantOrF(c) && this.isLiquidConsonant(lookahead)) {\n\t            // handle exception 2\n\t            makeSyllable(i - startSyllable);\n\t          } else if (haveCompleteSyllable) {\n\t            // handle division rule 3\n\t            makeSyllable(i + 1 - startSyllable);\n\t          }\n\t\n\t          previousWasVowel = false;\n\t        }\n\t      }\n\t\n\t      // if we have a complete syllable, we can add it as a new one. Otherwise\n\t      // we tack the remaining characters onto the last syllable.\n\t      if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));else if (startSyllable > 0) syllables[syllables.length - 1] += word.substr(startSyllable);\n\t\n\t      return syllables;\n\t    }\n\t\n\t    /**\n\t     * @param {String} s the string to search\n\t     * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t     * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t     */\n\t\n\t  }, {\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var match = this.regexVowel.exec(s.slice(startIndex));\n\t      if (match) {\n\t        if (match[1]) {\n\t          // the first group should be ignored, as it is to separate an i or u that is used as a consonant.\n\t          match.index += match[1].length;\n\t        }\n\t        return {\n\t          found: true,\n\t          startIndex: startIndex + match.index,\n\t          length: match[2].length\n\t        };\n\t      }\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return Latin;\n\t}(Language);\n\t\n\t/**\n\t * @class\n\t */\n\t\n\t\n\tvar Spanish = exports.Spanish = function (_Language3) {\n\t  _inherits(Spanish, _Language3);\n\t\n\t  function Spanish() {\n\t    _classCallCheck(this, Spanish);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (Spanish.__proto__ || Object.getPrototypeOf(Spanish)).call(this, \"Spanish\"));\n\t\n\t    _this3.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ü\"];\n\t\n\t    _this3.weakVowels = [\"i\", \"u\", \"ü\", \"y\"];\n\t\n\t    _this3.strongVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\n\t\n\t    _this3.diphthongs = [\"ai\", \"ei\", \"oi\", \"ui\", \"ia\", \"ie\", \"io\", \"iu\", \"au\", \"eu\", \"ou\", \"ua\", \"ue\", \"uo\", \"ái\", \"éi\", \"ói\", \"úi\", \"iá\", \"ié\", \"ió\", \"iú\", \"áu\", \"éu\", \"óu\", \"uá\", \"ué\", \"uó\", \"üe\", \"üi\"];\n\t\n\t    _this3.uDiphthongExceptions = [\"gue\", \"gui\", \"qua\", \"que\", \"qui\", \"quo\"];\n\t    return _this3;\n\t  }\n\t\n\t  // c must be lowercase!\n\t\n\t\n\t  _createClass(Spanish, [{\n\t    key: \"isVowel\",\n\t    value: function isVowel(c) {\n\t      for (var i = 0, end = this.vowels.length; i < end; i++) {\n\t        if (this.vowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isWeakVowel\",\n\t    value: function isWeakVowel(c) {\n\t      for (var i = 0, end = this.weakVowels.length; i < end; i++) {\n\t        if (this.weakVowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isStrongVowel\",\n\t    value: function isStrongVowel(c) {\n\t      for (var i = 0, end = this.strongVowels.length; i < end; i++) {\n\t        if (this.strongVowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isDiphthong\",\n\t    value: function isDiphthong(s) {\n\t      for (var i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        if (this.diphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t  }, {\n\t    key: \"createSyllable\",\n\t    value: function createSyllable(text) {\n\t      /*\n\t      var accented = false;\n\t      var ellidesToNext = false;\n\t       if (text.length > 0) {\n\t           if (text[0] == '`') {\n\t              accented = true;\n\t              text = text.substr(1);\n\t          }\n\t           if (text[text.length - 1] == '_') {\n\t              ellidesToNext = true;\n\t              text = text.substr(0, text.length - 1);\n\t          }\n\t      }\n\t       var s = new Syllable(text);\n\t       s.isMusicalAccent = accented;\n\t      s.elidesToNext = ellidesToNext;*/\n\t\n\t      return text;\n\t    }\n\t\n\t    /**\n\t     */\n\t\n\t  }, {\n\t    key: \"syllabifyWord\",\n\t    value: function syllabifyWord(word) {\n\t      var syllables = [];\n\t\n\t      var haveCompleteSyllable = false;\n\t      var previousIsVowel = false;\n\t      var previousIsStrongVowel = false; // only valid if previousIsVowel == true\n\t      var startSyllable = 0;\n\t\n\t      // fixme: first check for prefixes\n\t\n\t      for (var i = 0; i < word.length; i++) {\n\t        var c = word[i].toLowerCase();\n\t\n\t        if (this.isVowel(c)) {\n\t          // we have a complete syllable as soon as we have a vowel\n\t          haveCompleteSyllable = true;\n\t\n\t          var cIsStrongVowel = this.isStrongVowel(c);\n\t\n\t          if (previousIsVowel) {\n\t            // if we're at a strong vowel, then we finish out the last syllable\n\t            if (cIsStrongVowel) {\n\t              if (previousIsStrongVowel) {\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                startSyllable = i;\n\t              }\n\t            }\n\t          }\n\t\n\t          previousIsVowel = true;\n\t          previousIsStrongVowel = cIsStrongVowel;\n\t        } else {\n\t          if (!haveCompleteSyllable) {\n\t            // do nothing since we don't have a complete syllable yet...\n\t          } else {\n\t            // handle explicit syllable breaks\n\t            if (word[i] === \"-\") {\n\t              // start new syllable\n\t              syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t              startSyllable = ++i;\n\t            } else {\n\t              var numberOfConsonants = 1,\n\t                  consonant2;\n\t\n\t              // count how many more consonants there are\n\t              for (var j = i + 1; j < word.length; j++) {\n\t                if (this.isVowel(word[j])) break;\n\t                numberOfConsonants++;\n\t              }\n\t\n\t              if (numberOfConsonants === 1) {\n\t                // start new syllable\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                startSyllable = i;\n\t              } else if (numberOfConsonants === 2) {\n\t                consonant2 = word[i + 1].toLowerCase();\n\t                if (consonant2 === \"l\" || consonant2 === \"r\" || c === \"c\" && consonant2 === \"h\") {\n\t                  // split before the consonant pair\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                  startSyllable = i++;\n\t                } else {\n\t                  //split the consonants\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, ++i - startSyllable)));\n\t                  startSyllable = i;\n\t                }\n\t              } else if (numberOfConsonants === 3) {\n\t                consonant2 = word[i + 1].toLowerCase();\n\t\n\t                // if second consonant is s, divide cc-c, otherwise divide c-cc\n\t                if (consonant2 === \"s\") {\n\t                  i += 2;\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                } else syllables.push(this.createSyllable(word.substr(startSyllable, ++i - startSyllable)));\n\t\n\t                startSyllable = i;\n\t              } else if (numberOfConsonants === 4) {\n\t                // four always get split cc-cc\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable + 2)));\n\t                startSyllable = i + 2;\n\t                i += 3;\n\t              }\n\t            }\n\t\n\t            haveCompleteSyllable = false;\n\t          }\n\t\n\t          previousIsVowel = false;\n\t        }\n\t      }\n\t\n\t      // if we have a complete syllable, we can add it as a new one. Otherwise\n\t      // we tack the remaining characters onto the last syllable.\n\t      if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));else if (startSyllable > 0) syllables[syllables.length - 1] += word.substr(startSyllable);else if (syllables.length === 0) syllables.push(this.createSyllable(word));\n\t\n\t      return syllables;\n\t    }\n\t\n\t    /**\n\t     * @param {String} s the string to search\n\t     * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t     * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t     */\n\t\n\t  }, {\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var i, end, index;\n\t      var workingString = s.toLowerCase();\n\t\n\t      // do we have a diphthongs?\n\t      for (i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        var d = this.diphthongs[i];\n\t        index = workingString.indexOf(d, startIndex);\n\t\n\t        if (index >= 0) {\n\t          // check the exceptions...\n\t          if (d[0] === \"u\" && index > 0) {\n\t            var tripthong = s.substr(index - 1, 3).toLowerCase();\n\t\n\t            for (var j = 0, endj = this.uDiphthongExceptions.length; i < endj; j++) {\n\t              if (tripthong === this.uDiphthongExceptions[j]) {\n\t                // search from after the u...\n\t                return this.findVowelSegment(s, index + 1);\n\t              }\n\t            }\n\t          }\n\t\n\t          return { found: true, startIndex: index, length: d.length };\n\t        }\n\t      }\n\t\n\t      // no diphthongs. Let's look for single vowels then...\n\t      for (i = 0, end = this.vowels.length; i < end; i++) {\n\t        index = workingString.indexOf(this.vowels[i], startIndex);\n\t\n\t        if (index >= 0) return { found: true, startIndex: index, length: 1 };\n\t      }\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return Spanish;\n\t}(Language);\n\t\n\tvar language = exports.language = {\n\t  english: new English(),\n\t  latin: new Latin(),\n\t  spanish: new Spanish()\n\t};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t// generated based on the svg data\n\tvar Glyphs = exports.Glyphs = {\n\t  None: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0,\n\t      height: 0\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 0\n\t    },\n\t    align: \"left\"\n\t  },\n\t  AcuteAccent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M4 0C-.614.52-.614.52-.803-3.182l60.768-108.422c4.52-7.182 10.543-13.67 18.075-13.67 5.27 0 14.31 1.264 23.346 7.793 7.53 5.223 8.803 11.752 8.803 16.975 0 3.917-.52 11.1-8.05 17.628L4 0z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0, // TODO: figure out a better way to align this horizontally.  width should be 110.992,\n\t      height: 125.794\n\t    },\n\t    origin: {\n\t      x: 0.803,\n\t      y: 125.274\n\t    },\n\t    align: \"left\"\n\t  },\n\t  GraveAccent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M105.386.26C110 .78 110 .78 110.189-2.922l-60.768-108.422c-4.52-7.182-10.543-13.67-18.075-13.67-5.27 0-14.31 1.264-23.346 7.793-7.53 5.223-8.803 11.752-8.803 16.975 0 3.917.52 11.1 8.05 17.628L105.386.26z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0, //110.992,\n\t      height: 125.794\n\t    },\n\t    origin: {\n\t      x: 0, // -110.992,\n\t      y: 125.274\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Circle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 -50A50 50 0 0 0 100 -50 50 50 0 0 0 0 -50M10 -50A40 40 0 0 1 90 -50 40 40 0 0 1 10 -50\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 100\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 100\n\t    }\n\t  },\n\t  Semicircle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 -50A50 50 0 0 0 100 -50 5 5 0 0 0 90 -50 40 40 0 0 1 10 -50 5 5 0 0 0 0 -50\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 55\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 50\n\t    }\n\t  },\n\t  ReversedSemicircle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 0A50 50 0 0 1 100 0 5 5 0 0 1 90 0 40 40 0 0 0 10 0 5 5 0 0 1 0 0\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 55\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 50\n\t    }\n\t  },\n\t  Stropha: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M1.22-73.438c4.165 13.02 12.238 27.084 24.217 42.188L49.657 0 34.812 27.344C18.666 55.47-.084 72.396-21.438 78.124c4.687-3.645 7.03-8.593 7.03-14.843 0-8.853-4.947-20.572-14.843-35.155L-48 0 1.22-73.438z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 97.657,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 48,\n\t      y: 73.438\n\t    },\n\t    align: \"left\"\n\t  },\n\t  BeginningAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 152.344\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 88.344\n\t    },\n\t    align: \"left\"\n\t  },\n\t  BeginningDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.562\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosDescLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M39.063 273.472c5.73.52 7.29-6.25 4.687-20.312V-65.59c-13.542 2.083-24.22 5.468-32.03 10.156C3.905-50.226 0-43.714 0-35.904V71.91c5.73-5.21 10.677-8.594 14.844-10.157 5.73-1.562 12.24-2.343 19.53-2.343v196.875c0 11.458 1.563 17.187 4.688 17.187\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 46.353,\n\t      height: 339.582\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 65.59\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosDescShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M34.375 191.923c0 8.333 1.563 12.24 4.688 11.72 3.125-.522 4.687-7.033 4.687-19.533v-250c-13.542 2.084-24.22 5.47-32.03 10.157C3.905-50.525 0-44.015 0-36.203V71.61c5.73-5.208 10.677-8.593 14.844-10.156 5.73-1.562 12.24-2.344 19.53-2.344v132.813z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 43.75,\n\t      height: 270.053\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 65.89\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M39.063-269.562c5.73-.52 7.29 6.25 4.687 20.312V69.5c-13.542-2.083-24.22-5.47-32.03-10.156C3.905 54.134 0 47.624 0 39.812V-68c5.73 5.208 10.677 8.594 14.844 10.156 5.73 1.563 12.24 2.344 19.53 2.344v-196.875c0-11.458 1.563-17.187 4.688-17.187z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 46.353,\n\t      height: 339.582\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 270.082\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M34.375-188.125c0-8.333 1.563-12.24 4.688-11.72 3.125.522 4.687 7.033 4.687 19.532v250c-13.542-2.083-24.22-5.468-32.03-10.156C3.905 54.324 0 47.813 0 40V-67.813c5.73 5.21 10.677 8.594 14.844 10.157 5.73 1.562 12.24 2.344 19.53 2.343v-132.812z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 43.75,\n\t      height: 270.052\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 200.365\n\t    },\n\t    align: \"left\"\n\t  },\n\t  DoClef: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 98.406V-97.688C0-118 5.99-134.275 17.97-146.516c11.978-12.24 27.603-18.36 46.874-18.36 10.937 0 19.53 3.126 25.78 9.376s9.376 14.583 9.376 25v107.813l-6.25-5.47c-4.167-3.645-10.287-7.42-18.36-11.327-8.072-3.907-16.796-5.86-26.17-5.86-11.46 0-21.486 4.427-30.08 13.282-8.593 8.854-12.89 19.53-12.89 32.03s4.297 23.308 12.89 32.423c8.594 9.115 18.62 13.672 30.08 13.672 9.374 0 18.098-1.822 26.17-5.468 8.073-3.646 14.193-7.292 18.36-10.938l6.25-6.25V132c0 9.896-3.125 18.1-9.375 24.61-6.25 6.51-14.844 9.765-25.78 9.765-19.272 0-34.897-6.25-46.876-18.75C5.99 135.125 0 118.72 0 98.405z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 331.251\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 164.876\n\t    },\n\t    align: \"left\"\n\t  },\n\t  FaClef: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M85.156-32v193.75c0 9.375-1.562 14.323-4.687 14.844-1.564 0-2.605-.52-3.126-1.563-.52-1.04-.782-2.603-.78-4.686V56.28c-8.335-8.332-19.793-12.5-34.376-12.5-17.71 0-31.77 3.907-42.188 11.72V-32c0-18.23 14.193-27.344 42.578-27.344 28.385 0 42.578 9.115 42.578 27.344zM98.438 93V-92.156c0-19.27 5.73-34.896 17.187-46.875 11.458-11.98 26.562-17.97 45.313-17.97 10.937 0 19.14 2.865 24.61 8.594 5.467 5.73 8.202 13.542 8.202 23.437v103.126l-5.47-4.687c-3.645-3.647-9.374-7.293-17.186-10.94-7.813-3.645-15.886-5.467-24.22-5.468-11.978 0-22.004 4.167-30.077 12.5-8.073 8.334-12.11 18.36-12.11 30.08 0 11.717 4.037 22.004 12.11 30.858s18.1 13.28 30.078 13.28c8.333 0 16.406-1.822 24.22-5.468 7.81-3.645 13.54-7.03 17.186-10.156l5.47-5.468V125.81c0 9.896-2.865 17.84-8.594 23.83-5.73 5.988-13.802 8.983-24.22 8.983-18.75 0-33.853-6.12-45.31-18.36-11.46-12.24-17.19-27.994-17.19-47.265z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 193.752,\n\t      height: 333.595\n\t    },\n\t    origin: {\n\t      x: 0.001,\n\t      y: 157.001\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Flat: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M7.813-204.406c4.166 0 6.25 5.208 6.25 15.625L12.5-10.657C33.854 13.302 54.167 25.28 73.438 25.28c9.374 0 14.062-4.686 14.062-14.06 0-6.25-1.042-11.72-3.125-16.407-2.083-4.688-7.03-9.766-14.844-15.235-7.81-5.47-13.02-8.984-15.624-10.547L27.344-45.81V-80.97c17.187 0 33.073 4.82 47.656 14.454C89.583-56.88 96.875-47.376 96.875-38c0 67.708-.26 101.562-.78 101.563-38.543 0-69.532-12.24-92.97-36.72C0-52.322-1.042-123.936 0-188c0-10.937 2.604-16.406 7.813-16.406z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 97.917,\n\t      height: 267.969\n\t    },\n\t    origin: {\n\t      x: 1.042,\n\t      y: 204.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Mora: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M47.478-24c6.957 0 12.793 2.288 17.49 6.883C69.662-12.52 72-6.904 72-.267c0 6.64-2.337 12.352-7.033 17.118C60.27 21.618 54.435 24 47.477 24c-6.26 0-11.748-2.383-16.444-7.15C26.337 12.086 24 6.374 24-.265c0-6.638 2.337-12.255 7.033-16.85C35.73-21.713 41.217-24 47.478-24z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 48,\n\t      height: 48\n\t    },\n\t    origin: {\n\t      x: -24,\n\t      y: 24\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Natural: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M7.906-166.563c-2.864 0-5.614.52-8.218 1.563v13.28l.78 56.25.782 78.907v85.157c.52 3.646 2.604 5.73 6.25 6.25l23.438-3.906 23.437-3.907v29.69c0 42.186-.26 63.54-.78 64.06l6.25 2.345c1.04.52 2.082.78 3.124.78 2.603 0 4.947-1.3 7.03-3.905L67.656-71.25c-.52-2.604-2.083-3.906-4.687-3.906-7.814 0-17.19 1.04-28.126 3.125l-19.53 3.124.78-38.28V-165c-2.604-1.042-5.323-1.562-8.188-1.563zM55.938-40v71.875l-41.407 7.03c0-48.436.262-72.655.783-72.655L55.938-40z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 70.311,\n\t      height: 330.469\n\t    },\n\t    origin: {\n\t      x: 0.312,\n\t      y: 166.563\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Sharp: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"m41.725,-73.773c-5.421,-0.241-10.878,5.856-6.549,12.357L67.061,-20.473 61.264,-12.5 13.436,-71.199c-5.634,-5.934-16.988,1.032-11.232,9.783L50.756,0.182 2.203,61.416c-6.745,7.984 3.442,17.859 11.232,9.783L61.264,12.5l5.797,7.973-31.885,40.943c-5.578,6.844 5.588,16.005 11.594,9.783L77.568,33.154 108.367,71.199c4.894,6.717 17.343,-1.575 11.232,-9.783L87.715,20.473 93.873,12.5 141.34,71.199c6.725,7.67 17.509,-2.248 11.596,-9.783L104.02,0.182 152.936,-61.416c5.52,-7.02-5.541,-16.309-11.596,-9.783L93.873,-12.5l-6.158,-7.973 31.884766,-40.943c5.407,-7.045-5.505,-15.924-11.232,-9.783L77.568,-33.154 46.77,-71.199c-1.435,-1.708-3.238,-2.494-5.044922,-2.574zM77.568,-8.516 84.09,0.182 77.568,8.516 70.684,0.182Z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 154.646,\n\t      height: 147.987\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 74.098\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusAsc: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50 30.25c0 12.5-3.125 21.354-9.375 26.562-3.125 2.605-7.813 3.907-14.063 3.907-3.125 0-5.99-.522-8.593-1.564-2.605-1.04-5.6-2.474-8.986-4.297C5.6 53.035 2.734 51.603.39 50.56c-2.343-1.04-5.338-2.474-8.984-4.296-3.646-1.823-6.77-3.256-9.375-4.297-2.603-1.043-5.468-1.564-8.593-1.564-6.25 0-10.937 1.563-14.062 4.688C-46.875 50.824-50 59.677-50 71.656v-106.25c0-13.02 3.125-21.875 9.375-26.562 3.125-2.604 7.813-3.906 14.063-3.907 3.125 0 5.99.52 8.593 1.563 2.605 1.042 5.73 2.474 9.376 4.297 3.646 1.823 6.51 2.995 8.594 3.516l10.938 5.468c6.25 3.126 11.458 4.69 15.624 4.69 6.25 0 10.938-1.564 14.063-4.69C46.875-55.426 50-64.02 50-76V30.25z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 76\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusDes: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 30.844v-106.25c0 11.458 3.125 20.052 9.375 25.78 3.125 3.126 7.813 4.69 14.063 4.688 4.687 0 13.41-3.255 26.17-9.765 12.762-6.51 21.746-9.766 26.954-9.766 6.25 0 10.938 1.303 14.063 3.907C46.875-55.874 50-47.02 50-34V72.25c0-11.98-3.125-20.833-9.375-26.563C37.5 42.563 32.812 41 26.562 41 21.875 41 13.023 44.385 0 51.156c-4.167 2.604-8.594 4.948-13.28 7.032-4.69 2.083-9.116 3.124-13.283 3.124-6.25 0-10.937-1.302-14.062-3.906C-46.875 52.198-50 43.344-50 30.844z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M 19.055,78.887 C 20.242,78.487 21.532,77.890 22.925,77.097 24.318,76.304 26.700882,74.417 30.074,71.438 33.447,68.458 36.524,64.985 39.303,61.019 42.083,57.052 44.563,51.396 46.743,44.05 48.923,36.704 50.013,28.671 50.013,19.950525 L 50.013,-34.226 C 50.013,-54.464 42.074,-64.584 26.195,-64.584 20.248,-64.584 11.519,-61.410 0.007,-55.064 -11.506,-48.717 -20.235,-45.544 -26.182,-45.544 -34.515,-45.544 -40.568,-48.520 -44.340791,-54.473 -48.114,-60.426 -50.000,-67.369 -50.000,-75.303 L -50.000,30.07 C -50.000,49.909 -42.060754,59.829 -26.182,59.829 -21.023,59.829 -12.39,56.455 -0.284,49.709 11.822,42.963 20.648,39.59 26.195,39.59 29.369,40.777 30.362,44.25 29.17479,50.009 27.988,55.768 26.001,62.020829 23.216,68.767 z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PodatusLower: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-4.688-30.28c22.396 0 34.636-.262 36.72-.782 5.728-1.563 8.593-5.21 8.593-10.938H50v97.656c0 2.604-1.302 4.167-3.906 4.688-5.21.52-21.355.78-48.438.78-23.958 0-38.54-.26-43.75-.78-2.604 0-3.906-1.302-3.906-3.906v-82.032c0-3.646 1.302-5.468 3.906-5.468h2.344c2.604.52 15.625.78 39.063.78z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 103.124\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 42\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PodatusUpper: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-46.094-63.78c13.542 0 24.61 2.473 33.203 7.42C-4.298-51.41 0-43.99 0-34.093V62h-9.375c0-10.938-2.604-19.14-7.812-24.61-5.21-5.468-14.844-8.203-28.907-8.202-18.23 0-33.333 4.166-45.312 12.5v-75.782c0-19.79 15.104-29.687 45.312-29.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 91.406,\n\t      height: 125.781\n\t    },\n\t    origin: {\n\t      x: 91.406,\n\t      y: 63.781\n\t    },\n\t    align: \"right\"\n\t  },\n\t  Porrectus1: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M233.594 162.875c-58.855 0-107.032-6.25-144.53-18.75C34.895 125.895-11.46 99.855-50 66V-52.75C-21.354-24.625 26.302 6.885 92.97 41.78 123.697 57.928 163.54 66 212.5 66c21.354 0 34.635-9.896 39.844-29.688V151.94c0 7.29-6.25 10.937-18.75 10.937z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 302.344,\n\t      height: 215.627\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 52.75\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus2: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M309.375 259.375c-50.52 0-110.938-22.396-181.25-67.188C48.437 141.667-10.938 94.272-50 50V-68.75C0-3.125 60.417 52.083 131.25 96.875c58.333 36.98 110.677 58.854 157.03 65.625h7.033c16.145 0 26.822-9.896 32.03-29.688v114.844c0 7.812-5.99 11.72-17.968 11.72z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 377.343,\n\t      height: 328.126\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 68.75\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus3: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M309.375 355.78c-48.96-16.666-109.115-55.468-180.47-116.405C79.428 198.23 19.793 134.687-50 48.75V-70C20 40 94.104 103.79 135.25 148.063 190 200 230 230 288.28 258.906c4.168 2.083 8.334 3.125 12.5 3.125 12.5 0 21.355-10.937 26.564-32.81v114.06c0 9.376-3.386 14.063-10.156 14.064-2.084 0-4.688-.522-7.813-1.563z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 377.344,\n\t      height: 427.345\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 70\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus4: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M350 453.438c-52.754-22.397-120-77.345-201.74-164.844C90.87 227.656 24.784 147.708-50 48.75V-70C-8.84-1.25 58.406 86.51 151.74 193.28c60.868 69.793 119.13 124.22 174.782 163.282 5.797 3.646 11.014 5.47 15.652 5.47 12.173 0 21.45-11.72 27.826-35.157V441.72c0 9.373-3.19 14.06-9.565 14.06-2.9 0-6.377-.78-10.435-2.342z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 420,\n\t      height: 525.78\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 70\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumCavum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n\t    }, {\n\t      type: \"negative\",\n\t      data: \"M.08-42.56c9.585.206 20.126.53 27.954 6.822 4.96 3.9 4.71 10.792 4.574 16.482v51.278C22.09 27.066 7.283 26.072.168 26.01c-7.72.23-21.895.935-32.616 4.674.04-19.197-.083-38.395.064-57.59.567-7.5 7.834-12.33 14.62-13.774 5.818-1.498 11.857-1.86 17.844-1.88z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-36.5436c19.999799999999997 0 30 5.781 30 17.3436v56.717999999999996C23.437199999999997 30.956999999999997 13.4376 27.6756 0 27.6756s-23.4378 3.2819999999999996-30 9.843599999999999V-19.2c0-11.562 10.000200000000001-17.3436 30-17.3436z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 152.344\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 88.344\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.562\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumInclinatum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-75.78L50 0 0 75-50 0 0-75.78z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 150.78\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.78\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumInclinatumLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M 0,-53.164 35,-0.117 0,52.383 -35,-0.117 0,-53.164 z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 105.546\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 53.164\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Quilisma: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 34.938V-51c5.73 20.833 13.02 31.25 21.875 31.25 7.813 0 12.5-15.625 14.063-46.875 3.645 12.5 6.9 21.224 9.765 26.172s6.9 7.422 12.11 7.422c5.208 0 9.374-14.324 12.5-42.97 5.73 22.917 10.677 34.375 14.843 34.375 5.73 0 10.677-15.885 14.844-47.656v100c0 17.707-3.125 26.56-9.375 26.56-4.688 0-9.115-5.988-13.28-17.968-2.085 21.875-8.074 32.813-17.97 32.813-7.813 0-16.146-7.292-25-21.875-4.688 20.312-10.677 30.47-17.97 30.47-5.207 0-9.244-2.605-12.108-7.814C-48.568 47.698-50 41.708-50 34.938z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 150\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 89.282\n\t    },\n\t    align: \"left\"\n\t  },\n\t  TerminatingAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-9.375 40.22c0-11.98-4.948-17.97-14.844-17.97-10.936 0-19.53 3.646-25.78 10.938v-53.126c0-6.77 2.604-12.76 7.813-17.968 5.208-5.21 10.677-8.594 16.406-10.157 2.603-.52 5.207-.78 7.81-.78 3.647 0 7.032.78 10.157 2.343C-2.603-43.896 0-39.73 0-34V73.03h-9.375V40.22z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 49.999,\n\t      height: 121.873\n\t    },\n\t    origin: {\n\t      x: 49.999,\n\t      y: 48.843\n\t    },\n\t    align: \"right\"\n\t  },\n\t  TerminatingDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-9.375-48.156V-80.97H0V26.845c0 5.73-2.604 9.896-7.813 12.5-3.125 1.562-6.51 2.343-10.156 2.343-2.603 0-5.207-.26-7.81-.78-5.73-1.563-11.2-4.95-16.407-10.157C-47.398 25.542-50 19.292-50 12v-52.344c6.25 7.292 14.844 10.938 25.78 10.938 9.897 0 14.845-6.25 14.845-18.75z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 50,\n\t      height: 122.658\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 80.97\n\t    },\n\t    align: \"right\"\n\t  },\n\t  VerticalEpisemaAbove: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-8-4c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 16,\n\t      height: 60\n\t    },\n\t    origin: {\n\t      x: 8,\n\t      y: 60\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VerticalEpisemaBelow: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-8 56c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 16,\n\t      height: 60\n\t    },\n\t    origin: {\n\t      x: 8,\n\t      y: 0\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VirgaLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50-38v285.156c0 6.77-2.344 10.937-7.03 12.5-1.564 0-2.605-.78-3.126-2.344-.52-1.562-.782-10.156-.782-25.78V54.186C29.168 45.334 16.146 40.907 0 40.907c-22.917 0-39.583 5.208-50 15.624V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 326.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 66.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VirgaShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50-38v211.72c0 7.29-2.344 11.457-7.03 12.5-1.564 0-2.606-.783-3.126-2.345-.52-1.563-.782-10.156-.782-25.78V54.187C29.167 45.332 16.146 40.906 0 40.906c-22.917 0-39.583 5.21-50 15.625V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 253.126\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 66.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Virgula: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M8.178-55.66c0-22.137 12.092-33.2 36.287-33.2 11.835 0 23.53 5.66 35.108 16.98C91.15-60.547 96.94-41.766 96.94-15.534c0 53.515-31.646 87.487-94.937 101.895-2.048-2.06-3.077-5.146-3.077-9.273 0-1.03.247-1.8.76-2.316 42.71-19.027 64.075-41.678 64.075-67.92 0-11.322-2.325-20.326-6.945-27.016-4.62-6.69-9.52-11.052-14.676-13.11-5.147-2.048-11.836-3.85-20.07-5.403C12.81-39.707 8.18-45.37 8.18-55.66z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 98.014,\n\t      height: 175.221\n\t    },\n\t    origin: {\n\t      x: 1.074,\n\t      y: 88.86\n\t    },\n\t    align: \"left\"\n\t  }\n\t};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantNotationElement = exports.Annotations = exports.Annotation = exports.TextLeftRight = exports.Subtitle = exports.Title = exports.Supertitle = exports.TitleTextElement = exports.DropCap = exports.TranslationText = exports.AboveLinesText = exports.ChoralSign = exports.Lyric = exports.LyricArray = exports.LyricType = exports.TextElement = exports.TextSpan = exports.CurlyBraceVisualizer = exports.RoundBraceVisualizer = exports.GlyphVisualizer = exports.LineaVisualizer = exports.VirgaLineVisualizer = exports.NeumeLineVisualizer = exports.DividerLineVisualizer = exports.ChantLayoutElement = exports.ChantContext = exports.TextMeasuringStrategy = exports.QuickSvg = exports.GlyphCode = exports.DefaultTrailingSpace = exports.TextTypesByClass = exports.TextTypes = exports.MarkingPositionHint = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tvar _ExsurgeText = __webpack_require__(2);\n\t\n\tvar _addAccent = __webpack_require__(5);\n\t\n\tvar _makeLigature = __webpack_require__(6);\n\t\n\tvar _greextraGlyphs = __webpack_require__(7);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction getFontFilenameForProperties() {\n\t  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"{}\";\n\t\n\t  var italic = properties[\"font-style\"] === \"italic\" ? \"Italic\" : \"\",\n\t      bold = properties[\"font-weight\"] === \"bold\" ? \"Bold\" : \"\";\n\t  return url.replace(\"{}\", \"\" + (italic || bold ? \"\" + bold + italic : \"Regular\"));\n\t}\n\t\n\t// load in the web font for special chant characters here:\n\t// var __exsurgeCharactersFont = require(\"url?limit=30000!../assets/fonts/ExsurgeChar.otf\")\n\t\n\tvar canAccessDOM = typeof document !== \"undefined\";\n\t\n\tvar __getNeumeFromSvgElem = function __getNeumeFromSvgElem(score, elem) {\n\t  var note = score.notes[elem.parentElement.querySelector(\"[element-index]\").getAttribute(\"element-index\")];\n\t  return note.neume || note;\n\t};\n\t\n\t// for positioning markings on notes\n\tvar MarkingPositionHint = exports.MarkingPositionHint = {\n\t  Default: 0,\n\t  Above: 1,\n\t  Below: 2\n\t};\n\t\n\t/**\n\t * List of types of text and their defaults relative to lyrics\n\t * @type Array\n\t */\n\tvar TextTypes = exports.TextTypes = {\n\t  supertitle: {\n\t    display: \"Supertitle\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 7 / 6;\n\t    }, // 14pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasSupertitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.supertitle;\n\t    }\n\t  },\n\t  title: {\n\t    display: \"Title\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 3 / 2;\n\t    }, // 18pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasTitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.title;\n\t    }\n\t  },\n\t  subtitle: {\n\t    display: \"Subtitle\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size;\n\t    }, // 12pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasSubtitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.subtitle;\n\t    }\n\t  },\n\t  leftRight: {\n\t    display: \"Left / Right Text\",\n\t    cssClass: \"textLeftRight\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.9;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasTextLeft() || score.titles.hasTextRight();\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.titles[elem.extraClass];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return score.titles[elem.classList.contains(\"textRight\") ? \"textRight\" : \"textLeft\"];\n\t    }\n\t  },\n\t  annotation: {\n\t    display: \"Annotation\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 2 / 3;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return !!score.annotation && (!score.mergeAnnotationWithTextLeft || score.dropCap);\n\t    },\n\t    getFromScore: function getFromScore(score, _ref) {\n\t      var _ref$elementIndex = _ref.elementIndex,\n\t          elementIndex = _ref$elementIndex === undefined ? 0 : _ref$elementIndex;\n\t      return score.annotation && (score.annotation.annotations ? score.annotation.annotations[elementIndex] : score.annotation);\n\t    }\n\t  },\n\t  dropCap: {\n\t    display: \"Drop Cap\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 4;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return !!score.dropCap;\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.dropCap;\n\t    }\n\t  },\n\t  al: {\n\t    display: \"Above Staff\",\n\t    cssClass: \"aboveLinesText\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasAboveLinesText;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].alText[elem.alIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).alText[elem.getAttribute(\"al-index\") || 0];\n\t    }\n\t  },\n\t  choralSign: {\n\t    display: \"Choral Sign\",\n\t    size: function size(ctxt) {\n\t      return ctxt.staffInterval * 1.5;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return false;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notes[elem.note.elementIndex].choralSign;\n\t    }\n\t  },\n\t  lyric: {\n\t    display: \"Lyric\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.9;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasLyrics;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].lyrics[elem.lyricIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).lyrics[elem.getAttribute(\"lyric-index\") || 0];\n\t    }\n\t  },\n\t  translation: {\n\t    display: \"Translation\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.75;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasTranslations;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].translationText[elem.translationIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).translationText[elem.getAttribute(\"translation-index\") || 0];\n\t    }\n\t  }\n\t};\n\tvar TextTypesByClass = exports.TextTypesByClass = {};\n\tObject.entries(TextTypes).forEach(function (_ref2) {\n\t  var _ref3 = _slicedToArray(_ref2, 2),\n\t      key = _ref3[0],\n\t      entry = _ref3[1];\n\t\n\t  var cssClass = entry.cssClass = entry.cssClass || key;\n\t  entry.key = key;\n\t  TextTypesByClass[cssClass] = entry;\n\t});\n\t\n\tvar DefaultTrailingSpace = exports.DefaultTrailingSpace = function DefaultTrailingSpace(ctxt) {\n\t  return ctxt.intraNeumeSpacing * ctxt.interSyllabicMultiplier;\n\t};\n\tDefaultTrailingSpace.isDefault = true;\n\t\n\tvar GlyphCode = exports.GlyphCode = {\n\t  None: \"None\",\n\t\n\t  AcuteAccent: \"AcuteAccent\",\n\t  GraveAccent: \"GraveAccent\",\n\t  Circle: \"Circle\",\n\t  Semicircle: \"Semicircle\",\n\t  ReversedSemicircle: \"ReversedSemicircle\",\n\t  Stropha: \"Stropha\",\n\t  StrophaLiquescent: \"StrophaLiquescent\",\n\t\n\t  BeginningAscLiquescent: \"BeginningAscLiquescent\",\n\t  BeginningDesLiquescent: \"BeginningDesLiquescent\",\n\t\n\t  CustosDescLong: \"CustosDescLong\",\n\t  CustosDescShort: \"CustosDescShort\",\n\t  CustosLong: \"CustosLong\",\n\t  CustosShort: \"CustosShort\",\n\t\n\t  // clefs and other markings\n\t  DoClef: \"DoClef\",\n\t  FaClef: \"FaClef\",\n\t  Flat: \"Flat\",\n\t  Mora: \"Mora\",\n\t  Natural: \"Natural\",\n\t  OriscusAsc: \"OriscusAsc\",\n\t  OriscusDes: \"OriscusDes\",\n\t  OriscusLiquescent: \"OriscusLiquescent\",\n\t\n\t  PodatusLower: \"PodatusLower\",\n\t  PodatusUpper: \"PodatusUpper\",\n\t\n\t  Porrectus1: \"Porrectus1\", // 1 staff line difference,\n\t  Porrectus2: \"Porrectus2\", // 2 lines difference, etc...\n\t  Porrectus3: \"Porrectus3\",\n\t  Porrectus4: \"Porrectus4\",\n\t\n\t  PunctumCavum: \"PunctumCavum\",\n\t  PunctumQuadratum: \"PunctumQuadratum\",\n\t  PunctumQuadratumLiquescent: \"PunctumQuadratumLiquescent\",\n\t  PunctumQuadratumAscLiquescent: \"PunctumQuadratumAscLiquescent\",\n\t  PunctumQuadratumDesLiquescent: \"PunctumQuadratumDesLiquescent\",\n\t  PunctumInclinatum: \"PunctumInclinatum\",\n\t  PunctumInclinatumLiquescent: \"PunctumInclinatumLiquescent\",\n\t  Quilisma: \"Quilisma\",\n\t\n\t  Sharp: \"Sharp\",\n\t  TerminatingAscLiquescent: \"TerminatingAscLiquescent\",\n\t  TerminatingDesLiquescent: \"TerminatingDesLiquescent\",\n\t  VerticalEpisemaAbove: \"VerticalEpisemaAbove\",\n\t  VerticalEpisemaBelow: \"VerticalEpisemaBelow\",\n\t  VirgaLong: \"VirgaLong\",\n\t  VirgaShort: \"VirgaShort\",\n\t  Virgula: \"Virgula\",\n\t\n\t  UpperBrace: \"UpperBrace\"\n\t}; // GlyphCode\n\t\n\tvar QuickSvg = exports.QuickSvg = {\n\t  // namespaces\n\t  ns: \"http://www.w3.org/2000/svg\",\n\t  xmlns: \"http://www.w3.org/2000/xmlns/\",\n\t  xlink: \"http://www.w3.org/1999/xlink\",\n\t\n\t  hasDOMAccess: function hasDOMAccess() {\n\t    return canAccessDOM;\n\t  },\n\t\n\t  // create the root level svg object\n\t  svg: function svg(width, height) {\n\t    var node = document.createElementNS(this.ns, \"svg\");\n\t\n\t    node.setAttribute(\"xmlns\", this.ns);\n\t    node.setAttribute(\"version\", \"1.1\");\n\t    node.setAttributeNS(this.xmlns, \"xmlns:xlink\", this.xlink);\n\t\n\t    node.setAttribute(\"width\", width);\n\t    node.setAttribute(\"height\", height);\n\t\n\t    // create the defs element\n\t    var defs = document.createElementNS(this.ns, \"defs\");\n\t    node.appendChild(defs);\n\t\n\t    node.defs = defs;\n\t\n\t    node.clearNotations = function () {\n\t      // clear out all children except defs\n\t      node.removeChild(defs);\n\t\n\t      while (node.hasChildNodes()) {\n\t        node.removeChild(node.lastChild);\n\t      }node.appendChild(defs);\n\t    };\n\t\n\t    return node;\n\t  },\n\t\n\t  rect: function rect(width, height) {\n\t    var node = document.createElementNS(this.ns, \"rect\");\n\t\n\t    node.setAttribute(\"width\", width);\n\t    node.setAttribute(\"height\", height);\n\t\n\t    return node;\n\t  },\n\t\n\t  line: function line(x1, y1, x2, y2) {\n\t    var node = document.createElementNS(this.ns, \"line\");\n\t\n\t    node.setAttribute(\"x1\", x1);\n\t    node.setAttribute(\"y1\", y1);\n\t    node.setAttribute(\"x2\", x2);\n\t    node.setAttribute(\"y2\", y2);\n\t\n\t    return node;\n\t  },\n\t\n\t  g: function g() {\n\t    var node = document.createElementNS(this.ns, \"g\");\n\t\n\t    return node;\n\t  },\n\t\n\t  text: function text() {\n\t    var node = document.createElementNS(this.ns, \"text\");\n\t\n\t    return node;\n\t  },\n\t\n\t  tspan: function tspan(str) {\n\t    var node = document.createElementNS(this.ns, \"tspan\");\n\t    node.textContent = str;\n\t\n\t    return node;\n\t  },\n\t\n\t  // nodeRef should be the id of the object in defs (without the #)\n\t  use: function use(nodeRef) {\n\t    var node = document.createElementNS(this.ns, \"use\");\n\t    node.setAttributeNS(this.xlink, \"xlink:href\", \"#\" + nodeRef);\n\t\n\t    return node;\n\t  },\n\t\n\t  svgFragmentForGlyph: function svgFragmentForGlyph(glyph) {\n\t    var svgSrc = \"\";\n\t    for (var i = 0; i < glyph.paths.length; ++i) {\n\t      var path = glyph.paths[i];\n\t      svgSrc += QuickSvg.createFragment(path.data ? \"path\" : \"g\", {\n\t        d: path.data || undefined,\n\t        fill: path.type === \"negative\" ? \"#fff\" : undefined\n\t      });\n\t    }\n\t    return svgSrc;\n\t  },\n\t\n\t  nodesForGlyph: function nodesForGlyph(glyph) {\n\t    var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createNode\";\n\t\n\t    var nodes = [];\n\t    for (var i = 0; i < glyph.paths.length; ++i) {\n\t      var path = glyph.paths[i];\n\t      var props = {};\n\t      if (path.data) props.d = path.data;\n\t      if (path.type === \"negative\") props.fill = \"#fff\";\n\t      nodes.push(QuickSvg[functionName](path.data ? \"path\" : \"g\", props));\n\t    }\n\t    return nodes;\n\t  },\n\t\n\t  createNode: function createNode(name, attributes, children) {\n\t    var node = document.createElementNS(this.ns, name);\n\t    if (attributes && attributes.source) {\n\t      node.source = attributes.source;\n\t      delete attributes.source;\n\t    }\n\t    for (var attr in attributes) {\n\t      if (attributes.hasOwnProperty(attr) && typeof attributes[attr] !== \"undefined\") {\n\t        var val = attributes[attr];\n\t        var match = attr.match(/^([^:]+):([^:]+)$/);\n\t        if (match) {\n\t          node.setAttributeNS(this[match[1]], match[2], val);\n\t        } else {\n\t          node.setAttribute(attr, val);\n\t        }\n\t      }\n\t    }\n\t    if (children) {\n\t      if (typeof children === \"string\") {\n\t        node.textContent = children;\n\t      } else if (children.constructor === [].constructor) {\n\t        for (var i = 0; i < children.length; ++i) {\n\t          node.appendChild(children[i]);\n\t        }\n\t      } else {\n\t        node.appendChild(children);\n\t      }\n\t    }\n\t    return node;\n\t  },\n\t\n\t  createSvgTree: function createSvgTree(name, props) {\n\t    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      children[_key - 2] = arguments[_key];\n\t    }\n\t\n\t    if (\"class\" in props) {\n\t      props.className = props.class;\n\t      delete props.class;\n\t    }\n\t    if (children.length === 1 && children[0] instanceof Array) {\n\t      children = children[0];\n\t    }\n\t    var convertKeysToCamelCase = function convertKeysToCamelCase(obj) {\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = Object.keys(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var key = _step.value;\n\t\n\t          if (/[-:][a-z]/.test(key)) {\n\t            if (/^\\w+-index$/.test(key)) continue;\n\t            var camelCase = key.replace(/[-:]([a-z])/g, function (whole, letter) {\n\t              return letter.toUpperCase();\n\t            });\n\t            obj[camelCase] = obj[key];\n\t            delete obj[key];\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t    };\n\t    convertKeysToCamelCase(props);\n\t    if (props.style) convertKeysToCamelCase(props.style);\n\t    var source = props.source;\n\t    if (source && source.sourceGabc) {\n\t      props[\"source-gabc\"] = source.sourceGabc;\n\t    }\n\t    return { name: name, props: props, children: children };\n\t  },\n\t\n\t\n\t  createFragment: function createFragment(name, attributes, child) {\n\t    if (child === undefined || child === null) child = \"\";\n\t\n\t    var fragment = \"<\" + name + \" \";\n\t\n\t    for (var attr in attributes) {\n\t      if (attributes.hasOwnProperty(attr) && typeof attributes[attr] !== \"undefined\") fragment += attr + '=\"' + attributes[attr] + '\" ';\n\t    }\n\t\n\t    fragment += \">\" + child + \"</\" + name + \">\";\n\t\n\t    return fragment;\n\t  },\n\t\n\t  parseFragment: function parseFragment(fragment) {\n\t    // create temporary holder\n\t    var well = document.createElement(\"svg\");\n\t\n\t    // act as a setter if svg is given\n\t    if (fragment) {\n\t      var container = this.g();\n\t\n\t      // dump raw svg\n\t      // do this to allow the browser to automatically create svg nodes?\n\t      well.innerHTML = \"<svg>\" + fragment.replace(/\\n/, \"\").replace(/<(\\w+)([^<]+?)\\/>/g, \"<$1$2></$1>\") + \"</svg>\";\n\t\n\t      // transplant nodes\n\t      for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n\t        container.appendChild(well.firstChild.firstChild);\n\t      }return container;\n\t    }\n\t  },\n\t\n\t  translate: function translate(node, x, y) {\n\t    node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n\t    return node;\n\t  },\n\t\n\t  scale: function scale(node, sx, sy) {\n\t    node.setAttribute(\"transform\", \"scale(\" + sx + \",\" + sy + \")\");\n\t    return node;\n\t  }\n\t};\n\t\n\tvar TextMeasuringStrategy = exports.TextMeasuringStrategy = {\n\t  // shapes\n\t  Svg: 0,\n\t  Canvas: 1,\n\t  OpenTypeJS: 2\n\t};\n\t\n\t/*\n\t * ChantContext\n\t */\n\t\n\tvar ChantContext = exports.ChantContext = function () {\n\t  function ChantContext() {\n\t    var _this = this;\n\t\n\t    var textMeasuringStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : QuickSvg.hasDOMAccess() ? TextMeasuringStrategy.Canvas : TextMeasuringStrategy.OpenTypeJS;\n\t\n\t    _classCallCheck(this, ChantContext);\n\t\n\t    this.textMeasuringStrategy = textMeasuringStrategy;\n\t    this.defs = {};\n\t    this.makeDefs = [];\n\t    if (QuickSvg.hasDOMAccess()) {\n\t      this.defsNode = QuickSvg.createNode(\"defs\");\n\t    }\n\t\n\t    // font styles\n\t    this.textStyles = {};\n\t    this.textColor = \"#000\";\n\t    this.setFont(\"'Palatino Linotype', 'Book Antiqua', Palatino, serif\", 16);\n\t\n\t    this.rubricColor = \"#d00\";\n\t    this.specialCharProperties = {\n\t      \"font-family\": \"'Exsurge Characters'\",\n\t      fill: this.rubricColor,\n\t      class: 'rubric'\n\t    };\n\t    this.textBeforeSpecialChar = \"\";\n\t    this.textAfterSpecialChar = \".\";\n\t    this.specialCharMap = {\n\t      \"℣\": 'v',\n\t      \"℟\": 'r',\n\t      \"+\": \"+\",\n\t      \"*\": \"*\"\n\t    };\n\t    this.plusProperties = {};\n\t    this.asteriskProperties = {};\n\t    this.specialCharText = function (char) {\n\t      return _this.specialCharMap[char] || char;\n\t    };\n\t\n\t    this.fontStyleDictionary = {\n\t      b: { \"font-weight\": \"bold\" },\n\t      i: { \"font-style\": \"italic\" },\n\t      u: { \"text-decoration\": \"underline\" },\n\t      ul: { \"text-decoration\": \"underline\" },\n\t      c: { fill: this.rubricColor, class: 'rubric' },\n\t      sc: {\n\t        \"font-variant\": \"small-caps\",\n\t        \"font-variant-caps\": \"small-caps\",\n\t        \"font-feature-settings\": \"'smcp'\",\n\t        \"-webkit-font-feature-settings\": \"'smcp'\"\n\t      },\n\t      v: {}\n\t    };\n\t\n\t    this.markupSymbolDictionary = {\n\t      \"*\": \"b\",\n\t      \"_\": \"i\",\n\t      \"^\": \"c\",\n\t      \"%\": \"sc\"\n\t    };\n\t\n\t    this.textStyles.al.prefix = \"<i>\";\n\t\n\t    this.textStyles.translation.prefix = \"<i>\";\n\t\n\t    this.textStyles.dropCap.padding = 1; // minimum padding on either side of drop cap in staffIntervals\n\t\n\t    this.textStyles.annotation.padding = 1; // minimum padding on either side of annotation in staffIntervals\n\t\n\t    this.minLedgerSeparation = 2; // multiple of staffInterval\n\t    this.minSpaceAboveStaff = 2; // multiple of staffInterval\n\t    this.minSpaceBelowStaff = 1; // multiple of staffInterval\n\t    this.spaceBetweenSystems = 1.5; // multiple of staffInterval\n\t\n\t    // everything depends on the scale of the punctum\n\t    this.glyphPunctumWidth = _ExsurgeGlyphs.Glyphs.PunctumQuadratum.bounds.width;\n\t    this.glyphPunctumHeight = _ExsurgeGlyphs.Glyphs.PunctumQuadratum.bounds.height;\n\t\n\t    // max space to add between notations when justifying, in multiples of this.staffInterval\n\t    this.maxExtraSpaceInStaffIntervals = 0.5;\n\t\n\t    // for keeping track of the clef\n\t    this.activeClef = null;\n\t\n\t    this.neumeLineColor = \"#000\";\n\t    this.staffLineColor = \"#000\";\n\t    this.dividerLineColor = \"#000\";\n\t\n\t    this.defaultLanguage = _ExsurgeText.language.latin;\n\t\n\t    // calculate the pixel ratio for drawing to a canvas\n\t    this.pixelRatio = window.devicePixelRatio || 1.0;\n\t\n\t    //this.canvasCtxt.scale(this.pixelRatio, this.pixelRatio);\n\t\n\t    if (textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t      this.svgTextMeasurer = QuickSvg.svg(0, 0);\n\t      this.svgTextMeasurer.setAttribute(\"id\", \"TextMeasurer\");\n\t      this.svgTextMeasurer.setAttribute(\"style\", \"position:absolute\");\n\t      document.body.insertBefore(this.svgTextMeasurer, document.body.firstChild);\n\t    } else if (textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n\t      this.makeCanvasIfNeeded();\n\t    }\n\t\n\t    // for connecting neume syllables...\n\t    this.syllableConnector = \"-\";\n\t\n\t    // set whether to scale the def tags (scaleDefs = true) or the use tags.\n\t    this.scaleDefs = true;\n\t\n\t    // fixme: for now, we just set these using the glyph scales as noted above, presuming a\n\t    // staff line size of 0.5 in. Really what we should do is scale the punctum size based\n\t    // on the text metrics, right? 1 punctum ~ x height size?\n\t    this.setGlyphScaling(1.0 / 16.0);\n\t\n\t    // minimum space between puncta of different syllables, in multiples of this.intraNeumeSpacing\n\t    this.interSyllabicMultiplier = 2.5;\n\t\n\t    // space between an accidental and the following note, in multiples of this.intraNeumeSpacing\n\t    this.accidentalSpaceMultiplier = 2;\n\t\n\t    // space added between puncta of different words, in multiples of this.intraNeumeSpacing\n\t    this.interVerbalMultiplier = 1;\n\t\n\t    this.drawGuides = false;\n\t    this.drawDebuggingBounds = true;\n\t\n\t    // we keep track of where we are in processing notations, so that\n\t    // we can maintain the context for notations to know about.\n\t    //\n\t    // these are only gauranteed to be valid during the performLayout phase!\n\t    this.activeNotations = null;\n\t    this.currNotationIndex = -1;\n\t\n\t    this.minSyllablesLastLine = 0;\n\t    this.minNotesLastLine = 0;\n\t\n\t    // chant notation elements are normally separated by a minimum fixed amount of space\n\t    // on the staff line. It can happen, however, that two text elements are almost close\n\t    // enough to merge, only to be separated much more by the required hyphen (or other\n\t    // connecting string).\n\t    //\n\t    // This tolerance value allows a little bit of flexibility to merge two close lyrical\n\t    // elements, thus bringing the chant notation elements a bit closer than otherwise\n\t    // would be normally allowed.\n\t    //\n\t    // condensing tolerance is a percentage value (0.0-1.0, inclusive) that indicates\n\t    // how much the default spacing can shrink. E.g., a value of 0.20 allows the layout\n\t    // engine to separate two glyphs by only 80% of the normal inter-neume spacing value.\n\t    this.condensingTolerance = 0.3;\n\t\n\t    // if auto color is true, then exsurge tries to automatically colorize\n\t    // some elements of the chant (directives become rubric color, etc.)\n\t    this.autoColor = true;\n\t\n\t    this.useExtraTextOnly = true;\n\t\n\t    this.noteIdPrefix = 'note-';\n\t\n\t    this.insertFontsInDoc();\n\t  }\n\t\n\t  _createClass(ChantContext, [{\n\t    key: \"getFontForProperties\",\n\t    value: function getFontForProperties() {\n\t      var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t      var fontFamily = arguments[1];\n\t\n\t      var key = getFontFilenameForProperties(properties),\n\t          keyWithFontFamily = getFontFilenameForProperties(properties, fontFamily);\n\t      return this.fontDictionary && (this.fontDictionary[keyWithFontFamily] || this.fontDictionary[fontFamily] || this.fontDictionary.Regular);\n\t    }\n\t  }, {\n\t    key: \"setFont\",\n\t    value: function setFont(font) {\n\t      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n\t      var baseStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t      var opentypeFontDictionary = arguments[3];\n\t      var _iteratorNormalCompletion2 = true;\n\t      var _didIteratorError2 = false;\n\t      var _iteratorError2 = undefined;\n\t\n\t      try {\n\t        for (var _iterator2 = Object.entries(TextTypes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t          var _step2$value = _slicedToArray(_step2.value, 2),\n\t              key = _step2$value[0],\n\t              textType = _step2$value[1];\n\t\n\t          var textStyle = this.textStyles[key] = this.textStyles[key] || {};\n\t          textStyle.size = textType.defaultSize ? textType.defaultSize(size, this) : textType.size(this);\n\t          textStyle.font = font;\n\t          textStyle.color = this.textColor || \"#000\";\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError2 = true;\n\t        _iteratorError2 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t            _iterator2.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError2) {\n\t            throw _iteratorError2;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.baseTextStyle = baseStyle;\n\t\n\t      if (opentypeFontDictionary) {\n\t        this.textMeasuringStrategy = TextMeasuringStrategy.OpenTypeJS;\n\t        this.fontDictionary = opentypeFontDictionary;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setRubricColor\",\n\t    value: function setRubricColor(color) {\n\t      this.rubricColor = color;\n\t      this.specialCharProperties.fill = color;\n\t      this.fontStyleDictionary.c.fill = color;\n\t    }\n\t  }, {\n\t    key: \"setScaleDefs\",\n\t    value: function setScaleDefs(scaleDefs) {\n\t      scaleDefs = !!scaleDefs;\n\t      if (this.scaleDefs !== scaleDefs) {\n\t        this.scaleDefs = scaleDefs;\n\t        this.setGlyphScaling(this.glyphScaling);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"createStyleCss\",\n\t    value: function createStyleCss() {\n\t      var style = \"\";\n\t      var _iteratorNormalCompletion3 = true;\n\t      var _didIteratorError3 = false;\n\t      var _iteratorError3 = undefined;\n\t\n\t      try {\n\t        for (var _iterator3 = Object.entries(TextTypes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t          var _step3$value = _slicedToArray(_step3.value, 2),\n\t              key = _step3$value[0],\n\t              textType = _step3$value[1];\n\t\n\t          var cssClass = textType.cssClass,\n\t              _textStyles$key = this.textStyles[key],\n\t              color = _textStyles$key.color,\n\t              font = _textStyles$key.font,\n\t              size = _textStyles$key.size;\n\t\n\t          style += \"svg.Exsurge .\" + cssClass + \"{fill:\" + color + \";font-family:\" + font + \";font-size:\" + size + \"px;font-kerning:normal}\";\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError3 = true;\n\t        _iteratorError3 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t            _iterator3.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError3) {\n\t            throw _iteratorError3;\n\t          }\n\t        }\n\t      }\n\t\n\t      return style;\n\t    }\n\t  }, {\n\t    key: \"createStyleNode\",\n\t    value: function createStyleNode() {\n\t      var node = QuickSvg.createNode(\"style\", {});\n\t      node.textContent = this.createStyleCss();\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createStyleTree\",\n\t    value: function createStyleTree() {\n\t      return { name: \"style\", props: {}, children: [this.createStyleCss()] };\n\t    }\n\t  }, {\n\t    key: \"createStyle\",\n\t    value: function createStyle() {\n\t      return \"<style>\" + this.createStyleCss() + \"</style>\";\n\t    }\n\t  }, {\n\t    key: \"updateHyphenWidth\",\n\t    value: function updateHyphenWidth() {\n\t      // measure the size of a hyphen for the lyrics\n\t      var hyphen = new Lyric(this, this.syllableConnector, LyricType.SingleSyllable);\n\t      var multiplier = this.minLyricWordSpacing / (this.hyphenWidth || this.minLyricWordSpacing) || 1;\n\t      this.hyphenWidth = hyphen.bounds.width;\n\t\n\t      this.minLyricWordSpacing = multiplier * this.hyphenWidth;\n\t    }\n\t  }, {\n\t    key: \"setStaffHeight\",\n\t    value: function setStaffHeight(staffHeight) {\n\t      this.setGlyphScaling(staffHeight / 600);\n\t    }\n\t  }, {\n\t    key: \"setGlyphScaling\",\n\t    value: function setGlyphScaling(glyphScaling) {\n\t      this.glyphScaling = glyphScaling;\n\t\n\t      this.staffInterval = this.glyphPunctumWidth * this.glyphScaling;\n\t\n\t      // setup the line weights for the various elements.\n\t      this.staffLineWeight = Math.ceil(5 * this.staffInterval / 8) / 5;\n\t      this.neumeLineWeight = this.staffLineWeight; // the weight of connecting lines in the glyphs.\n\t      this.dividerLineWeight = this.neumeLineWeight; // of quarter bar, half bar, etc.\n\t      this.episemaLineWeight = this.neumeLineWeight * 1.25; // of horizontal episemata\n\t\n\t      this.intraNeumeSpacing = this.staffInterval / 2.0;\n\t\n\t      while (this.defsNode && this.defsNode.firstChild) {\n\t        this.defsNode.removeChild(this.defsNode.firstChild);\n\t      }for (var i = 0; i < this.makeDefs.length; ++i) {\n\t        this.makeDefs[i]();\n\t      }\n\t\n\t      this.updateHyphenWidth();\n\t    }\n\t  }, {\n\t    key: \"calculateHeightFromStaffPosition\",\n\t    value: function calculateHeightFromStaffPosition(staffPosition) {\n\t      return -staffPosition * this.staffInterval;\n\t    }\n\t  }, {\n\t    key: \"insertFontsInDoc\",\n\t    value: function insertFontsInDoc() {\n\t      if (!canAccessDOM) return;\n\t\n\t      var styleElement = document.getElementById(\"exsurge-fonts\");\n\t\n\t      if (styleElement === null) {\n\t        // create it since it doesn't exist yet.\n\t        styleElement = document.createElement(\"style\");\n\t        styleElement.id = \"exsurge-fonts\";\n\t\n\t        // styleElement.appendChild(document.createTextNode(\"@font-face{font-family: 'Exsurge Characters';font-weight: normal;font-style: normal;src: url(\" + __exsurgeCharactersFont + \") format('opentype');}\"));\n\t\n\t        document.head.appendChild(styleElement);\n\t      }\n\t    }\n\t\n\t    // returns the next neume starting at this.currNotationIndex, or null\n\t    // if there isn't a neume after this one...\n\t\n\t  }, {\n\t    key: \"findNextNeume\",\n\t    value: function findNextNeume() {\n\t      if (typeof this.currNotationIndex === \"undefined\") throw \"findNextNeume() called without a valid currNotationIndex set\";\n\t\n\t      for (var i = this.currNotationIndex + 1; i < this.notations.length; i++) {\n\t        var notation = this.notations[i];\n\t\n\t        if (notation.isNeume && !notation.hasNoWidth) return notation;\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }, {\n\t    key: \"makeCanvasIfNeeded\",\n\t    value: function makeCanvasIfNeeded() {\n\t      if (!this.canvas) {\n\t        this.canvas = document.createElement(\"canvas\");\n\t        this.canvasCtxt = this.canvas.getContext(\"2d\");\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setCanvasSize\",\n\t    value: function setCanvasSize(width, height) {\n\t      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\t\n\t      this.makeCanvasIfNeeded();\n\t\n\t      this.canvas.style.width = width * scale + \"px\";\n\t      this.canvas.style.height = height * scale + \"px\";\n\t      scale *= this.pixelRatio;\n\t      this.canvas.width = width * scale;\n\t      this.canvas.height = height * scale;\n\t\n\t      this.canvasCtxt.setTransform(scale, 0, 0, scale, 0, 0);\n\t    }\n\t  }]);\n\t\n\t  return ChantContext;\n\t}();\n\t\n\t/*\n\t * ChantLayoutElement\n\t */\n\t\n\t\n\tvar ChantLayoutElement = exports.ChantLayoutElement = function () {\n\t  function ChantLayoutElement() {\n\t    _classCallCheck(this, ChantLayoutElement);\n\t\n\t    this.bounds = new _ExsurgeCore.Rect();\n\t    this.origin = new _ExsurgeCore.Point(0, 0);\n\t\n\t    this.selected = false;\n\t    this.highlighted = false;\n\t  }\n\t\n\t  // draws the element on an html5 canvas\n\t\n\t\n\t  _createClass(ChantLayoutElement, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      throw \"ChantLayout Elements must implement draw(ctxt)\";\n\t    }\n\t\n\t    // returns svg element\n\t\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      throw \"ChantLayout Elements must implement createSvgNode(ctxt)\";\n\t    }\n\t\n\t    // returns svg code for the element, used for printing support\n\t\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      throw \"ChantLayout Elements must implement createSvgFragment(ctxt)\";\n\t    }\n\t  }]);\n\t\n\t  return ChantLayoutElement;\n\t}();\n\t\n\tvar DividerLineVisualizer = exports.DividerLineVisualizer = function (_ChantLayoutElement) {\n\t  _inherits(DividerLineVisualizer, _ChantLayoutElement);\n\t\n\t  function DividerLineVisualizer(ctxt, staffPosition0, staffPosition1, divider) {\n\t    _classCallCheck(this, DividerLineVisualizer);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (DividerLineVisualizer.__proto__ || Object.getPrototypeOf(DividerLineVisualizer)).call(this));\n\t\n\t    _this2.divider = divider;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n\t    var y1 = ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\t\n\t    if (y0 > y1) {\n\t      var temp = y0;\n\t      y0 = y1;\n\t      y1 = temp;\n\t    }\n\t\n\t    _this2.bounds.x = 0;\n\t    _this2.bounds.y = y0;\n\t    _this2.bounds.width = ctxt.dividerLineWeight;\n\t    _this2.bounds.height = y1 - y0;\n\t\n\t    _this2.origin.x = _this2.bounds.width / 2;\n\t    _this2.origin.y = y0;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(DividerLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.dividerLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.dividerLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      var props = {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.dividerLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.dividerLineColor,\n\t        class: \"dividerLine\"\n\t      };\n\t      if (this.divider) {\n\t        if (this.divider.selected) props.class += \" selected\";\n\t        props[\"source-index\"] = this.divider.sourceIndex;\n\t        props[\"element-index\"] = this.divider.elementIndex;\n\t        props.source = this.divider;\n\t      }\n\t      return props;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return DividerLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar NeumeLineVisualizer = exports.NeumeLineVisualizer = function (_ChantLayoutElement2) {\n\t  _inherits(NeumeLineVisualizer, _ChantLayoutElement2);\n\t\n\t  function NeumeLineVisualizer(ctxt, note0, note1, hanging) {\n\t    _classCallCheck(this, NeumeLineVisualizer);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (NeumeLineVisualizer.__proto__ || Object.getPrototypeOf(NeumeLineVisualizer)).call(this));\n\t\n\t    var staffPosition0 = note0.staffPosition;\n\t    var staffPosition1 = note1.staffPosition;\n\t\n\t    // note0 should be the upper one for our calculations here\n\t    if (staffPosition0 < staffPosition1) {\n\t      var temp = staffPosition0;\n\t      staffPosition0 = staffPosition1;\n\t      staffPosition1 = temp;\n\t    }\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n\t    var y1 = 0;\n\t\n\t    if (hanging) {\n\t      // if the difference between the notes is only one, and the upper\n\t      // note is on a line, and the lower note is within the four staff lines,\n\t      // then our hanging line goes past the lower note by a whole\n\t      // staff interval\n\t      if (staffPosition0 - staffPosition1 === 1 && Math.abs(staffPosition0) % 2 === 1 && staffPosition1 > -3) staffPosition1--;\n\t\n\t      y1 += ctxt.glyphPunctumHeight * ctxt.glyphScaling / 2.2;\n\t    }\n\t\n\t    y1 += ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\t\n\t    _this3.bounds.x = 0;\n\t    _this3.bounds.y = y0;\n\t    _this3.bounds.width = ctxt.neumeLineWeight;\n\t    _this3.bounds.height = y1 - y0;\n\t\n\t    _this3.origin.x = 0;\n\t    _this3.origin.y = 0;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(NeumeLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return NeumeLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar VirgaLineVisualizer = exports.VirgaLineVisualizer = function (_ChantLayoutElement3) {\n\t  _inherits(VirgaLineVisualizer, _ChantLayoutElement3);\n\t\n\t  function VirgaLineVisualizer(ctxt, note) {\n\t    _classCallCheck(this, VirgaLineVisualizer);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (VirgaLineVisualizer.__proto__ || Object.getPrototypeOf(VirgaLineVisualizer)).call(this));\n\t\n\t    var staffPosition = note.staffPosition;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition);\n\t    var y1;\n\t\n\t    if (Math.abs(staffPosition % 2) === 0) y1 = y0 + ctxt.staffInterval * 1.8;else y1 = y0 + ctxt.staffInterval * 2.7;\n\t\n\t    _this4.bounds.x = 0;\n\t    _this4.bounds.y = y0;\n\t    _this4.bounds.width = ctxt.neumeLineWeight;\n\t    _this4.bounds.height = y1 - y0;\n\t\n\t    _this4.origin.x = 0;\n\t    _this4.origin.y = 0;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(VirgaLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return VirgaLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar LineaVisualizer = exports.LineaVisualizer = function (_ChantLayoutElement4) {\n\t  _inherits(LineaVisualizer, _ChantLayoutElement4);\n\t\n\t  function LineaVisualizer(ctxt, note) {\n\t    _classCallCheck(this, LineaVisualizer);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (LineaVisualizer.__proto__ || Object.getPrototypeOf(LineaVisualizer)).call(this));\n\t\n\t    var staffPosition = note.staffPosition;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition) - note.origin.y;\n\t    var y1 = y0 + note.bounds.height;\n\t\n\t    _this5.bounds.x = 0;\n\t    _this5.bounds.y = y0;\n\t    _this5.bounds.width = ctxt.neumeLineWeight * 5 + note.bounds.width;\n\t    _this5.bounds.height = y1 - y0;\n\t\n\t    _this5.origin.x = ctxt.neumeLineWeight * 2.5;\n\t    _this5.origin.y = 0;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(LineaVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t      canvasCtxt.fillRect(this.bounds.x + this.bounds.width - ctxt.neumeLineWeight, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt, x) {\n\t      return {\n\t        x: x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var _this6 = this;\n\t\n\t      return QuickSvg.createNode(\"g\", null, [this.bounds.x, this.bounds.x + this.bounds.width - ctxt.neumeLineWeight].map(function (x) {\n\t        return QuickSvg.createNode(\"rect\", _this6.getSvgProps(ctxt, x));\n\t      }));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var _this7 = this;\n\t\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", {}].concat(_toConsumableArray([this.bounds.x, this.bounds.x + this.bounds.width - ctxt.neumeLineWeight].map(function (x) {\n\t        return QuickSvg.createSvgTree(\"rect\", _this7.getSvgProps(ctxt, x));\n\t      }))));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var _this8 = this;\n\t\n\t      return QuickSvg.createFragment(\"g\", null, [this.bounds.x, this.bounds.x + this.bounds.width - ctxt.neumeLineWeight].map(function (x) {\n\t        return QuickSvg.createFragment(\"rect\", _this8.getSvgProps(ctxt, x));\n\t      }).join(''));\n\t    }\n\t  }]);\n\t\n\t  return LineaVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar GlyphVisualizer = exports.GlyphVisualizer = function (_ChantLayoutElement5) {\n\t  _inherits(GlyphVisualizer, _ChantLayoutElement5);\n\t\n\t  function GlyphVisualizer(ctxt, glyphCode) {\n\t    _classCallCheck(this, GlyphVisualizer);\n\t\n\t    var _this9 = _possibleConstructorReturn(this, (GlyphVisualizer.__proto__ || Object.getPrototypeOf(GlyphVisualizer)).call(this));\n\t\n\t    _this9.glyph = null;\n\t\n\t    _this9.setGlyph(ctxt, glyphCode);\n\t    return _this9;\n\t  }\n\t\n\t  _createClass(GlyphVisualizer, [{\n\t    key: \"setGlyph\",\n\t    value: function setGlyph(ctxt, glyphCode) {\n\t      if (this.glyphCode !== glyphCode) {\n\t        if (typeof glyphCode === \"undefined\" || glyphCode === null || glyphCode === \"\") glyphCode = this.glyphCode = GlyphCode.None;else this.glyphCode = glyphCode;\n\t\n\t        var glyph = this.glyph = _ExsurgeGlyphs.Glyphs[glyphCode];\n\t\n\t        // if this glyph hasn't been used yet, then load it up in the defs section for sharing\n\t        if (!ctxt.defs.hasOwnProperty(glyphCode)) {\n\t          var getDefProps = function getDefProps() {\n\t            var options = {\n\t              id: glyphCode,\n\t              class: \"glyph\"\n\t            };\n\t            if (ctxt.scaleDefs === true) {\n\t              options.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n\t            }\n\t            return options;\n\t          };\n\t          var makeDef = function makeDef() {\n\t            var options = getDefProps();\n\t            // create the ref\n\t            ctxt.defs[glyphCode] = QuickSvg.createFragment(\"g\", options, QuickSvg.svgFragmentForGlyph(glyph));\n\t\n\t            if (ctxt.defsNode) ctxt.defsNode.appendChild(QuickSvg.createNode(\"g\", options, QuickSvg.nodesForGlyph(glyph)));\n\t          };\n\t          makeDef.makeSvgTree = function () {\n\t            return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", getDefProps()].concat(_toConsumableArray(QuickSvg.nodesForGlyph(glyph, \"createSvgTree\"))));\n\t          };\n\t          makeDef.glyphCode = glyphCode;\n\t          makeDef();\n\t          ctxt.makeDefs.push(makeDef);\n\t        }\n\t\n\t        this.align = this.glyph.align;\n\t      }\n\t\n\t      this.origin.x = this.glyph.origin.x * ctxt.glyphScaling;\n\t      this.origin.y = this.glyph.origin.y * ctxt.glyphScaling;\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = -this.origin.y;\n\t      this.bounds.width = this.glyph.bounds.width * ctxt.glyphScaling;\n\t      this.bounds.height = this.glyph.bounds.height * ctxt.glyphScaling;\n\t    }\n\t  }, {\n\t    key: \"setStaffPosition\",\n\t    value: function setStaffPosition(ctxt, staffPosition) {\n\t      this.bounds.y = ctxt.calculateHeightFromStaffPosition(staffPosition) - this.origin.y;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      var x = this.bounds.x + this.origin.x;\n\t      var y = this.bounds.y + this.origin.y;\n\t      canvasCtxt.translate(x, y);\n\t      canvasCtxt.scale(ctxt.glyphScaling, ctxt.glyphScaling);\n\t\n\t      for (var i = 0; i < this.glyph.paths.length; i++) {\n\t        var path = this.glyph.paths[i];\n\t        canvasCtxt.fillStyle = path.type === \"negative\" ? \"#fff\" : ctxt.neumeLineColor;\n\t        canvasCtxt.fill(new Path2D(path.data));\n\t      }\n\t\n\t      canvasCtxt.scale(1.0 / ctxt.glyphScaling, 1.0 / ctxt.glyphScaling);\n\t      canvasCtxt.translate(-x, -y);\n\t    }\n\t  }, {\n\t    key: \"getSvgAttributes\",\n\t    value: function getSvgAttributes(ctxt, source) {\n\t      var className = \"\";\n\t      if (/^Porrectus\\d$/.test(this.glyphCode)) {\n\t        var notes = source.neume.notes,\n\t            noteIndex = notes.indexOf(source),\n\t            nextNote = notes[noteIndex + 1];\n\t        className = source.selected ? nextNote.selected ? \"selected\" : \"selectedA\" : nextNote.selected ? \"selectedB\" : \"\";\n\t      } else {\n\t        var isSelected = source && (source.selected || source.model && source.model.selected);\n\t        className = isSelected ? \"selected\" : \"\";\n\t      }\n\t      var result = {\n\t        \"xlink:href\": \"#\" + this.glyphCode,\n\t        class: className\n\t      };\n\t      if (source) {\n\t        result[\"source-index\"] = source.sourceIndex;\n\t        result[\"element-index\"] = source.elementIndex;\n\t        if ('noteIndex' in source) {\n\t          result.class += ' note';\n\t          result.id = ctxt.noteIdPrefix + (source.noteIndex + 1);\n\t          if (source.neume) {\n\t            var glyphCode = source.glyphVisualizer.glyphCode;\n\t            if (/^Porrectus/.test(glyphCode)) {\n\t              result.class += ' porrectus porrectus-start';\n\t            } else if (glyphCode === 'None') {\n\t              result.class += ' porrectus porrectus-end';\n\t            }\n\t          }\n\t        }\n\t      }\n\t      if (ctxt.scaleDefs === true) {\n\t        result.x = this.bounds.x + this.origin.x;\n\t        result.y = this.bounds.y + this.origin.y;\n\t      } else {\n\t        result.x = (this.bounds.x + this.origin.x) / ctxt.glyphScaling;\n\t        result.y = (this.bounds.y + this.origin.y) / ctxt.glyphScaling;\n\t        result.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt, source) {\n\t      var attributes = this.getSvgAttributes(ctxt, source);\n\t      attributes.source = source;\n\t      return QuickSvg.createNode(\"use\", attributes);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt, source) {\n\t      var attributes = this.getSvgAttributes(ctxt, source);\n\t      if (source) attributes.source = source;\n\t      return QuickSvg.createSvgTree(\"use\", attributes);\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt, source) {\n\t      return QuickSvg.createFragment(\"use\", this.getSvgAttributes(ctxt, source));\n\t    }\n\t  }]);\n\t\n\t  return GlyphVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar RoundBraceVisualizer = exports.RoundBraceVisualizer = function (_ChantLayoutElement6) {\n\t  _inherits(RoundBraceVisualizer, _ChantLayoutElement6);\n\t\n\t  function RoundBraceVisualizer(ctxt, x1, x2, y, isAbove) {\n\t    _classCallCheck(this, RoundBraceVisualizer);\n\t\n\t    var _this10 = _possibleConstructorReturn(this, (RoundBraceVisualizer.__proto__ || Object.getPrototypeOf(RoundBraceVisualizer)).call(this));\n\t\n\t    if (x1 > x2) {\n\t      // swap the xs\n\t      var temp = x1;\n\t      x1 = x2;\n\t      x2 = temp;\n\t    }\n\t\n\t    _this10.isAbove = isAbove;\n\t    _this10.braceHeight = 3 * ctxt.staffInterval / 2;\n\t\n\t    _this10.bounds = new _ExsurgeCore.Rect(x1, isAbove ? y - _this10.braceHeight : y, x2 - x1, _this10.braceHeight);\n\t\n\t    _this10.origin.x = 0;\n\t    _this10.origin.y = 0;\n\t    return _this10;\n\t  }\n\t\n\t  _createClass(RoundBraceVisualizer, [{\n\t    key: \"getSvgPathProps\",\n\t    value: function getSvgPathProps(ctxt) {\n\t      return {\n\t        d: this.generatePathString(),\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.staffLineWeight + \"px\",\n\t        fill: \"none\",\n\t        class: \"brace\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createNode(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, [node, this.accent.createSvgNode(ctxt)]);\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createSvgTree(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, node, this.accent.createSvgTree(ctxt));\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        fragment += this.accent.createSvgFragment(ctxt);\n\t\n\t        return QuickSvg.createFragment(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, fragment);\n\t      } else return fragment;\n\t    }\n\t\n\t    // returns svg path d string\n\t\n\t  }, {\n\t    key: \"generatePathString\",\n\t    value: function generatePathString() {\n\t      var x1 = this.bounds.x;\n\t      var x2 = this.bounds.right();\n\t      var width = this.bounds.width;\n\t      var y, dx, dy;\n\t\n\t      dx = width / 6;\n\t      dy = this.bounds.height;\n\t      if (this.isAbove) {\n\t        y = this.bounds.bottom();\n\t        dy = -dy;\n\t      } else {\n\t        y = this.bounds.y;\n\t      }\n\t\n\t      //Calculate Control Points of path,\n\t      var cx1 = x1 + dx;\n\t      var cy = y + dy;\n\t      var cx2 = x2 - dx;\n\t\n\t      // two decimal points should be enough, but if we need more precision, we can\n\t      // up it here.\n\t      var dp = 2;\n\t      return \"M \" + x1.toFixed(dp) + \" \" + y.toFixed(dp) + \" C \" + cx1.toFixed(dp) + \" \" + cy.toFixed(dp) + \" \" + cx2.toFixed(dp) + \" \" + cy.toFixed(dp) + \" \" + x2.toFixed(dp) + \" \" + y.toFixed(dp);\n\t    }\n\t  }]);\n\t\n\t  return RoundBraceVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar CurlyBraceVisualizer = exports.CurlyBraceVisualizer = function (_ChantLayoutElement7) {\n\t  _inherits(CurlyBraceVisualizer, _ChantLayoutElement7);\n\t\n\t  function CurlyBraceVisualizer(ctxt, x1, x2, y) {\n\t    var isAbove = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\t    var addAcuteAccent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\t\n\t    _classCallCheck(this, CurlyBraceVisualizer);\n\t\n\t    var _this11 = _possibleConstructorReturn(this, (CurlyBraceVisualizer.__proto__ || Object.getPrototypeOf(CurlyBraceVisualizer)).call(this));\n\t\n\t    if (x1 > x2) {\n\t      // swap the xs\n\t      var temp = x1;\n\t      x1 = x2;\n\t      x2 = temp;\n\t    }\n\t\n\t    _this11.isAbove = isAbove;\n\t    _this11.braceHeight = ctxt.staffInterval / 2;\n\t\n\t    // y is the actual vertical start of the brace (left hand side)\n\t    // thus for a brace over notes, bounds.y is the bottom of brace,\n\t    // but for a brace under the notes, y is simply the y passed in.\n\t    if (isAbove) y -= _this11.braceHeight;\n\t\n\t    var bounds = new _ExsurgeCore.Rect(x1, y, x2 - x1, _this11.braceHeight);\n\t\n\t    if (addAcuteAccent && isAbove) {\n\t      _this11.accent = new GlyphVisualizer(ctxt, GlyphCode.AcuteAccent);\n\t      _this11.accent.bounds.x += bounds.x + (x2 - x1) / 2;\n\t      _this11.accent.bounds.y += bounds.y - ctxt.staffInterval / 4;\n\t\n\t      bounds.union(_this11.accent.bounds);\n\t    }\n\t\n\t    _this11.bounds = bounds;\n\t\n\t    _this11.origin.x = 0;\n\t    _this11.origin.y = 0;\n\t    return _this11;\n\t  }\n\t\n\t  _createClass(CurlyBraceVisualizer, [{\n\t    key: \"getSvgPathProps\",\n\t    value: function getSvgPathProps(ctxt) {\n\t      return {\n\t        d: this.generatePathString(),\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.staffLineWeight + \"px\",\n\t        fill: \"none\",\n\t        class: \"brace\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        return QuickSvg.createNode(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, [node, this.accent.createSvgNode(ctxt)]);\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createSvgTree(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, node, this.accent.createSvgTree(ctxt));\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        fragment += this.accent.createSvgFragment(ctxt);\n\t\n\t        return QuickSvg.createFragment(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, fragment);\n\t      } else return fragment;\n\t    }\n\t\n\t    // code below inspired by: https://gist.github.com/alexhornbake\n\t    // optimized for braces that are only drawn horizontally.\n\t    // returns svg path d string\n\t\n\t  }, {\n\t    key: \"generatePathString\",\n\t    value: function generatePathString() {\n\t      var q = 0.6; // .5 is normal, higher q = more expressive bracket\n\t\n\t      var x1 = this.bounds.x;\n\t      var x2 = this.bounds.right();\n\t      var width = this.bounds.width;\n\t      var y, h;\n\t\n\t      if (this.isAbove) {\n\t        y = this.bounds.bottom();\n\t        h = -this.braceHeight;\n\t      } else {\n\t        y = this.bounds.y;\n\t        h = this.braceHeight;\n\t      }\n\t\n\t      // calculate Control Points of path\n\t      var qy1 = y + q * h;\n\t      var qx2 = x1 + 0.25 * width;\n\t      var qy2 = y + (1 - q) * h;\n\t      var tx1 = x1 + 0.5 * width;\n\t      var ty1 = y + h;\n\t      var qy3 = y + q * h;\n\t      var qx4 = x1 + 0.75 * width;\n\t      var qy4 = y + (1 - q) * h;\n\t\n\t      // two decimal points should be enough, but if we need more precision, we can\n\t      // up it here.\n\t      var dp = 2;\n\t      return \"M \" + x1.toFixed(dp) + \" \" + y.toFixed(dp) + \" Q \" + x1.toFixed(dp) + \" \" + qy1.toFixed(dp) + \" \" + qx2.toFixed(dp) + \" \" + qy2.toFixed(dp) + \" T \" + tx1.toFixed(dp) + \" \" + ty1.toFixed(dp) + \" M \" + x2.toFixed(dp) + \" \" + y.toFixed(dp) + \" Q \" + x2.toFixed(dp) + \" \" + qy3.toFixed(dp) + \" \" + qx4.toFixed(dp) + \" \" + qy4.toFixed(dp) + \" T \" + tx1.toFixed(dp) + \" \" + ty1.toFixed(dp);\n\t    }\n\t  }]);\n\t\n\t  return CurlyBraceVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar TextSpan = exports.TextSpan = function () {\n\t  function TextSpan(text, properties, activeTags) {\n\t    var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\t\n\t    _classCallCheck(this, TextSpan);\n\t\n\t    if (typeof properties === \"undefined\" || properties === null) properties = {};\n\t\n\t    this.text = text;\n\t    this.properties = properties;\n\t    this.activeTags = activeTags || [];\n\t    this.index = index;\n\t  }\n\t\n\t  _createClass(TextSpan, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new TextSpan(this.text, this.properties, this.activeTags, this.index);\n\t    }\n\t  }]);\n\t\n\t  return TextSpan;\n\t}();\n\t\n\tfunction MarkupStackFrame(tagName, startIndex) {\n\t  var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t  var symbol = arguments[3];\n\t\n\t  this.tagName = tagName;\n\t  this.startIndex = startIndex;\n\t  this.properties = properties;\n\t  if (symbol) this.symbol = symbol;\n\t}\n\t\n\tMarkupStackFrame.createStackFrame = function (ctxt, tagName, startIndex) {\n\t  var extraProperties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\t  var symbol = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n\t\n\t  return new MarkupStackFrame(tagName, startIndex, Object.assign({}, ctxt.fontStyleDictionary[tagName], extraProperties), symbol);\n\t};\n\t\n\t// for escaping html strings before they go into the svgs\n\t// adapted from http://stackoverflow.com/a/12034334/5720160\n\tvar __subsForTspans = {\n\t  \"&\": \"&amp;\",\n\t  \"<\": \"&lt;\",\n\t  \">\": \"&gt;\"\n\t};\n\t\n\tvar TextElement = exports.TextElement = function (_ChantLayoutElement8) {\n\t  _inherits(TextElement, _ChantLayoutElement8);\n\t\n\t  function TextElement(ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc) {\n\t    _classCallCheck(this, TextElement);\n\t\n\t    // set these to some sane values for now...\n\t    var _this12 = _possibleConstructorReturn(this, (TextElement.__proto__ || Object.getPrototypeOf(TextElement)).call(this));\n\t\n\t    _this12.bounds.x = 0;\n\t    _this12.bounds.y = 0;\n\t    _this12.bounds.width = 0;\n\t    _this12.bounds.height = 0;\n\t    _this12.origin.x = 0;\n\t    _this12.origin.y = 0;\n\t\n\t    _this12.fontFamily = fontFamily;\n\t    _this12.fontSize = fontSize;\n\t    _this12.textAnchor = textAnchor;\n\t    _this12.sourceIndex = sourceIndex;\n\t    _this12.sourceGabc = sourceGabc;\n\t    _this12.dominantBaseline = \"baseline\"; // default placement\n\t\n\t    _this12.generateSpansFromText(ctxt, text);\n\t\n\t    _this12.recalculateMetrics(ctxt);\n\t    return _this12;\n\t  }\n\t\n\t  _createClass(TextElement, [{\n\t    key: \"getFromScore\",\n\t    value: function getFromScore(score) {\n\t      return this.textType.getFromScore(score, this);\n\t    }\n\t  }, {\n\t    key: \"generateSpansFromText\",\n\t    value: function generateSpansFromText(ctxt, text) {\n\t      var _this13 = this;\n\t\n\t      text = text.replace(/\\s+/g, \" \");\n\t      this.text = \"\";\n\t      this.spans = [];\n\t\n\t      // save ourselves a lot of grief for a very common text:\n\t      if (text === \"*\" || text === \"+\" || text === \"†\") {\n\t        var properties = text === \"*\" ? ctxt.asteriskProperties : text === \"+\" ? ctxt.plusProperties : null;\n\t        text = ctxt.specialCharText(text) || text;\n\t        this.spans.push(new TextSpan(text, properties));\n\t        return;\n\t      }\n\t\n\t      var markupStack = [];\n\t      var spanStartIndex = 0;\n\t      var newLineInNextSpan = 0;\n\t\n\t      var filterFrames = function filterFrames(frame, symbol) {\n\t        return frame.Symbol === symbol;\n\t      };\n\t\n\t      var closeSpan = function closeSpan(spanText, index, extraProperties) {\n\t        if (spanText === \"\" && !_this13.dropCap) return;\n\t\n\t        _this13.text += spanText;\n\t\n\t        var properties = {};\n\t        for (var i = 0; i < markupStack.length; i++) {\n\t          Object.assign(properties, markupStack[i].properties);\n\t        }if (extraProperties) Object.assign(properties, extraProperties);\n\t        if (newLineInNextSpan) {\n\t          properties.newLine = newLineInNextSpan;\n\t          newLineInNextSpan = 0;\n\t        }\n\t\n\t        _this13.spans.push(new TextSpan(spanText, properties, markupStack.map(function (frame) {\n\t          return frame.tagName;\n\t        }), index));\n\t      };\n\t\n\t      var markupRegex = /(<br\\/?>)|<v>([\\s\\S]*?)(?:<\\/v>|$)|(\\*)(?=\\s*\\*|[^*]*(?:$|<v>))|(\\+)|<sp>(?:(~)|(')?([ao]e|[æœaeiouy])|([arv])\\/)<\\/sp>|([arv])\\/\\.|([℣℟])\\.?|(?:([*_^%])|<(\\/)?([bciuv]|ul|sc|font)(?:\\s+(?:family=\"([^\"]+)\"|fill=\"([^\"]+)\"|class=\"([^\"]+)\"))*>)(?=(?:(.+?)(?:\\11|<\\/\\13>))?)/gi;\n\t      var vTagRegex = /(\\\\grecross)|\\{greextra\\}\\{([^}]*)\\}/g;\n\t      var match = null;\n\t      var openedAsterisk = false;\n\t      var closeCurrentSpan = function closeCurrentSpan() {\n\t        return closeSpan(text.substring(spanStartIndex, match.index), spanStartIndex);\n\t      };\n\t      while (match = markupRegex.exec(text)) {\n\t        var _match = match,\n\t            _match2 = _slicedToArray(_match, 18),\n\t            newLine = _match2[1],\n\t            vTag = _match2[2],\n\t            asterisk = _match2[3],\n\t            plus = _match2[4],\n\t            tilde = _match2[5],\n\t            accent = _match2[6],\n\t            vowelLigature = _match2[7],\n\t            specialChar = _match2[8],\n\t            specialChar2 = _match2[9],\n\t            specialChar3 = _match2[10],\n\t            markupSymbol = _match2[11],\n\t            closingTag = _match2[12],\n\t            tagName = _match2[13],\n\t            family = _match2[14],\n\t            fill = _match2[15],\n\t            cssClass = _match2[16],\n\t            enclosedText = _match2[17];\n\t\n\t        specialChar = specialChar || specialChar2 || specialChar3;\n\t        // non-matching symbols first\n\t        if (newLine) {\n\t          // close the current span, if any:\n\t          if (match.index > spanStartIndex) {\n\t            closeCurrentSpan();\n\t          }\n\t          // add the newline span:\n\t          newLineInNextSpan++;\n\t        } else if (vTag) {\n\t          closeCurrentSpan();\n\t          var vMatch = void 0;\n\t          var lastIndex = 0;\n\t          var iOffset = 0;\n\t          while (vMatch = vTagRegex.exec(vTag)) {\n\t            if (lastIndex < vMatch.index) {\n\t              closeSpan(vTag.slice(lastIndex, vMatch.index), match.index + lastIndex + iOffset);\n\t              iOffset = 3; // length of '<v>'\n\t            }\n\t\n\t            var _vMatch = vMatch,\n\t                _vMatch2 = _slicedToArray(_vMatch, 3),\n\t                grecross = _vMatch2[1],\n\t                greextra = _vMatch2[2];\n\t\n\t            if (grecross) {\n\t              // grecross is just the command for the Cross:\n\t              // set up greextra so it will get handled with it below:\n\t              greextra = 'Cross';\n\t            }\n\t            var char = _greextraGlyphs.greextraGlyphs[greextra];\n\t            if (char) {\n\t              closeSpan(char, match.index + vMatch.index + iOffset, { 'font-family': 'greextra' });\n\t            }\n\t            lastIndex = vTagRegex.lastIndex;\n\t            iOffset = 3; // length of '<v>'\n\t          }\n\t          if (lastIndex < vTag.length) {\n\t            closeSpan(vTag.slice(lastIndex), match.index + lastIndex + iOffset);\n\t          }\n\t        } else if (asterisk) {\n\t          closeCurrentSpan();\n\t          // first check if it is just a symbol to close:\n\t          if (markupStack.length > 0 && markupStack[markupStack.length - 1].symbol === asterisk) {\n\t            // close asterisk tag\n\t            markupStack.pop();\n\t          } else {\n\t            // add special asterisk:\n\t            closeSpan(ctxt.specialCharText(asterisk) || '*', match.index, ctxt.asteriskProperties);\n\t          }\n\t        } else if (plus) {\n\t          closeCurrentSpan();\n\t          closeSpan(ctxt.specialCharText(plus) || '+', match.index, ctxt.plusProperties);\n\t        } else if (tilde) {\n\t          closeCurrentSpan();\n\t          closeSpan('∼', match.index);\n\t        } else if (vowelLigature) {\n\t          var vowel = (0, _makeLigature.makeLigature)(vowelLigature);\n\t          if (accent) vowel = (0, _addAccent.addAccent)(vowel);\n\t          closeCurrentSpan();\n\t          closeSpan(vowel, match.index);\n\t        } else if (specialChar) {\n\t          closeCurrentSpan();\n\t          closeSpan(ctxt.textBeforeSpecialChar + ctxt.specialCharText(specialChar) + ctxt.textAfterSpecialChar, match.index, ctxt.specialCharProperties);\n\t        } else {\n\t          // otherwise we're dealing with matching markup delimeters\n\t          if (markupSymbol === \"*\") {\n\t            // we are only strict with the asterisk, because there are cases when it needs to be displayed rather than count as a markup symbol\n\t            if (enclosedText && /[^\\s*]/.test(enclosedText)) {\n\t              openedAsterisk = true;\n\t            } else if (openedAsterisk) {\n\t              openedAsterisk = false;\n\t            } else {\n\t              // actually use the asterisk, since it doesn't have a matching closing asterisk\n\t              continue;\n\t            }\n\t          }\n\t          if (markupSymbol) {\n\t            tagName = ctxt.markupSymbolDictionary[markupSymbol];\n\t            if (markupStack.length > 0 && markupStack[markupStack.length - 1].tagName === tagName && markupStack[markupStack.length - 1].symbol === markupSymbol) {\n\t              closingTag = true;\n\t            }\n\t          }\n\t          if (markupStack.length > 0 && markupStack[markupStack.length - 1].tagName === tagName) {\n\t            if (closingTag) {\n\t              // group close\n\t              closeCurrentSpan();\n\t              markupStack.pop();\n\t            }\n\t          } else if (markupStack.filter(filterFrames).length > 0) {\n\t            // trying to open a recursive group (or forgot to close a previous group)\n\t            // in either case, we just unwind to the previous stack frame\n\t            spanStartIndex = markupStack[markupStack.length - 1].startIndex;\n\t            markupStack.pop();\n\t            continue;\n\t          } else {\n\t            closeCurrentSpan();\n\t            if (closingTag) {\n\t              // out of order group close:\n\t              var index = markupStack.findIndex(function (frame) {\n\t                return frame.tagName === tagName;\n\t              });\n\t              if (index >= 0) {\n\t                markupStack.splice(index, 1);\n\t              }\n\t            } else {\n\t              // group open\n\t              var extraProperties = {};\n\t              if (family) extraProperties['font-family'] = family;\n\t              if (fill) extraProperties.fill = fill;\n\t              if (cssClass) extraProperties.class = cssClass;\n\t              markupStack.push(MarkupStackFrame.createStackFrame(ctxt, tagName, match.index, extraProperties, markupSymbol));\n\t            }\n\t          }\n\t        }\n\t\n\t        // advance the start index past the current markup\n\t        spanStartIndex = match.index + match[0].length;\n\t      }\n\t\n\t      // if we finished matches, and there is still some text left,\n\t      // or if we haven't generated any spans yet, create one final run\n\t      if (spanStartIndex < text.length || this.spans.length === 0) closeSpan(text.slice(spanStartIndex), spanStartIndex);\n\t    }\n\t  }, {\n\t    key: \"getCanvasFontForProperties\",\n\t    value: function getCanvasFontForProperties(ctxt) {\n\t      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var font = \"\";\n\t      if (properties[\"font-style\"] === \"italic\") font += \"italic \";\n\t      if (properties[\"font-variant\"] === \"small-caps\") font += \"small-caps \";\n\t      if (properties[\"font-weight\"] === \"bold\") font += \"bold \";\n\t      var fontSize = parseFloat(properties[\"font-size\"]) || this.fontSize(ctxt);\n\t      if (/%$/.test(properties[\"font-size\"])) {\n\t        fontSize *= this.fontSize(ctxt) / 100;\n\t      }\n\t      font += fontSize * (this.resize || 1) + \"px \";\n\t      font += properties[\"font-family\"] || this.fontFamily(ctxt);\n\t      return font;\n\t    }\n\t  }, {\n\t    key: \"measureSubstringBBox\",\n\t    value: function measureSubstringBBox(ctxt, length) {\n\t      return this.measureSubstring(ctxt, length, true);\n\t    }\n\t\n\t    // if length is undefined and this.rightAligned === true, then offsets will be marked for each newLine span\n\t\n\t  }, {\n\t    key: \"measureSubstring\",\n\t    value: function measureSubstring(ctxt, length) {\n\t      var returnBBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t      if (length === 0) return 0;\n\t      if (!length) length = Infinity;\n\t      if (length < 0) {\n\t        var lines = -length;\n\t        length = Infinity;\n\t      }\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      var width = 0;\n\t      var widths = [];\n\t      var newLineSpans = [this.spans[0]];\n\t      var subStringLength = 0;\n\t      var numLines = 1;\n\t      var fontSize = this.fontSize(ctxt) * (this.resize || 1);\n\t      var bbox = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i],\n\t            myText = span.text.slice(0, length - subStringLength);\n\t        if (span.properties.newLine) {\n\t          numLines += parseInt(span.properties.newLine) || 1;\n\t          if (!lines && this.rightAligned === true && length === Infinity) {\n\t            newLineSpans[newLineSpans.length - 1].properties.xOffset = this.firstLineMaxWidth - width;\n\t            newLineSpans.push(span);\n\t          } else if (--lines === 0) break;\n\t          widths.push(width);\n\t          width = 0;\n\t        }\n\t        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n\t          canvasCtxt.font = this.getCanvasFontForProperties(ctxt, span.properties);\n\t          var metrics = canvasCtxt.measureText(myText, width, fontSize * (numLines - 1));\n\t          if (\"actualBoundingBoxAscent\" in metrics) {\n\t            var left = metrics.actualBoundingBoxLeft;\n\t            bbox.union(new _ExsurgeCore.Rect(width - left, fontSize * (numLines - 1) - metrics.actualBoundingBoxAscent, metrics.width + left, metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent));\n\t            if (this instanceof DropCap) {\n\t              width += Math.max(0, left);\n\t            }\n\t          } else {\n\t            bbox.union(new _ExsurgeCore.Rect(width, fontSize * (numLines - 2), metrics.width, fontSize));\n\t          }\n\t          width += metrics.width;\n\t        } else if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.OpenTypeJS && ctxt.fontDictionary) {\n\t          // get the bounding box for the substring, placing it at x = width, y = fontSize * (numLines - 1)\n\t          var font = ctxt.getFontForProperties(span.properties, span.properties[\"font-family\"] || this.fontFamily(ctxt));\n\t          var options = { features: { liga: true } };\n\t          if (span.properties[\"font-variant\"] === \"small-caps\") {\n\t            options.features.smcp = true;\n\t          }\n\t          var spanFontSize = parseFloat(span.properties[\"font-size\"]) || fontSize;\n\t          if (/%$/.test(span.properties[\"font-size\"])) {\n\t            spanFontSize *= fontSize / 100;\n\t          }\n\t          var subBbox = font.getPath(myText, width, fontSize * (numLines - 1), spanFontSize, options).getBoundingBox();\n\t          var subWidth = font.getAdvanceWidth(myText, spanFontSize, options);\n\t\n\t          bbox.union(new _ExsurgeCore.Rect(width + subBbox.x1, subBbox.y1, subWidth - subBbox.x1, subBbox.y2 - subBbox.y1));\n\t          width += subWidth;\n\t          if (this instanceof DropCap) {\n\t            width -= subBbox.x1;\n\t          }\n\t        }\n\t        subStringLength += myText.length;\n\t        if (subStringLength === length) break;\n\t      }\n\t      if (!lines && width && newLineSpans.length && this.rightAligned === true && length === Infinity) {\n\t        newLineSpans[newLineSpans.length - 1].properties.xOffset = this.firstLineMaxWidth - width;\n\t      }\n\t      width = Math.max.apply(Math, [width].concat(widths));\n\t      if (returnBBox === true) {\n\t        var height = bbox.height;\n\t        var y = bbox.y,\n\t            x = bbox.x;\n\t        return { width: width, height: height, x: x, y: y };\n\t      } else {\n\t        return width;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      var resetNewLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      if (resetNewLines) {\n\t        delete this.maxWidth;\n\t        delete this.firstLineMaxWidth;\n\t        delete this.rightAligned;\n\t        delete this.resize;\n\t        delete this.numLines;\n\t        // replace newlines with spaces\n\t        this.spans.forEach(function (span) {\n\t          delete span.properties.xOffset;\n\t          if (span.properties.newLine === true) {\n\t            delete span.properties.newLine;\n\t            span.text = \" \" + span.text;\n\t          }\n\t        });\n\t      }\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t\n\t      this.origin.x = 0;\n\t\n\t      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t        while (ctxt.svgTextMeasurer.firstChild) {\n\t          ctxt.svgTextMeasurer.removeChild(ctxt.svgTextMeasurer.firstChild);\n\t        }ctxt.svgTextMeasurer.appendChild(this.createSvgNode(ctxt));\n\t        ctxt.svgTextMeasurer.appendChild(ctxt.createStyleNode());\n\t\n\t        var bbox = ctxt.svgTextMeasurer.firstChild.getBBox();\n\t        this.bounds.width = bbox.width;\n\t        this.bounds.height = bbox.height;\n\t        this.origin.y = -bbox.y; // offset to baseline from top\n\t        this.origin.x = -bbox.x;\n\t      } else {\n\t        var _bbox = this.measureSubstringBBox(ctxt);\n\t        this.bounds.width = _bbox.width;\n\t        this.bounds.height = _bbox.height;\n\t        this.origin.y = -_bbox.y;\n\t        this.origin.x = -_bbox.x;\n\t      }\n\t      this.numLines = this.spans.reduce(function (result, span) {\n\t        return result + (span.properties.newLine ? parseInt(span.properties.newLine) || 1 : 0);\n\t      }, 1);\n\t    }\n\t  }, {\n\t    key: \"setMaxWidth\",\n\t    value: function setMaxWidth(ctxt, maxWidth) {\n\t      var firstLineMaxWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : maxWidth;\n\t\n\t      if (this.spans.filter(function (s) {\n\t        return s.properties.newLine === true;\n\t      }).length) {\n\t        // first get rid of any new lines set from a previous maxWidth\n\t        this.recalculateMetrics(ctxt);\n\t      }\n\t      if (this.bounds.width > maxWidth) {\n\t        this.maxWidth = maxWidth;\n\t        var percentage = maxWidth / this.bounds.width;\n\t        if (this instanceof Lyric && percentage >= 0.85) {\n\t          this.resize = percentage;\n\t        } else {\n\t          if (firstLineMaxWidth < 0) firstLineMaxWidth = maxWidth;\n\t          this.firstLineMaxWidth = firstLineMaxWidth;\n\t          var lastWidth = 0,\n\t              lastMatch = null,\n\t              regex = /\\s+|$/g,\n\t              max = firstLineMaxWidth,\n\t              match;\n\t          while ((match = regex.exec(this.text)) && (!lastMatch || match.index > lastMatch.index)) {\n\t            var width = this.measureSubstring(ctxt, match.index);\n\t            if (width > max && lastMatch) {\n\t              var _spans;\n\t\n\t              var spanIndex = 0,\n\t                  length = 0;\n\t              while (length < lastMatch.index && spanIndex < this.spans.length) {\n\t                var span = this.spans[spanIndex++];\n\t                length += span.text.length + (span.properties.newLine ? 1 : 0);\n\t              }\n\t              if (length > lastMatch.index) {\n\t                var _span = this.spans[--spanIndex];\n\t                length -= _span.text.length;\n\t              }\n\t              var splitSpan = this.spans[spanIndex],\n\t                  textLeft = splitSpan.text.slice(0, lastMatch.index - length),\n\t                  textRight = splitSpan.text.slice(lastMatch.index + lastMatch[0].length - length),\n\t                  newSpans = [];\n\t              this.rightAligned = max === firstLineMaxWidth && firstLineMaxWidth !== maxWidth;\n\t              if (textLeft) newSpans.push(new TextSpan(textLeft, splitSpan.properties, splitSpan.activeTags));\n\t              if (textRight) {\n\t                newSpans.push(new TextSpan(textRight, Object.assign({}, splitSpan.properties, { newLine: true }), splitSpan.activeTags));\n\t              } else if (this.spans[spanIndex + 1]) {\n\t                this.spans[spanIndex + 1].properties.newLine = true;\n\t              }\n\t              (_spans = this.spans).splice.apply(_spans, [spanIndex, 1].concat(newSpans));\n\t              this.needsLayout = true;\n\t              max = maxWidth;\n\t              if (match.index === this.text.length || this.measureSubstring(ctxt) <= maxWidth) break;\n\t              width = 0;\n\t              match = lastMatch = null;\n\t            }\n\t            lastWidth = width;\n\t            lastMatch = match;\n\t          }\n\t        }\n\t        this.recalculateMetrics(ctxt, false);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      return this.textType && this.textType.cssClass || \"\";\n\t    }\n\t  }, {\n\t    key: \"getExtraStyleProperties\",\n\t    value: function getExtraStyleProperties(ctxt) {\n\t      return ctxt.baseTextStyle || {};\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      if (this.textAnchor === \"middle\") canvasCtxt.textAlign = \"center\";else canvasCtxt.textAlign = \"start\";\n\t\n\t      var translateWidth = 0,\n\t          translateHeight = 0;\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var xOffset = span.properties.xOffset || 0;\n\t        if (span.properties.newLine) {\n\t          count = parseInt(span.properties.newLine) || 1;\n\t          canvasCtxt.translate(translateWidth + xOffset, this.fontSize(ctxt) * count);\n\t          translateWidth = -xOffset;\n\t          translateHeight -= this.fontSize(ctxt);\n\t        } else if (xOffset) {\n\t          canvasCtxt.translate(translateWidth + xOffset, 0);\n\t          translateWidth = -xOffset;\n\t        }\n\t        var properties = Object.assign({}, this.getExtraStyleProperties(ctxt), span.properties);\n\t        canvasCtxt.font = this.getCanvasFontForProperties(ctxt, properties);\n\t        canvasCtxt.fillStyle = properties.fill || \"#000\";\n\t        canvasCtxt.fillText(span.text, this.bounds.x, this.bounds.y, span.properties.textLength || undefined);\n\t        var metrics = canvasCtxt.measureText(span.text, this.bounds.x, this.bounds.y);\n\t        translateWidth -= metrics.width;\n\t        canvasCtxt.translate(metrics.width, 0);\n\t      }\n\t      canvasCtxt.translate(translateWidth, translateHeight);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps() {\n\t      return {\n\t        \"source-index\": this.sourceIndex,\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        class: this.getCssClasses().trim(),\n\t        \"text-anchor\": this.textAnchor\n\t        //'dominant-baseline': this.dominantBaseline, // hanging baseline doesn't work in Safari\n\t      };\n\t    }\n\t  }, {\n\t    key: \"getSpanOptions\",\n\t    value: function getSpanOptions(span, ctxt) {\n\t      var useStyleObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t      var options = {\n\t        \"source-index\": span.index,\n\t        class: span.properties.class,\n\t        style: useStyleObject ? Object.assign({}, span.properties) : (0, _ExsurgeCore.getCssForProperties)(span.properties)\n\t      };\n\t\n\t      if (span.properties.newLine) {\n\t        var xOffset = span.properties.xOffset || 0;\n\t        options.dy = 1.1 * (parseInt(span.properties.newLine) || 1) + \"em\";\n\t        options.x = this.bounds.x + xOffset;\n\t      } else if (span.properties.xOffset) {\n\t        options.x = this.bounds.x + span.properties.xOffset;\n\t      }\n\t      if (span.properties.textLength) {\n\t        options.textLength = span.properties.textLength;\n\t        options.lengthAdjust = \"spacingAndGlyphs\";\n\t        options.y = this.bounds.y;\n\t      }\n\t      if (this.resize) {\n\t        options[\"font-size\"] = span.properties[\"font-size\"] || this.fontSize(ctxt) * this.resize;\n\t      }\n\t      // if (ctxt.setFontFamilyAttributes) {\n\t      //   options[\"font-family\"] =\n\t      //     span.properties[\"font-family\"] ||\n\t      //     getFontFilenameForProperties(span.properties, this.fontFamily(ctxt));\n\t      //   let properties = Object.assign({}, span.properties);\n\t      //   delete properties[\"font-weight\"];\n\t      //   delete properties[\"font-style\"];\n\t      //   options[\"style\"] = getCssForProperties(properties);\n\t      // } else {\n\t      //   options[\"style\"] = getCssForProperties(span.properties);\n\t      // }\n\t\n\t      return options;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var spans = [];\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options = this.getSpanOptions(span, ctxt);\n\t\n\t        spans.push(QuickSvg.createNode(\"tspan\", _options, span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      var extraStyleProperties = this.getExtraStyleProperties(ctxt);\n\t      options.style = (0, _ExsurgeCore.getCssForProperties)(extraStyleProperties);\n\t      if (extraStyleProperties.class) {\n\t        options.class = extraStyleProperties.class + ' ' + options.class;\n\t      }\n\t      options.source = this;\n\t\n\t      return this.svgNode = QuickSvg.createNode(\"text\", options, spans);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var spans = [];\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options2 = this.getSpanOptions(span, ctxt, true);\n\t\n\t        spans.push(QuickSvg.createSvgTree(\"tspan\", _options2, span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      options.style = this.getExtraStyleProperties(ctxt);\n\t      if (options.style.class) {\n\t        options.class = options.style.class + ' ' + options.class;\n\t      }\n\t      options.source = this;\n\t\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"text\", options].concat(spans));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var spans = \"\";\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options3 = this.getSpanOptions(span, ctxt);\n\t\n\t        spans += QuickSvg.createFragment(\"tspan\", _options3, TextElement.escapeForTspan(span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      var extraStyleProperties = this.getExtraStyleProperties(ctxt);\n\t      options.style = (0, _ExsurgeCore.getCssForProperties)(extraStyleProperties);\n\t      if (extraStyleProperties.class) {\n\t        options.class = extraStyleProperties.class + ' ' + options.class;\n\t      }\n\t      if (ctxt.setFontFamilyAttributes) {\n\t        options[\"font-size\"] = this.fontSize(ctxt);\n\t      }\n\t\n\t      return QuickSvg.createFragment(\"text\", options, spans);\n\t    }\n\t  }], [{\n\t    key: \"escapeForTspan\",\n\t    value: function escapeForTspan(string) {\n\t      return String(string).replace(/[&<>]/g, function (s) {\n\t        return __subsForTspans[s];\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return TextElement;\n\t}(ChantLayoutElement);\n\t\n\tvar LyricType = exports.LyricType = {\n\t  SingleSyllable: 0,\n\t  BeginningSyllable: 1,\n\t  MiddleSyllable: 2,\n\t  EndingSyllable: 3,\n\t\n\t  Directive: 4 // for asterisks, \"ij.\" elements, or other performance notes.\n\t};\n\t\n\tvar LyricArray = exports.LyricArray = {\n\t  getLeft: function getLeft(lyricArray) {\n\t    if (lyricArray.length === 0) return NaN;\n\t\n\t    var x = Number.MAX_VALUE;\n\t    for (var i = 0; i < lyricArray.length; i++) {\n\t      if (lyricArray[i]) x = Math.min(x, lyricArray[i].notation.bounds.x + lyricArray[i].bounds.x);\n\t    }\n\t\n\t    return x;\n\t  },\n\t\n\t  getRight: function getRight(lyricArray, presumeConnectorNeeded) {\n\t    if (lyricArray.length === 0) return NaN;\n\t\n\t    var x = Number.MIN_VALUE;\n\t    for (var i = 0; i < lyricArray.length; i++) {\n\t      var l = lyricArray[i];\n\t      if (l) x = Math.max(x, l.notation.bounds.x + l.bounds.x + l.bounds.width + (presumeConnectorNeeded && l.allowsConnector() && !l.needsConnector ? l.getConnectorWidth() : 0));\n\t    }\n\t\n\t    return x;\n\t  },\n\t\n\t  hasOnlyOneLyric: function hasOnlyOneLyric(lyricArray) {\n\t    return lyricArray.filter(function (l) {\n\t      return l.originalText;\n\t    }).length === 1;\n\t  },\n\t\n\t  indexOfLyric: function indexOfLyric(lyricArray) {\n\t    return lyricArray.indexOf(lyricArray.filter(function (l) {\n\t      return l.originalText;\n\t    })[0]);\n\t  },\n\t\n\t  mergeIn: function mergeIn(lyricArray, newLyrics) {\n\t    for (var i = 0; i < newLyrics.length; ++i) {\n\t      if (newLyrics[i].originalText || !lyricArray[i]) lyricArray[i] = newLyrics[i];\n\t    }\n\t  },\n\t\n\t  mergeInArray: function mergeInArray(lyricArray, notations) {\n\t    for (var i = 0; i < notations.length; ++i) {\n\t      this.mergeIn(lyricArray, notations[i].lyrics);\n\t    }\n\t  },\n\t\n\t  setNotation: function setNotation(lyricArray, notation) {\n\t    notation.lyrics = lyricArray;\n\t    for (var i = 0; i < lyricArray.length; ++i) {\n\t      lyricArray[i].notation = notation;\n\t    }\n\t  }\n\t};\n\t\n\tvar Lyric = exports.Lyric = function (_TextElement) {\n\t  _inherits(Lyric, _TextElement);\n\t\n\t  function Lyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n\t    _classCallCheck(this, Lyric);\n\t\n\t    var _this14 = _possibleConstructorReturn(this, (Lyric.__proto__ || Object.getPrototypeOf(Lyric)).call(this, ctxt, (ctxt.textStyles.lyric.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.lyric.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.lyric.size;\n\t    }, \"start\", sourceIndex, text));\n\t\n\t    _this14.textType = TextTypes.lyric;\n\t\n\t    // save the original text in case we need to later use the lyric\n\t    // in a dropcap...\n\t    _this14.originalText = text;\n\t\n\t    _this14.notation = notation;\n\t    _this14.notations = notations;\n\t\n\t    if (typeof lyricType === \"undefined\" || lyricType === null || lyricType === \"\") _this14.lyricType = LyricType.SingleSyllable;else _this14.lyricType = lyricType;\n\t\n\t    // Lyrics keep track of how to center them on notation elements.\n\t    // centerTextIndex is the index in this.text where the centering starts,\n\t    // centerLength is how many characters comprise the center point.\n\t    // performLayout will do the processing\n\t    _this14.centerStartIndex = -1;\n\t    _this14.centerLength = text.length;\n\t\n\t    _this14.needsConnector = false;\n\t\n\t    // Lyrics can have their own language defined, which affects the alignment\n\t    // of the text with the notation element\n\t    _this14.language = null;\n\t\n\t    if (_this14.allowsConnector) _this14.connectorSpan = new TextSpan(ctxt.syllableConnector);\n\t    return _this14;\n\t  }\n\t\n\t  _createClass(Lyric, [{\n\t    key: \"allowsConnector\",\n\t    value: function allowsConnector() {\n\t      return this.lyricType === LyricType.BeginningSyllable || this.lyricType === LyricType.MiddleSyllable;\n\t    }\n\t  }, {\n\t    key: \"setForceConnector\",\n\t    value: function setForceConnector(force) {\n\t      this.forceConnector = force && this.allowsConnector();\n\t    }\n\t  }, {\n\t    key: \"setNeedsConnector\",\n\t    value: function setNeedsConnector(needs, width) {\n\t      if (needs === true || this.forceConnector) {\n\t        this.needsConnector = true;\n\t        if (typeof width !== \"undefined\") {\n\t          this.setConnectorWidth(width);\n\t        } else {\n\t          this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n\t        }\n\t\n\t        if (this.spans.length > 0 && this.spans[this.spans.length - 1] !== this.connectorSpan) this.spans.push(this.connectorSpan);\n\t      } else {\n\t        this.connectorWidth = 0;\n\t        this.needsConnector = false;\n\t        this.bounds.width = this.widthWithoutConnector;\n\t\n\t        var span = this.spans.pop();\n\t        if (span && span !== this.connectorSpan) this.spans.push(span);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setConnectorWidth\",\n\t    value: function setConnectorWidth(width) {\n\t      this.connectorWidth = width;\n\t      this.connectorSpan.properties = Object.assign({}, this.connectorSpan.properties, { textLength: width });\n\t      if (this.needsConnector) this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n\t    }\n\t  }, {\n\t    key: \"getConnectorWidth\",\n\t    value: function getConnectorWidth() {\n\t      return this.connectorWidth || this.defaultConnectorWidth;\n\t    }\n\t  }, {\n\t    key: \"getLeft\",\n\t    value: function getLeft() {\n\t      return this.notation.bounds.x + this.bounds.x;\n\t    }\n\t  }, {\n\t    key: \"getRight\",\n\t    value: function getRight() {\n\t      return this.notation.bounds.x + this.bounds.x + this.bounds.width;\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      var resetNewLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      this.setNeedsConnector();\n\t\n\t      _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"recalculateMetrics\", this).call(this, ctxt, resetNewLines);\n\t\n\t      this.widthWithoutConnector = this.bounds.width;\n\t\n\t      this.connectorWidth = 0;\n\t      this.defaultConnectorWidth = ctxt.hyphenWidth;\n\t\n\t      var activeLanguage = this.language || ctxt.defaultLanguage;\n\t\n\t      // calculate the point where the text lines up to the staff notation\n\t      // and offset the rect that much. By default we just center the text,\n\t      // but the logic below allows for smarter lyric alignment based\n\t      // on manual override or language control.\n\t      var offset = this.widthWithoutConnector / 2,\n\t          x1,\n\t          x2,\n\t          vowelSegmentWidth = this.widthWithoutConnector;\n\t\n\t      // some simple checks for sanity, and disable manual centering if the numbers are bad\n\t      if (this.centerStartIndex >= 0 && (this.centerStartIndex >= this.text.length || this.centerLength < 0 || this.centerStartIndex + this.centerLength > this.text.length)) this.centerStartIndex = -1;\n\t\n\t      if (this.text.length === 0) {\n\t        // if we have no text to work with, then there's nothing to do!\n\t        // Unless it's a drop cap, in which case we center the connector:\n\t        if (this.dropCap && this.originalText) {\n\t          offset = ctxt.hyphenWidth / 2;\n\t          vowelSegmentWidth = ctxt.hyphenWidth;\n\t        }\n\t      } else if (this.centerStartIndex >= 0) {\n\t        // if we have manually overriden the centering logic for this lyric,\n\t        // then always use that.\n\t        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t          // svgTextMeasurer still has the current lyric in it...\n\t          x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, this.centerStartIndex);\n\t          x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, this.centerStartIndex + this.centerLength);\n\t        } else {\n\t          x1 = this.measureSubstring(ctxt, this.centerStartIndex);\n\t          x2 = this.measureSubstring(ctxt, this.centerStartIndex + this.centerLength);\n\t        }\n\t        offset = (x1 + x2) / 2;\n\t        vowelSegmentWidth = x2 - x1;\n\t      } else {\n\t        // if it's a directive with no manual centering override, then\n\t        // just center the text.\n\t        if (this.lyricType !== LyricType.Directive) {\n\t          // only consider text content after the last space (if any)\n\t          var startIndex = this.text.lastIndexOf(\" \") + 1;\n\t\n\t          // unless there are no text characters following the space:\n\t          if (startIndex > 0 && !this.text.slice(startIndex).match(/[a-záéíóúýäëïöüÿàèìòùỳāēīōūȳăĕĭŏŭ]/i)) {\n\t            startIndex = 0;\n\t          }\n\t\n\t          // Non-directive elements are lined up to the chant notation based on vowel segments,\n\t          var result = activeLanguage.findVowelSegment(this.text, startIndex);\n\t\n\t          if (result.found !== true) {\n\t            var match = this.text.slice(startIndex).match(/[a-z]+/i);\n\t            if (match) {\n\t              result.startIndex = startIndex + match.index;\n\t              result.length = match[0].length;\n\t            } else {\n\t              result.startIndex = startIndex;\n\t              result.length = this.text.length - startIndex;\n\t            }\n\t          }\n\t          if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t            // svgTextMeasurer still has the current lyric in it...\n\t            x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, result.startIndex);\n\t            x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, result.startIndex + result.length);\n\t          } else {\n\t            x1 = this.measureSubstring(ctxt, result.startIndex);\n\t            x2 = this.measureSubstring(ctxt, result.startIndex + result.length);\n\t          }\n\t          offset = (x1 + x2) / 2;\n\t          vowelSegmentWidth = x2 - x1;\n\t        }\n\t      }\n\t\n\t      this.vowelSegmentWidth = vowelSegmentWidth;\n\t\n\t      this.bounds.x = -offset;\n\t      this.bounds.y = 0;\n\t\n\t      this.origin.x = offset;\n\t    }\n\t  }, {\n\t    key: \"generateDropCap\",\n\t    value: function generateDropCap(ctxt) {\n\t      if (this.dropCap) return this.dropCap;\n\t      // disallow special characters:\n\t      if (this.spans[0].properties['font-family'] === ctxt.specialCharProperties['font-family']) {\n\t        return null;\n\t      }\n\t      var dropCapSpan = this.spans[0].clone();\n\t      dropCapSpan.text = dropCapSpan.text.slice(0, 1).toUpperCase();\n\t      var dropCapLowerCase = dropCapSpan.text.toLowerCase();\n\t      // disallow any characters that do not change from .toUpperCase():\n\t      if (dropCapSpan.text === dropCapLowerCase) return null;\n\t\n\t      if (dropCapSpan.activeTags.indexOf(\"sc\") >= 0) dropCapSpan.text = dropCapLowerCase;\n\t\n\t      var dropCap = this.dropCap = new DropCap(ctxt, \"\", this.sourceIndex);\n\t      dropCap.spans = [dropCapSpan];\n\t      var dropCapSourceGabcLength = this.sourceGabc.match(/^(?:<\\/?[^>]>)*.?(?:<\\/[^>]>)*/)[0].length;\n\t      dropCap.sourceGabc = this.sourceGabc.slice(0, dropCapSourceGabcLength);\n\t      this.sourceIndex += dropCap.sourceGabc.length;\n\t      this.sourceGabc = this.sourceGabc.slice(dropCapSourceGabcLength);\n\t\n\t      this.spans[0].text = this.spans[0].text.slice(1);\n\t      this.text = this.text.slice(1);\n\t      this.centerStartIndex--; // lost a letter, so adjust centering accordingly\n\t\n\t      return dropCap;\n\t    }\n\t  }, {\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      var classes = this.lyricType === LyricType.Directive ? \"directive \" : \"\";\n\t\n\t      return classes + _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"getCssClasses\", this).call(this);\n\t    }\n\t  }, {\n\t    key: \"getExtraStyleProperties\",\n\t    value: function getExtraStyleProperties(ctxt) {\n\t      var props = _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"getExtraStyleProperties\", this).call(this, ctxt);\n\t\n\t      if (this.lyricType === LyricType.Directive && ctxt.autoColor === true) props = Object.assign({}, props, { fill: ctxt.rubricColor });\n\t\n\t      return props;\n\t    }\n\t  }]);\n\t\n\t  return Lyric;\n\t}(TextElement);\n\t\n\tvar ChoralSign = exports.ChoralSign = function (_TextElement2) {\n\t  _inherits(ChoralSign, _TextElement2);\n\t\n\t  function ChoralSign(ctxt, text, note, sourceIndex) {\n\t    _classCallCheck(this, ChoralSign);\n\t\n\t    var _this15 = _possibleConstructorReturn(this, (ChoralSign.__proto__ || Object.getPrototypeOf(ChoralSign)).call(this, ctxt, (ctxt.textStyles.choralSign.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.choralSign.font;\n\t    }, TextTypes.choralSign.size, \"start\", sourceIndex, text));\n\t\n\t    _this15.positionHint = MarkingPositionHint.Default;\n\t    _this15.note = note;\n\t    _this15.textType = TextTypes.choralSign;\n\t    return _this15;\n\t  }\n\t\n\t  _createClass(ChoralSign, [{\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      _get(ChoralSign.prototype.__proto__ || Object.getPrototypeOf(ChoralSign.prototype), \"recalculateMetrics\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.recalculateMetrics(ctxt);\n\t      this.bounds.x = this.note.bounds.x + Math.max(0, (ctxt.staffInterval - this.bounds.width) / 2); // center on the note itself\n\t\n\t      var offset = void 0,\n\t          staffPosition = void 0;\n\t      if (this.positionHint === MarkingPositionHint.Below) {\n\t        offset = -1;\n\t        staffPosition = this.note.staffPosition + 2 * offset;\n\t        staffPosition += staffPosition % 2 === 0 ? 0.3 : 1;\n\t      } else {\n\t        offset = 1;\n\t        staffPosition = this.note.staffPosition + 2 * offset;\n\t        staffPosition += staffPosition % 2 === 0 ? 0.3 : -0.4;\n\t      }\n\t      // if (staffPosition % 2 === 0) staffPosition += offset;\n\t      this.bounds.y = ctxt.calculateHeightFromStaffPosition(staffPosition) + this.origin.y;\n\t    }\n\t  }]);\n\t\n\t  return ChoralSign;\n\t}(TextElement);\n\t\n\tvar AboveLinesText = exports.AboveLinesText = function (_TextElement3) {\n\t  _inherits(AboveLinesText, _TextElement3);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function AboveLinesText(ctxt, text, notation, sourceIndex) {\n\t    _classCallCheck(this, AboveLinesText);\n\t\n\t    var _this16 = _possibleConstructorReturn(this, (AboveLinesText.__proto__ || Object.getPrototypeOf(AboveLinesText)).call(this, ctxt, (ctxt.textStyles.al.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.al.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.al.size;\n\t    }, \"start\", sourceIndex, text));\n\t\n\t    _this16.notation = notation;\n\t    _this16.textType = TextTypes.al;\n\t\n\t    _this16.padding = ctxt.staffInterval / 2;\n\t    return _this16;\n\t  }\n\t\n\t  return AboveLinesText;\n\t}(TextElement);\n\t\n\tvar TranslationText = exports.TranslationText = function (_TextElement4) {\n\t  _inherits(TranslationText, _TextElement4);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function TranslationText(ctxt, text, notation, sourceIndex) {\n\t    _classCallCheck(this, TranslationText);\n\t\n\t    var gabcSource = text;\n\t    var anchor = \"start\";\n\t    if (text === \"/\") {\n\t      text = \"\";\n\t      anchor = \"end\";\n\t    } else {\n\t      text = (ctxt.textStyles.translation.prefix || \"\") + text;\n\t    }\n\t\n\t    var _this17 = _possibleConstructorReturn(this, (TranslationText.__proto__ || Object.getPrototypeOf(TranslationText)).call(this, ctxt, text, function (ctxt) {\n\t      return ctxt.textStyles.translation.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.translation.size;\n\t    }, anchor, sourceIndex, gabcSource));\n\t\n\t    _this17.notation = notation;\n\t    _this17.textType = TextTypes.translation;\n\t\n\t    _this17.padding = ctxt.staffInterval / 2;\n\t    return _this17;\n\t  }\n\t\n\t  return TranslationText;\n\t}(TextElement);\n\t\n\tvar DropCap = exports.DropCap = function (_TextElement5) {\n\t  _inherits(DropCap, _TextElement5);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function DropCap(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, DropCap);\n\t\n\t    var _this18 = _possibleConstructorReturn(this, (DropCap.__proto__ || Object.getPrototypeOf(DropCap)).call(this, ctxt, (ctxt.textStyles.dropCap.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.dropCap.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.dropCap.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this18.textType = TextTypes.dropCap;\n\t\n\t    _this18.padding = ctxt.staffInterval * ctxt.textStyles.dropCap.padding;\n\t    return _this18;\n\t  }\n\t\n\t  return DropCap;\n\t}(TextElement);\n\t\n\tvar TitleTextElement = exports.TitleTextElement = function (_TextElement6) {\n\t  _inherits(TitleTextElement, _TextElement6);\n\t\n\t  function TitleTextElement(ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc) {\n\t    _classCallCheck(this, TitleTextElement);\n\t\n\t    return _possibleConstructorReturn(this, (TitleTextElement.__proto__ || Object.getPrototypeOf(TitleTextElement)).call(this, ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc));\n\t  }\n\t\n\t  return TitleTextElement;\n\t}(TextElement);\n\t\n\tvar Supertitle = exports.Supertitle = function (_TitleTextElement) {\n\t  _inherits(Supertitle, _TitleTextElement);\n\t\n\t  function Supertitle(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Supertitle);\n\t\n\t    var _this20 = _possibleConstructorReturn(this, (Supertitle.__proto__ || Object.getPrototypeOf(Supertitle)).call(this, ctxt, (ctxt.textStyles.supertitle.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.supertitle.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.supertitle.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this20.textType = TextTypes.supertitle;\n\t\n\t    _this20.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.supertitle.padding) || 1) * ctxt.textStyles.supertitle.size / 3;\n\t    };\n\t    return _this20;\n\t  }\n\t\n\t  return Supertitle;\n\t}(TitleTextElement);\n\t\n\tvar Title = exports.Title = function (_TitleTextElement2) {\n\t  _inherits(Title, _TitleTextElement2);\n\t\n\t  function Title(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Title);\n\t\n\t    var _this21 = _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).call(this, ctxt, (ctxt.textStyles.title.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.title.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.title.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this21.textType = TextTypes.title;\n\t\n\t    _this21.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.title.padding) || 1) * ctxt.textStyles.title.size / 3;\n\t    };\n\t    return _this21;\n\t  }\n\t\n\t  return Title;\n\t}(TitleTextElement);\n\t\n\tvar Subtitle = exports.Subtitle = function (_TitleTextElement3) {\n\t  _inherits(Subtitle, _TitleTextElement3);\n\t\n\t  function Subtitle(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Subtitle);\n\t\n\t    var _this22 = _possibleConstructorReturn(this, (Subtitle.__proto__ || Object.getPrototypeOf(Subtitle)).call(this, ctxt, (ctxt.textStyles.subtitle.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.subtitle.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.subtitle.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this22.textType = TextTypes.subtitle;\n\t\n\t    _this22.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.subtitle.padding) || 1) * ctxt.textStyles.subtitle.size / 3;\n\t    };\n\t    return _this22;\n\t  }\n\t\n\t  return Subtitle;\n\t}(TitleTextElement);\n\t\n\tvar TextLeftRight = exports.TextLeftRight = function (_TitleTextElement4) {\n\t  _inherits(TextLeftRight, _TitleTextElement4);\n\t\n\t  function TextLeftRight(ctxt, text, type, sourceIndex) {\n\t    _classCallCheck(this, TextLeftRight);\n\t\n\t    var _this23 = _possibleConstructorReturn(this, (TextLeftRight.__proto__ || Object.getPrototypeOf(TextLeftRight)).call(this, ctxt, (ctxt.textStyles.leftRight.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.leftRight.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.leftRight.size;\n\t    }, type === \"textLeft\" ? \"start\" : \"end\", sourceIndex, text));\n\t\n\t    _this23.textType = TextTypes.leftRight;\n\t    _this23.extraClass = type === \"textLeft\" ? \"textLeft\" : \"textRight\";\n\t    _this23.headerKey = type === \"textLeft\" ? \"text-left\" : \"text-right\";\n\t    _this23.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.leftRight.padding) || 1) * ctxt.textStyles.leftRight.size / 5;\n\t    };\n\t    return _this23;\n\t  }\n\t\n\t  _createClass(TextLeftRight, [{\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      return this.extraClass + \" \" + _get(TextLeftRight.prototype.__proto__ || Object.getPrototypeOf(TextLeftRight.prototype), \"getCssClasses\", this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return TextLeftRight;\n\t}(TitleTextElement);\n\t\n\tvar Annotation = exports.Annotation = function (_TextElement7) {\n\t  _inherits(Annotation, _TextElement7);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function Annotation(ctxt, text) {\n\t    _classCallCheck(this, Annotation);\n\t\n\t    var _this24 = _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).call(this, ctxt, (ctxt.textStyles.annotation.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.annotation.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.annotation.size;\n\t    }, \"middle\"));\n\t\n\t    _this24.textType = TextTypes.annotation;\n\t    _this24.padding = ctxt.staffInterval * ctxt.textStyles.annotation.padding;\n\t    _this24.dominantBaseline = \"hanging\"; // so that annotations can be aligned at the top.\n\t    return _this24;\n\t  }\n\t\n\t  return Annotation;\n\t}(TextElement);\n\t\n\tvar Annotations = exports.Annotations = function (_ChantLayoutElement9) {\n\t  _inherits(Annotations, _ChantLayoutElement9);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function Annotations(ctxt) {\n\t    _classCallCheck(this, Annotations);\n\t\n\t    var _this25 = _possibleConstructorReturn(this, (Annotations.__proto__ || Object.getPrototypeOf(Annotations)).call(this));\n\t\n\t    for (var _len2 = arguments.length, texts = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t      texts[_key2 - 1] = arguments[_key2];\n\t    }\n\t\n\t    _this25.annotations = texts.map(function (text) {\n\t      return new Annotation(ctxt, text);\n\t    });\n\t    _this25.padding = Math.max.apply(null, _this25.annotations.map(function (annotation) {\n\t      return annotation.padding;\n\t    }));\n\t    return _this25;\n\t  }\n\t\n\t  _createClass(Annotations, [{\n\t    key: \"updateBounds\",\n\t    value: function updateBounds(multiplier) {\n\t      if (!multiplier) multiplier = 1;\n\t      for (var i = 0; i < this.annotations.length; ++i) {\n\t        var annotation = this.annotations[i];\n\t        annotation.bounds.x += this.bounds.x * multiplier;\n\t        annotation.bounds.y += this.bounds.y * multiplier;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t\n\t      this.bounds.width = 0;\n\t      this.bounds.height = 0;\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t\n\t      for (var i = 0; i < this.annotations.length; ++i) {\n\t        var annotation = this.annotations[i];\n\t        annotation.recalculateMetrics(ctxt);\n\t        this.bounds.width = Math.max(this.bounds.width, annotation.bounds.width);\n\t        annotation.bounds.y += this.bounds.height;\n\t        this.bounds.height += annotation.bounds.height;\n\t        this.origin.y = this.origin.y || annotation.origin.y;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      this.updateBounds();\n\t      this.annotations.forEach(function (annotation) {\n\t        annotation.draw(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgNode(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgTree(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t      return { children: result };\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgFragment(ctxt);\n\t      }).join(\"\");\n\t      this.updateBounds(-1);\n\t      return result;\n\t    }\n\t  }]);\n\t\n\t  return Annotations;\n\t}(ChantLayoutElement);\n\t\n\tvar ChantNotationElement = exports.ChantNotationElement = function (_ChantLayoutElement10) {\n\t  _inherits(ChantNotationElement, _ChantLayoutElement10);\n\t\n\t  function ChantNotationElement() {\n\t    _classCallCheck(this, ChantNotationElement);\n\t\n\t    //double\n\t    var _this26 = _possibleConstructorReturn(this, (ChantNotationElement.__proto__ || Object.getPrototypeOf(ChantNotationElement)).call(this));\n\t\n\t    _this26.leadingSpace = 0.0;\n\t    _this26.trailingSpace = DefaultTrailingSpace;\n\t    _this26.keepWithNext = false;\n\t    _this26.needsLayout = true;\n\t\n\t    _this26.lyrics = [];\n\t\n\t    _this26.score = null; // the ChantScore\n\t    _this26.line = null; // the ChantLine\n\t\n\t    _this26.visualizers = [];\n\t    return _this26;\n\t  }\n\t\n\t  _createClass(ChantNotationElement, [{\n\t    key: \"hasLyrics\",\n\t    value: function hasLyrics() {\n\t      return this.lyrics.length !== 0;\n\t    }\n\t  }, {\n\t    key: \"getAllLyricsLeft\",\n\t    value: function getAllLyricsLeft() {\n\t      if (this.lyrics.length === 0) return this.bounds.right();\n\t\n\t      var x = Number.MAX_VALUE;\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        if (this.lyrics[i]) x = Math.min(x, this.lyrics[i].bounds.x);\n\t      }\n\t\n\t      return this.bounds.x + x;\n\t    }\n\t  }, {\n\t    key: \"getAllLyricsRight\",\n\t    value: function getAllLyricsRight() {\n\t      if (this.lyrics.length === 0) return this.bounds.x;\n\t\n\t      var x = Number.MIN_VALUE;\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        if (this.lyrics[i]) x = Math.max(x, this.lyrics[i].bounds.x + this.lyrics[i].bounds.width);\n\t      }\n\t\n\t      return this.bounds.x + x;\n\t    }\n\t\n\t    // used by subclasses while building up the chant notations.\n\t\n\t  }, {\n\t    key: \"addVisualizer\",\n\t    value: function addVisualizer(chantLayoutElement) {\n\t      if (!chantLayoutElement.ignoreBounds) {\n\t        if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();else this.bounds.union(chantLayoutElement.bounds);\n\t      }\n\t\n\t      this.visualizers.push(chantLayoutElement);\n\t    }\n\t\n\t    // same as addVisualizer, except the element is unshifted to the front\n\t    // of the visualizer array rather than the end. This way, some\n\t    // visualizers can be placed behind the others...ledger lines for example.\n\t\n\t  }, {\n\t    key: \"prependVisualizer\",\n\t    value: function prependVisualizer(chantLayoutElement) {\n\t      if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();else this.bounds.union(chantLayoutElement.bounds);\n\t\n\t      this.visualizers.unshift(chantLayoutElement);\n\t    }\n\t\n\t    // chant notation elements are given an opportunity to perform their layout via this function.\n\t    // subclasses should call this function first in overrides of this function.\n\t    // on completion, exsurge presumes that the bounds, the origin, and the fragment objects are\n\t    // all valid and prepared for higher level layout.\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      if (typeof this.trailingSpace === \"function\") this.calculatedTrailingSpace = this.trailingSpace(ctxt);else this.calculatedTrailingSpace = this.trailingSpace;\n\t\n\t      // reset the bounds and the staff notations before doing a layout\n\t      this.visualizers = [];\n\t      this.bounds = new _ExsurgeCore.Rect(Infinity, Infinity, -Infinity, -Infinity);\n\t\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        this.lyrics[i].recalculateMetrics(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        this.alText[i].recalculateMetrics(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        this.translationText[i].recalculateMetrics(ctxt);\n\t      }\n\t    }\n\t\n\t    // some subclasses have internal dependencies on other notations (for example,\n\t    // a custos can depend on a later neume which it uses to set its height).\n\t    // subclasses can override this function so that when the notations are\n\t    // altered, the subclass can correctly invalidate (and later restore) its own\n\t    // depedencies\n\t\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {}\n\t\n\t    // a helper function for subclasses to call after they are done performing layout...\n\t\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      var _this27 = this;\n\t\n\t      this.bounds.x = 0;\n\t\n\t      var language = this.lyrics[0] && this.lyrics[0].language || ctxt.defaultLanguage;\n\t      // center the neume itself over the syllable, or just the first punctum\n\t      // if the neume is wider than the syllable + the width of a punctum, we always revert to centering just over the punctum\n\t      var calculateLyricX = language.centerNeume ? function (lyric) {\n\t        return lyric.bounds.x = _this27.bounds.width + ctxt.staffInterval < lyric.vowelSegmentWidth ? _this27.bounds.width / 2 - lyric.origin.x : _this27.origin.x - lyric.origin.x;\n\t      } : function (lyric) {\n\t        return lyric.bounds.x = _this27.origin.x - lyric.origin.x;\n\t      };\n\t      this.lyrics.forEach(calculateLyricX);\n\t\n\t      this.needsLayout = false;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      canvasCtxt.translate(this.bounds.x, 0);\n\t\n\t      for (var i = 0; i < this.visualizers.length; i++) {\n\t        this.visualizers[i].draw(ctxt);\n\t      }for (i = 0; i < this.lyrics.length; i++) {\n\t        this.lyrics[i].draw(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        this.translationText[i].draw(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        this.alText[i].draw(ctxt);\n\t      }canvasCtxt.translate(-this.bounds.x, 0);\n\t    }\n\t  }, {\n\t    key: \"getInnerSvgNodes\",\n\t    value: function getInnerSvgNodes(ctxt) {\n\t      var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createSvgNode\";\n\t\n\t      var inner = [];\n\t\n\t      for (i = 0; i < this.lyrics.length; i++) {\n\t        inner.push(this.lyrics[i][functionName](ctxt));\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        inner.push(this.translationText[i][functionName](ctxt));\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        inner.push(this.alText[i][functionName](ctxt));\n\t      }if (this.visualizers.length) {\n\t        var visualizers = [];\n\t        for (var i = 0; i < this.visualizers.length; i++) {\n\t          visualizers.push(this.visualizers[i][functionName](ctxt, this));\n\t        }if (functionName === \"createSvgTree\") {\n\t          inner.push(QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", { class: \"Notations\" }].concat(visualizers)));\n\t        } else {\n\t          inner.push(QuickSvg.createNode(\"g\", { class: \"Notations\" }, visualizers));\n\t        }\n\t      }\n\t      return inner;\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps() {\n\t      return {\n\t        // this.constructor.name will not be the same after being mangled by UglifyJS\n\t        class: \"ChantNotationElement \" + this.constructor.name,\n\t        transform: \"translate(\" + this.bounds.x + \",\" + 0 + \")\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var inner = this.getInnerSvgNodes(ctxt, \"createSvgNode\");\n\t      var svgProps = this.getSvgProps();\n\t      svgProps.source = this;\n\t      return QuickSvg.createNode(\"g\", svgProps, inner);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var inner = this.getInnerSvgNodes(ctxt, \"createSvgTree\");\n\t      var svgProps = this.getSvgProps();\n\t      svgProps.source = this;\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", svgProps].concat(_toConsumableArray(inner)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var inner = \"\";\n\t\n\t      for (i = 0; i < this.lyrics.length; i++) {\n\t        inner += this.lyrics[i].createSvgFragment(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        inner += this.translationText[i].createSvgFragment(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        inner += this.alText[i].createSvgFragment(ctxt);\n\t      }for (var i = 0; i < this.visualizers.length; i++) {\n\t        inner += this.visualizers[i].createSvgFragment(ctxt, this);\n\t      }return QuickSvg.createFragment(\"g\", this.getSvgProps(), inner);\n\t    }\n\t  }]);\n\t\n\t  return ChantNotationElement;\n\t}(ChantLayoutElement);\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar addAccent = exports.addAccent = function addAccent(vowel) {\n\t  return {\n\t    \"Æ\": \"Ǽ\",\n\t    \"Œ\": \"Œ́\",\n\t    \"A\": \"Á\",\n\t    \"E\": \"É\",\n\t    \"I\": \"Í\",\n\t    \"O\": \"Ó\",\n\t    \"U\": \"Ú\",\n\t    \"Y\": \"Ý\",\n\t    \"æ\": \"ǽ\",\n\t    \"œ\": \"œ́\",\n\t    \"a\": \"á\",\n\t    \"e\": \"é\",\n\t    \"i\": \"í\",\n\t    \"o\": \"ó\",\n\t    \"u\": \"ú\",\n\t    \"y\": \"ý\"\n\t  }[vowel] || vowel;\n\t};\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar makeLigature = exports.makeLigature = function makeLigature(vowels) {\n\t  return {\n\t    AE: \"Æ\",\n\t    Ae: \"Æ\",\n\t    ae: \"æ\",\n\t    OE: \"Œ\",\n\t    Oe: \"Œ\",\n\t    oe: \"œ\"\n\t  }[vowels] || vowels;\n\t};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar greextraGlyphs = exports.greextraGlyphs = {\n\t  MedicaeaFlat: \"\",\n\t  HufnagelCustosUpShort: \"\",\n\t  HufnagelCustosUpLong: \"\",\n\t  HufnagelCustosUpMedium: \"\",\n\t  HufnagelCustosDownShort: \"\",\n\t  HufnagelCustosDownLong: \"\",\n\t  HufnagelCustosDownMedium: \"\",\n\t  MedicaeaCustosUpShort: \"\",\n\t  MedicaeaCustosUpLong: \"\",\n\t  MedicaeaCustosUpMedium: \"\",\n\t  MedicaeaCustosDownShort: \"\",\n\t  MedicaeaCustosDownLong: \"\",\n\t  MedicaeaCustosDownMedium: \"\",\n\t  MensuralCustosUpShort: \"\",\n\t  MensuralCustosUpLong: \"\",\n\t  MensuralCustosUpMedium: \"\",\n\t  MensuralCustosDownShort: \"\",\n\t  MensuralCustosDownLong: \"\",\n\t  MensuralCustosDownMedium: \"\",\n\t  MensuralFlat: \"\",\n\t  HufnagelFlat: \"\",\n\t  MedicaeaCClef: \"\",\n\t  MedicaeaCClefChange: \"\",\n\t  MedicaeaFClef: \"\",\n\t  MedicaeaFClefChange: \"\",\n\t  HufnagelCClef: \"\",\n\t  HufnagelCClefChange: \"\",\n\t  HufnagelFClef: \"\",\n\t  HufnagelFClefChange: \"\",\n\t  HugnagelCFClef: \"\",\n\t  HufnagelCFClefChange: \"\",\n\t  MensuralFlatHole: \"\",\n\t  HufnagelFlatHole: \"\",\n\t  MedicaeaFlatHole: \"\",\n\t  StarSix: \"\",\n\t  Dagger: \"\",\n\t  \"Bar.alt\": \"\",\n\t  StarHeight: \"\",\n\t  Cross: \"\",\n\t  \"RBar.alt\": \"\",\n\t  \"VBar.alt\": \"\",\n\t  Drawing1: \"\",\n\t  Drawing2: \"\",\n\t  RWithBarGoth: \"\",\n\t  VWithBarGoth: \"\",\n\t  Line1: \"\",\n\t  Line2: \"\",\n\t  Line3: \"\",\n\t  Line4: \"\",\n\t  Line5: \"\",\n\t  \"Cross.alt\": \"\",\n\t  ABarCaption: \"\",\n\t  RBarCaption: \"\",\n\t  VBarCaption: \"\",\n\t  ABarCaptionSC: \"\",\n\t  RBarCaptionSC: \"\",\n\t  VBarCaptionSC: \"\",\n\t  ABar: \"\",\n\t  RBar: \"\",\n\t  VBar: \"\",\n\t  ABarSC: \"\",\n\t  RBarSC: \"\",\n\t  VBarSC: \"\",\n\t  ABarSmall: \"\",\n\t  RBarSmall: \"\",\n\t  VBarSmall: \"\",\n\t  ABarSmallSC: \"\",\n\t  RBarSmallSC: \"\",\n\t  VBarSmallSC: \"\",\n\t  \"RBar.alt2\": \"\",\n\t  \"VBar.alt2\": \"\",\n\t  ABarCaptionSlant: \"\",\n\t  RBarCaptionSlant: \"\",\n\t  VBarCaptionSlant: \"\",\n\t  ABarSlant: \"\",\n\t  RBarSlant: \"\",\n\t  VBarSlant: \"\",\n\t  ABarSmallSlant: \"\",\n\t  RBarSmallSlant: \"\",\n\t  VBarSmallSlant: \"\"\n\t};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantDocument = exports.ChantScore = exports.ChantMapping = exports.ChantLineBreak = exports.TextOnly = exports.FaClef = exports.DoClef = exports.Clef = exports.Note = exports.NoteShapeModifiers = exports.NoteShape = exports.LiquescentType = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChantChantLine = __webpack_require__(9);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(11);\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGabc = __webpack_require__(12);\n\t\n\tvar _ExsurgeTitles = __webpack_require__(14);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar LiquescentType = exports.LiquescentType = {\n\t  None: 0,\n\t\n\t  // flags that can be combined, though of course it\n\t  // it doesn't make sense to combine some!\n\t  Large: 1 << 0,\n\t  Small: 1 << 1,\n\t  Ascending: 1 << 2,\n\t  Descending: 1 << 3,\n\t  InitioDebilis: 1 << 4,\n\t\n\t  // handy liquescent types\n\t  LargeAscending: 1 << 0 | 1 << 2,\n\t  LargeDescending: 1 << 0 | 1 << 3,\n\t  SmallAscending: 1 << 1 | 1 << 2,\n\t  SmallDescending: 1 << 1 | 1 << 3\n\t};\n\t\n\tvar NoteShape = exports.NoteShape = {\n\t  // shapes\n\t  Default: 0,\n\t  Virga: 1,\n\t  Inclinatum: 2,\n\t  Quilisma: 3,\n\t  Stropha: 4,\n\t  Oriscus: 5\n\t};\n\t\n\tvar NoteShapeModifiers = exports.NoteShapeModifiers = {\n\t  // flags which modify the shape\n\t  // not all of them apply to every shape of course\n\t  None: 0,\n\t  Ascending: 1 << 0,\n\t  Descending: 1 << 1,\n\t  Cavum: 1 << 2,\n\t  Stemmed: 1 << 3,\n\t  Linea: 1 << 4,\n\t  Reverse: 1 << 5\n\t};\n\t\n\t/**\n\t * @class\n\t */\n\t\n\tvar Note = exports.Note = function (_ChantLayoutElement) {\n\t  _inherits(Note, _ChantLayoutElement);\n\t\n\t  /**\n\t   * @para {Pitch} pitch\n\t   */\n\t  function Note(pitch) {\n\t    _classCallCheck(this, Note);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Note.__proto__ || Object.getPrototypeOf(Note)).call(this));\n\t\n\t    if (typeof pitch !== \"undefined\") _this.pitch = pitch;else _this.pitch = null;\n\t\n\t    _this.glyphVisualizer = null;\n\t\n\t    // The staffPosition on a note is an integer that indicates the vertical position on the staff.\n\t    // 0 is the center space on the staff (equivalent to gabc 'g'). Positive numbers go up\n\t    // the staff, and negative numbers go down, i.e., 1 is gabc 'h', 2 is gabc 'i', -1 is gabc 'f', etc.\n\t    _this.staffPosition = 0;\n\t    _this.liquescent = LiquescentType.None;\n\t    _this.shape = NoteShape.Default;\n\t    _this.shapeModifiers = NoteShapeModifiers.None;\n\t\n\t    // notes keep track of the neume they belong to in order to facilitate layout\n\t    // this.neume gets set when a note is added to a neume via Neume.addNote()\n\t    _this.neume = null;\n\t\n\t    // various markings that can exist on a note, organized by type\n\t    // for faster access and simpler code logic\n\t    _this.episemata = [];\n\t    _this.morae = []; // silly to have an array of these, but gabc allows multiple morae per note!\n\t\n\t    // these are set on the note when they are needed, otherwise, they're undefined\n\t    // this.ictus\n\t    // this.accuteAccent\n\t    // this.braceStart\n\t    // this.braceEnd\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Note, [{\n\t    key: \"setGlyph\",\n\t    value: function setGlyph(ctxt, glyphCode) {\n\t      if (this.glyphVisualizer) this.glyphVisualizer.setGlyph(ctxt, glyphCode);else this.glyphVisualizer = new _ExsurgeDrawing.GlyphVisualizer(ctxt, glyphCode);\n\t\n\t      this.glyphVisualizer.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      // assign glyphvisualizer metrics to this note\n\t      this.bounds.x = this.glyphVisualizer.bounds.x;\n\t      this.bounds.y = this.glyphVisualizer.bounds.y;\n\t      this.bounds.width = this.glyphVisualizer.bounds.width;\n\t      this.bounds.height = this.glyphVisualizer.bounds.height;\n\t\n\t      this.origin.x = this.glyphVisualizer.origin.x;\n\t      this.origin.y = this.glyphVisualizer.origin.y;\n\t    }\n\t\n\t    // a utility function for modifiers\n\t\n\t  }, {\n\t    key: \"shapeModifierMatches\",\n\t    value: function shapeModifierMatches(shapeModifier) {\n\t      if (shapeModifier === NoteShapeModifiers.None) return this.shapeModifier === NoteShapeModifiers.None;else return this.shapeModifier & shapeModifier !== 0;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t\n\t      this.glyphVisualizer.draw(ctxt);\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      this.svgNode = this.glyphVisualizer.createSvgNode(ctxt, this);\n\t      return this.svgNode;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      return this.glyphVisualizer.createSvgTree(ctxt, this);\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      return this.glyphVisualizer.createSvgFragment(ctxt, this);\n\t    }\n\t  }]);\n\t\n\t  return Note;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\t\n\tvar Clef = exports.Clef = function (_ChantNotationElement) {\n\t  _inherits(Clef, _ChantNotationElement);\n\t\n\t  function Clef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, Clef);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (Clef.__proto__ || Object.getPrototypeOf(Clef)).call(this));\n\t\n\t    _this2.isClef = true;\n\t    _this2.staffPosition = staffPosition;\n\t    _this2.octave = octave;\n\t    _this2.defaultAccidental = defaultAccidental;\n\t    _this2.activeAccidental = defaultAccidental;\n\t    _this2.keepWithNext = true;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(Clef, [{\n\t    key: \"resetAccidentals\",\n\t    value: function resetAccidentals() {\n\t      this.activeAccidental = this.defaultAccidental;\n\t    }\n\t  }, {\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {}\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      ctxt.activeClef = this;\n\t\n\t      if (this.defaultAccidental) this.defaultAccidental.performLayout(ctxt);\n\t\n\t      _get(Clef.prototype.__proto__ || Object.getPrototypeOf(Clef.prototype), \"performLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      // if we have a default accidental, then add a glyph for it now\n\t      if (this.defaultAccidental) {\n\t        var accidentalGlyph = this.defaultAccidental.createGlyphVisualizer(ctxt);\n\t        accidentalGlyph.bounds.x += this.visualizers[0].bounds.right() + ctxt.intraNeumeSpacing;\n\t        this.addVisualizer(accidentalGlyph);\n\t      }\n\t\n\t      _get(Clef.prototype.__proto__ || Object.getPrototypeOf(Clef.prototype), \"finishLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      if (this.model) return this.model.clone();\n\t      var clone = new this.constructor(this.staffPosition, this.octave, this.defaultAccidental);\n\t      clone.sourceGabc = this.sourceGabc;\n\t      clone.sourceIndex = this.sourceIndex;\n\t      clone.elementIndex = this.elementIndex;\n\t      clone.model = this;\n\t      return clone;\n\t    }\n\t  }], [{\n\t    key: \"default\",\n\t    value: function _default() {\n\t      return __defaultDoClef;\n\t    }\n\t  }]);\n\t\n\t  return Clef;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\tvar DoClef = exports.DoClef = function (_Clef) {\n\t  _inherits(DoClef, _Clef);\n\t\n\t  function DoClef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, DoClef);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (DoClef.__proto__ || Object.getPrototypeOf(DoClef)).call(this, staffPosition, octave, defaultAccidental));\n\t\n\t    _this3.leadingSpace = 0.0;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(DoClef, [{\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {\n\t      return (pitch.octave - this.octave) * 7 + this.staffPosition + _ExsurgeCore.Pitch.stepToStaffOffset(pitch.step) - _ExsurgeCore.Pitch.stepToStaffOffset(_ExsurgeCore.Step.Do);\n\t    }\n\t  }, {\n\t    key: \"staffPositionToPitch\",\n\t    value: function staffPositionToPitch(staffPosition) {\n\t      var offset = staffPosition - this.staffPosition;\n\t      var octaveOffset = Math.floor(offset / 7);\n\t\n\t      var step = _ExsurgeCore.Pitch.staffOffsetToStep(offset);\n\t\n\t      if (this.activeAccidental && this.activeAccidental.staffPosition === staffPosition) step += this.activeAccidental.accidentalType;\n\t\n\t      return new _ExsurgeCore.Pitch(step, this.octave + octaveOffset);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DoClef.prototype.__proto__ || Object.getPrototypeOf(DoClef.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.DoClef);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DoClef;\n\t}(Clef);\n\t\n\tvar __defaultDoClef = new DoClef(3, 2);\n\t\n\tvar FaClef = exports.FaClef = function (_Clef2) {\n\t  _inherits(FaClef, _Clef2);\n\t\n\t  function FaClef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, FaClef);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (FaClef.__proto__ || Object.getPrototypeOf(FaClef)).call(this, staffPosition, octave, defaultAccidental));\n\t\n\t    _this4.octave = octave;\n\t\n\t    _this4.leadingSpace = 0;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(FaClef, [{\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {\n\t      return (pitch.octave - this.octave) * 7 + this.staffPosition + _ExsurgeCore.Pitch.stepToStaffOffset(pitch.step) - _ExsurgeCore.Pitch.stepToStaffOffset(_ExsurgeCore.Step.Fa);\n\t    }\n\t  }, {\n\t    key: \"staffPositionToPitch\",\n\t    value: function staffPositionToPitch(staffPosition) {\n\t      var offset = staffPosition - this.staffPosition + 3; // + 3 because it's a fa clef (3 == offset from Do)\n\t      var octaveOffset = Math.floor(offset / 7);\n\t\n\t      var step = _ExsurgeCore.Pitch.staffOffsetToStep(offset);\n\t\n\t      if (this.activeAccidental && this.activeAccidental.staffPosition === staffPosition) step += this.activeAccidental.accidentalType;\n\t\n\t      return new _ExsurgeCore.Pitch(step, this.octave + octaveOffset);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(FaClef.prototype.__proto__ || Object.getPrototypeOf(FaClef.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.FaClef);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return FaClef;\n\t}(Clef);\n\t\n\t/*\n\t * TextOnly\n\t */\n\t\n\t\n\tvar TextOnly = exports.TextOnly = function (_ChantNotationElement2) {\n\t  _inherits(TextOnly, _ChantNotationElement2);\n\t\n\t  function TextOnly(sourceIndex, sourceLength) {\n\t    _classCallCheck(this, TextOnly);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (TextOnly.__proto__ || Object.getPrototypeOf(TextOnly)).call(this));\n\t\n\t    _this5.sourceIndex = sourceIndex;\n\t    _this5.sourceLength = sourceLength;\n\t    _this5.sourceGabc = \"\";\n\t    _this5.trailingSpace = 0;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(TextOnly, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TextOnly.prototype.__proto__ || Object.getPrototypeOf(TextOnly.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // add an empty glyph as a placeholder\n\t      this.addVisualizer(new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.None));\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TextOnly;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\tvar ChantLineBreak = exports.ChantLineBreak = function (_ChantNotationElement3) {\n\t  _inherits(ChantLineBreak, _ChantNotationElement3);\n\t\n\t  function ChantLineBreak(justify) {\n\t    _classCallCheck(this, ChantLineBreak);\n\t\n\t    var _this6 = _possibleConstructorReturn(this, (ChantLineBreak.__proto__ || Object.getPrototypeOf(ChantLineBreak)).call(this));\n\t\n\t    _this6.calculatedTrailingSpace = _this6.trailingSpace = 0;\n\t    _this6.justify = justify;\n\t    return _this6;\n\t  }\n\t\n\t  _createClass(ChantLineBreak, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // reset the bounds before doing a layout\n\t      this.bounds = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t    }\n\t  }, {\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      var lb = new ChantLineBreak();\n\t      lb.justify = this.justify;\n\t\n\t      return lb;\n\t    }\n\t  }]);\n\t\n\t  return ChantLineBreak;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t// a chant mapping is a lightweight format independent way of\n\t// tracking how a chant language (e.g., gabc) has been\n\t// mapped to exsurge notations.\n\t\n\t\n\tvar ChantMapping =\n\t// source can be any object type. in the case of gabc, source is a text\n\t// string that maps to a gabc word (e.g.: \"no(g)bis(fg)\").\n\t// notations is an array of ChantNotationElements\n\texports.ChantMapping = function ChantMapping(source, notations, sourceIndex) {\n\t  _classCallCheck(this, ChantMapping);\n\t\n\t  this.source = source;\n\t  this.notations = notations;\n\t  this.sourceIndex = sourceIndex;\n\t};\n\t\n\tvar __connectorSpan = new _ExsurgeDrawing.TextSpan(\" • \"),\n\t    __mergeAnnotationWithTextLeft = function __mergeAnnotationWithTextLeft() {\n\t  for (var _len = arguments.length, annotationSpans = Array(_len), _key = 0; _key < _len; _key++) {\n\t    annotationSpans[_key] = arguments[_key];\n\t  }\n\t\n\t  return annotationSpans.reduce(function (result, spans) {\n\t    if (result && result.length) {\n\t      if (spans && spans.length) return result.concat(__connectorSpan, spans);else return result;\n\t    } else if (spans && spans.length) {\n\t      return spans;\n\t    }\n\t    return [];\n\t  });\n\t};\n\t\n\t/*\n\t * Score, document\n\t */\n\t\n\tvar ChantScore = exports.ChantScore = function () {\n\t  // mappings is an array of ChantMappings.\n\t  function ChantScore(ctxt) {\n\t    var mappings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\t    var useDropCap = arguments[2];\n\t\n\t    _classCallCheck(this, ChantScore);\n\t\n\t    this.mappings = mappings;\n\t\n\t    this.lines = [];\n\t    this.notes = [];\n\t    if (ctxt) this.titles = new _ExsurgeTitles.Titles(ctxt, this);\n\t\n\t    this.startingClef = null;\n\t\n\t    this.useDropCap = useDropCap;\n\t    this.dropCap = null;\n\t\n\t    this.annotation = null;\n\t\n\t    this.compiled = false;\n\t\n\t    this.autoColoring = true;\n\t    this.needsLayout = true;\n\t\n\t    // valid after chant lines are created...\n\t    this.bounds = new _ExsurgeCore.Rect();\n\t\n\t    this.mergeAnnotationWithTextLeft = __mergeAnnotationWithTextLeft;\n\t\n\t    if (ctxt) this.updateNotations(ctxt);\n\t  }\n\t\n\t  /**\n\t   * Make a copy of the score, only including the specified lines\n\t   * @param  {number} startLine starting index\n\t   * @param  {number} endLine   ending index\n\t   * @return {ChantScore}           the partial score\n\t   */\n\t\n\t\n\t  _createClass(ChantScore, [{\n\t    key: \"copyLines\",\n\t    value: function copyLines(startLine, endLine) {\n\t      var result = new ChantScore();\n\t      result.lines = this.lines.slice(startLine, endLine);\n\t      result.bounds = this.bounds.clone();\n\t      var lastLine = result.lines.slice(-1)[0];\n\t      result.bounds.height = lastLine.bounds.bottom() - lastLine.origin.y;\n\t      if (startLine === 0) {\n\t        result.titles = this.titles;\n\t        result.dropCap = this.dropCap;\n\t        result.annotation = this.annotation;\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"updateSelection\",\n\t    value: function updateSelection(selection) {\n\t      this.selection = selection;\n\t      var elementSelection = selection && selection.element || {\n\t        indices: []\n\t      };\n\t      var selectedIndices = elementSelection.indices;\n\t      var insertion = elementSelection.insertion;\n\t      if (!insertion && selectedIndices.length === 1 && this.notes[selectedIndices[0]] instanceof TextOnly) {\n\t        // if there is only one selection, and its a text only, it should display as an insertion cursor:\n\t        insertion = { afterElementIndex: selectedIndices[0] };\n\t      }\n\t      // update the selected elements so that they can be given a .selected class when rendered\n\t      for (var i = 0; i < this.notes.length; ++i) {\n\t        var element = this.notes[i];\n\t        element.selected = selectedIndices.includes(i);\n\t      }\n\t      (this.startingClef.model || this.startingClef).selected = selectedIndices.includes(-1);\n\t      for (var _i = 0; _i < this.lines.length; ++_i) {\n\t        this.lines[_i].insertionCursor = null;\n\t      }\n\t      // update the insertion cursor, so it can be drawn on the correct system\n\t      this.insertionElement = null;\n\t      var insertionLine = null;\n\t      if (insertion) {\n\t        if (typeof insertion.chantLine === \"number\") {\n\t          insertionLine = this.lines[insertion.chantLine];\n\t          this.insertionElement = insertionLine.startingClef;\n\t          insertionLine.insertionCursor = new _ExsurgeChantSigns.InsertionCursor();\n\t        } else if (typeof insertion.afterElementIndex === \"number\") {\n\t          this.insertionElement = this.notes[insertion.afterElementIndex];\n\t          if (!this.insertionElement) {\n\t            insertionLine = this.lines[0];\n\t            this.insertionElement = insertionLine.startingClef;\n\t          } else if (this.insertionElement.neume) {\n\t            this.insertionElement = this.insertionElement.neume;\n\t          }\n\t          if (!insertionLine) {\n\t            insertionLine = this.insertionElement.line || this.lines[this.lines.length - 1];\n\t          }\n\t          insertionLine.insertionCursor = new _ExsurgeChantSigns.InsertionCursor();\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"updateNotations\",\n\t    value: function updateNotations(ctxt) {\n\t      var i, j, mapping, notation;\n\t\n\t      // flatten all mappings into one array for N(0) access to notations\n\t      this.notations = [];\n\t      this.notes = [];\n\t      this.hasLyrics = false;\n\t      this.hasAboveLinesText = false;\n\t      this.hasTranslations = false;\n\t      var elementSelection = this.selection && this.selection.element || {\n\t        indices: []\n\t      };\n\t      var selectedIndices = elementSelection.indices;\n\t      var nonNoteElementCount = 0;\n\t\n\t      // find the starting clef...\n\t      // start with a default clef in case the notations don't provide one.\n\t      this.startingClef = null;\n\t\n\t      for (i = 0; i < this.mappings.length; i++) {\n\t        mapping = this.mappings[i];\n\t        for (j = 0; j < mapping.notations.length; j++) {\n\t          notation = mapping.notations[j];\n\t          notation.score = this;\n\t          notation.mapping = mapping;\n\t\n\t          if (!this.startingClef) {\n\t            if (notation.isNeume) {\n\t              this.startingClef = Clef.default();\n\t            } else if (notation.isClef) {\n\t              this.startingClef = notation;\n\t              continue;\n\t            }\n\t          }\n\t\n\t          notation.notationIndex = this.notations.push(notation) - 1;\n\t          if (!this.hasLyrics && notation.hasLyrics()) this.hasLyrics = true;\n\t          if (!this.hasAboveLinesText && notation.alText) this.hasAboveLinesText = true;\n\t          if (!this.hasTranslations && notation.translationText) this.hasTranslations = true;\n\t\n\t          // Update this.notes and find element indices:\n\t          var elements = notation.notes || [notation];\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\t\n\t          try {\n\t            for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              var element = _step.value;\n\t\n\t              var elementIndex = element.elementIndex = this.notes.push(element) - 1;\n\t              if (element instanceof Note) {\n\t                element.noteIndex = elementIndex - nonNoteElementCount;\n\t              } else {\n\t                ++nonNoteElementCount;\n\t              }\n\t\n\t              element.selected = selectedIndices.includes(elementIndex);\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      // if we've reached this far and we *still* don't have a clef, then there aren't even\n\t      // any neumes in the score. still, set the default clef just for good measure\n\t      if (!this.startingClef) this.startingClef = Clef.default();\n\t      this.startingClef.elementIndex = -1;\n\t\n\t      // update drop cap\n\t      if (this.useDropCap) this.recreateDropCap(ctxt);else this.dropCap = null;\n\t\n\t      this.needsLayout = true;\n\t    }\n\t  }, {\n\t    key: \"recreateDropCap\",\n\t    value: function recreateDropCap(ctxt) {\n\t      this.dropCap = null;\n\t\n\t      // find the first notation with lyrics to use\n\t      for (var i = 0; i < this.notations.length; i++) {\n\t        if (this.notations[i].hasLyrics() && this.notations[i].lyrics[0] !== null && this.notations[i].lyrics[0].spans && this.notations[i].lyrics[0].spans.length) {\n\t          var notation = this.notations[i],\n\t              lyrics = notation.lyrics[0];\n\t          if (this.useDropCap) {\n\t            this.dropCap = lyrics.generateDropCap(ctxt);\n\t          } else {\n\t            lyrics.dropCap = null;\n\t            lyrics.generateSpansFromText(ctxt, lyrics.originalText);\n\t          }\n\t          notation.needsLayout = true;\n\t          return;\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Shared layout initialization method for performLayout() and performLayoutAsync()\n\t     * @param  {ChantContext} ctxt\n\t     */\n\t\n\t  }, {\n\t    key: \"initializeLayout\",\n\t    value: function initializeLayout(ctxt) {\n\t      // setup the context\n\t      ctxt.activeClef = this.startingClef;\n\t      ctxt.notations = this.notations;\n\t      ctxt.currNotationIndex = 0;\n\t\n\t      if (this.dropCap) this.dropCap.recalculateMetrics(ctxt);\n\t\n\t      if (this.annotation) this.annotation.recalculateMetrics(ctxt);\n\t    }\n\t\n\t    // this is the the synchronous version of performLayout that\n\t    // process everything without yielding to any other workers/threads.\n\t    // good for server side processing or very small chant pieces.\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt, force) {\n\t      if (!force && this.needsLayout === false) return; // nothing to do here!\n\t\n\t      ctxt.updateHyphenWidth();\n\t\n\t      this.initializeLayout(ctxt);\n\t\n\t      for (var i = 0; i < this.notations.length; i++) {\n\t        var notation = this.notations[i];\n\t        if (force || notation.needsLayout) {\n\t          ctxt.currNotationIndex = i;\n\t          notation.performLayout(ctxt);\n\t        }\n\t      }\n\t\n\t      this.needsLayout = false;\n\t    }\n\t\n\t    // for web applications, probably performLayoutAsync would be more\n\t    // apppropriate that the above performLayout, since it will process\n\t    // the notations without locking up the UI thread.\n\t\n\t  }, {\n\t    key: \"performLayoutAsync\",\n\t    value: function performLayoutAsync(ctxt, finishedCallback) {\n\t      var _this7 = this;\n\t\n\t      if (this.needsLayout === false) {\n\t        if (finishedCallback) setTimeout(function () {\n\t          return finishedCallback();\n\t        }, 0);\n\t\n\t        return; // nothing to do here!\n\t      }\n\t\n\t      if (ctxt.onFontLoaded) {\n\t        ctxt.onFontLoaded.push(function () {\n\t          return _this7.performLayoutAsync(ctxt, finishedCallback);\n\t        });\n\t        return;\n\t      }\n\t\n\t      // check for sane value of hyphen width:\n\t      ctxt.updateHyphenWidth();\n\t      if (!ctxt.hyphenWidth || ctxt.hyphenWidth / ctxt.textStyles.lyric.size > 0.6) {\n\t        setTimeout(function () {\n\t          _this7.performLayoutAsync(ctxt, finishedCallback);\n\t        }, 100);\n\t        return;\n\t      }\n\t\n\t      this.initializeLayout(ctxt);\n\t\n\t      setTimeout(function () {\n\t        return _this7.layoutElementsAsync(ctxt, 0, finishedCallback);\n\t      }, 0);\n\t    }\n\t  }, {\n\t    key: \"layoutElementsAsync\",\n\t    value: function layoutElementsAsync(ctxt, index, finishedCallback) {\n\t      var _this8 = this;\n\t\n\t      if (index >= this.notations.length) {\n\t        this.needsLayout = false;\n\t\n\t        if (finishedCallback) setTimeout(function () {\n\t          return finishedCallback();\n\t        }, 0);\n\t\n\t        return;\n\t      }\n\t\n\t      if (index === 0) ctxt.activeClef = this.startingClef;\n\t\n\t      var timeout = new Date().getTime() + 50; // process for fifty milliseconds\n\t      do {\n\t        var notation = this.notations[index];\n\t        if (notation.needsLayout) {\n\t          ctxt.currNotationIndex = index;\n\t          notation.performLayout(ctxt);\n\t        }\n\t\n\t        index++;\n\t      } while (index < this.notations.length && new Date().getTime() < timeout);\n\t\n\t      // schedule the next block of processing\n\t      setTimeout(function () {\n\t        return _this8.layoutElementsAsync(ctxt, index, finishedCallback);\n\t      }, 0);\n\t    }\n\t  }, {\n\t    key: \"layoutChantLines\",\n\t    value: function layoutChantLines(ctxt, width, finishedCallback) {\n\t      this.lines = [];\n\t\n\t      if (this.mergeAnnotationWithTextLeft && this.annotation && !this.dropCap) {\n\t        var annotation = this.annotation,\n\t            annotationSpans = annotation.annotations ? annotation.annotations.map(function (annotation) {\n\t          return annotation.spans;\n\t        }) : [annotation.spans];\n\t        this.overrideTextLeft = new _ExsurgeDrawing.TextLeftRight(ctxt, \"\", \"textLeft\");\n\t        if (ctxt.mapAnnotationSpansToTextLeft) {\n\t          annotationSpans = annotationSpans.map(ctxt.mapAnnotationSpansToTextLeft);\n\t        }\n\t        this.overrideTextLeft.spans = this.mergeAnnotationWithTextLeft.apply(this, _toConsumableArray(annotationSpans).concat([this.titles.textLeft && this.titles.textLeft.spans]));\n\t      } else {\n\t        this.overrideTextLeft = null;\n\t      }\n\t\n\t      var y = width > 0 ? this.titles.layoutTitles(ctxt, width) : 0;\n\t      var currIndex = 0;\n\t\n\t      ctxt.activeClef = this.startingClef;\n\t\n\t      var spaceBetweenSystems = ctxt.staffInterval * ctxt.spaceBetweenSystems;\n\t\n\t      do {\n\t        var line = new _ExsurgeChantChantLine.ChantLine(this);\n\t\n\t        line.buildFromChantNotationIndex(ctxt, currIndex, width);\n\t        currIndex = line.notationsStartIndex + line.numNotationsOnLine;\n\t        line.performLayout(ctxt);\n\t        line.elementIndex = this.lines.length;\n\t        this.lines.push(line);\n\t\n\t        line.bounds.y = -line.bounds.y + y;\n\t        y += line.bounds.height + spaceBetweenSystems;\n\t      } while (currIndex < this.notations.length);\n\t\n\t      var lastLine = this.lines[this.lines.length - 1];\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t      this.bounds.width = lastLine.bounds.width;\n\t      this.bounds.height = y - spaceBetweenSystems;\n\t\n\t      this.pages = [this];\n\t\n\t      if (this.selection) {\n\t        this.updateSelection(this.selection);\n\t      }\n\t\n\t      if (finishedCallback) finishedCallback(this);\n\t    }\n\t  }, {\n\t    key: \"paginate\",\n\t    value: function paginate(height) {\n\t      if (!height) return;\n\t      this.pages = [];\n\t      var pageHeightOffset = 0,\n\t          startLineIndex = 0;\n\t      for (var i = 1; i < this.lines.length; ++i) {\n\t        var line = this.lines[i];\n\t        var pageHeight = line.bounds.bottom() - pageHeightOffset - line.origin.y;\n\t\n\t        if (pageHeight > height) {\n\t          // this line will be the first on the new page\n\t          this.pages.push(this.copyLines(startLineIndex, i));\n\t          startLineIndex = i;\n\t          pageHeightOffset = line.bounds.y - line.origin.y;\n\t          line.bounds.y = line.origin.y;\n\t        } else {\n\t          // not a new page yet...update the bounds:\n\t          line.bounds.y -= pageHeightOffset;\n\t        }\n\t      }\n\t      this.pages.push(this.copyLines(startLineIndex, this.lines.length));\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\t\n\t      ctxt.setCanvasSize(this.bounds.width, this.bounds.height, scale);\n\t\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.clearRect(0, 0, ctxt.canvas.width, ctxt.canvas.height);\n\t\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      if (this.titles) this.titles.draw(ctxt);\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        this.lines[i].draw(ctxt);\n\t      }canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt, zoom) {\n\t      var width = typeof zoom === \"number\" ? zoom * this.bounds.width : zoom ? undefined : this.bounds.width,\n\t          height = zoom ? undefined : this.bounds.height;\n\t\n\t      return {\n\t        xmlns: \"http://www.w3.org/2000/svg\",\n\t        version: \"1.1\",\n\t        class: \"Exsurge ChantScore\" + (ctxt.editable ? \" EditableChantScore\" : \"\"),\n\t        width: width,\n\t        height: height,\n\t        viewBox: [0, 0, this.bounds.width, this.bounds.height].join(\" \")\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      // create defs section\n\t      var node = [ctxt.defsNode.cloneNode(true)];\n\t      node[0].appendChild(ctxt.createStyleNode());\n\t\n\t      if (this.titles) node.push(this.titles.createSvgNode(ctxt));\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        node.push(this.lines[i].createSvgNode(ctxt));\n\t      }node = _ExsurgeDrawing.QuickSvg.createNode(\"g\", {}, node);\n\t\n\t      node = _ExsurgeDrawing.QuickSvg.createNode(\"svg\", this.getSvgProps(ctxt), node);\n\t\n\t      node.source = this;\n\t      this.svg = node;\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt, zoom) {\n\t      // create defs section\n\t      var node = [_ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"defs\", {}].concat(_toConsumableArray(ctxt.makeDefs.map(function (makeDef) {\n\t        return makeDef.makeSvgTree();\n\t      })), [ctxt.createStyleTree()]))];\n\t\n\t      if (this.titles) node.push(this.titles.createSvgTree(ctxt));\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        node.push(this.lines[i].createSvgTree(ctxt));\n\t      }node = _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", {}].concat(_toConsumableArray(node)));\n\t      var svgProps = this.getSvgProps(ctxt, zoom);\n\t      svgProps.source = this;\n\t      node = _ExsurgeDrawing.QuickSvg.createSvgTree(\"svg\", svgProps, node);\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvg\",\n\t    value: function createSvg(ctxt) {\n\t      var fragment = \"\";\n\t\n\t      // create defs section\n\t      for (var def in ctxt.defs) {\n\t        if (ctxt.defs.hasOwnProperty(def)) fragment += ctxt.defs[def];\n\t      }fragment += ctxt.createStyle();\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"defs\", {}, fragment);\n\t\n\t      if (this.titles) fragment += this.titles.createSvgFragment(ctxt);\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        fragment += this.lines[i].createSvgFragment(ctxt);\n\t      }fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {}, fragment);\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"svg\", this.getSvgProps(ctxt), fragment);\n\t\n\t      return fragment;\n\t    }\n\t  }, {\n\t    key: \"createSvgNodeForEachLine\",\n\t    value: function createSvgNodeForEachLine(ctxt) {\n\t      var node = [];\n\t\n\t      var top = 0;\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        var lineFragment = [ctxt.defsNode.cloneNode(true), this.lines[i].createSvgNode(ctxt, top)];\n\t        lineFragment[0].appendChild(ctxt.createStyleNode());\n\t        var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createNode(\"g\", {}, lineFragment);\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createNode(\"svg\", {\n\t          xmlns: \"http://www.w3.org/2000/svg\",\n\t          version: \"1.1\",\n\t          class: \"Exsurge ChantScore\",\n\t          width: this.bounds.width,\n\t          height: height,\n\t          viewBox: [0, 0, this.bounds.width, height].join(\" \")\n\t        }, lineFragment);\n\t        node.push(lineFragment);\n\t        top += height;\n\t      }\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgForEachLine\",\n\t    value: function createSvgForEachLine(ctxt) {\n\t      var fragment = \"\",\n\t          fragmentDefs = \"\";\n\t\n\t      // create defs section\n\t      for (var def in ctxt.defs) {\n\t        if (ctxt.defs.hasOwnProperty(def)) fragmentDefs += ctxt.defs[def];\n\t      }fragmentDefs += ctxt.createStyle();\n\t\n\t      fragmentDefs = _ExsurgeDrawing.QuickSvg.createFragment(\"defs\", {}, fragmentDefs);\n\t      var top = 0;\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        var lineFragment = fragmentDefs + this.lines[i].createSvgFragment(ctxt, top);\n\t        var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {}, lineFragment);\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createFragment(\"svg\", {\n\t          xmlns: \"http://www.w3.org/2000/svg\",\n\t          version: \"1.1\",\n\t          \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n\t          class: \"Exsurge ChantScore\",\n\t          width: this.bounds.width,\n\t          height: height\n\t        }, lineFragment);\n\t        fragment += lineFragment;\n\t        top += height;\n\t      }\n\t      return fragment;\n\t    }\n\t  }, {\n\t    key: \"unserializeFromJson\",\n\t    value: function unserializeFromJson(data, ctxt) {\n\t      this.autoColoring = data[\"auto-coloring\"];\n\t\n\t      if (data.annotation !== null && data.annotation !== \"\") {\n\t        // create the annotation\n\t        this.annotation = new _ExsurgeDrawing.Annotation(ctxt, data.annotation);\n\t      } else this.annotation = null;\n\t\n\t      var createDropCap = data[\"drop-cap\"] === \"auto\" ? true : false;\n\t\n\t      _ExsurgeGabc.Gabc.parseChantNotations(data.notations, this, createDropCap);\n\t    }\n\t  }, {\n\t    key: \"serializeToJson\",\n\t    value: function serializeToJson() {\n\t      var data = {};\n\t\n\t      data[\"type\"] = \"score\";\n\t      data[\"auto-coloring\"] = true;\n\t\n\t      if (this.annotation !== null) data.annotation = this.annotation.unsanitizedText;else data.annotation = \"\";\n\t\n\t      return data;\n\t    }\n\t  }]);\n\t\n\t  return ChantScore;\n\t}();\n\t\n\tvar ChantDocument = exports.ChantDocument = function () {\n\t  function ChantDocument() {\n\t    _classCallCheck(this, ChantDocument);\n\t\n\t    var defaults = {\n\t      layout: {\n\t        units: \"mm\",\n\t        \"default-font\": {\n\t          \"font-family\": \"Crimson\",\n\t          \"font-size\": 14\n\t        },\n\t        page: {\n\t          width: 8.5,\n\t          height: 11,\n\t          \"margin-left\": 0,\n\t          \"margin-top\": 0,\n\t          \"margin-right\": 0,\n\t          \"margin-bottom\": 0\n\t        }\n\t      },\n\t      scores: []\n\t    };\n\t\n\t    // default layout\n\t    this.copyLayout(this, defaults);\n\t\n\t    this.scores = defaults.scores;\n\t  }\n\t\n\t  _createClass(ChantDocument, [{\n\t    key: \"copyLayout\",\n\t    value: function copyLayout(to, from) {\n\t      to.layout = {\n\t        units: from.layout.units,\n\t        \"default-font\": {\n\t          \"font-family\": from.layout[\"default-font\"][\"font-family\"],\n\t          \"font-size\": from.layout[\"default-font\"][\"font-size\"]\n\t        },\n\t        page: {\n\t          width: from.layout.page.width,\n\t          height: from.layout.page.height,\n\t          \"margin-left\": from.layout.page[\"margin-left\"],\n\t          \"margin-top\": from.layout.page[\"margin-top\"],\n\t          \"margin-right\": from.layout.page[\"margin-right\"],\n\t          \"margin-bottom\": from.layout.page[\"margin-bottom\"]\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: \"unserializeFromJson\",\n\t    value: function unserializeFromJson(data) {\n\t      this.copyLayout(this, data);\n\t\n\t      this.scores = [];\n\t\n\t      // read in the scores\n\t      for (var i = 0; i < data.scores.length; i++) {\n\t        var score = new ChantScore();\n\t\n\t        score.unserializeFromJson(data.scores[i]);\n\t        this.scores.push(score);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"serializeToJson\",\n\t    value: function serializeToJson() {\n\t      var data = {};\n\t\n\t      this.copyLayout(data, this);\n\t\n\t      data.scores = [];\n\t\n\t      // save scores...\n\t      for (var i = 0; i < this.scores.length; i++) {\n\t        data.scores.push(this.scores[i].serializeToJson());\n\t      }return data;\n\t    }\n\t  }]);\n\n\t  return ChantDocument;\n\t}();\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantLine = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(10);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(11);\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t// a chant line represents one staff line on the page. ChantLines are created by the score\n\t// and laid out by the page\n\tvar ChantLine = exports.ChantLine = function (_ChantLayoutElement) {\n\t  _inherits(ChantLine, _ChantLayoutElement);\n\t\n\t  function ChantLine(score) {\n\t    _classCallCheck(this, ChantLine);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ChantLine.__proto__ || Object.getPrototypeOf(ChantLine)).call(this));\n\t\n\t    _this.score = score;\n\t\n\t    _this.notationsStartIndex = 0;\n\t    _this.numNotationsOnLine = 0;\n\t    _this.notationBounds = null; // Rect\n\t\n\t    _this.staffLeft = 0;\n\t    _this.staffRight = 0;\n\t\n\t    _this.startingClef = null; // necessary for the layout process\n\t    _this.custos = null;\n\t\n\t    _this.justify = true;\n\t\n\t    // these are markings that exist at the chant line level rather than at the neume level.\n\t    _this.ledgerLines = [];\n\t    _this.braces = [];\n\t\n\t    _this.nextLine = null;\n\t    _this.previousLine = null; // for layout assistance\n\t\n\t    _this.lyricLineHeight = 0; // height of each text line\n\t    _this.lyricLineBaseline = 0; // offsets from the top of the text line to the baseline\n\t    _this.numLyricLines = 0; // maximum count of lyrics on the same syllable\n\t\n\t    // fixme: make these configurable values from the score\n\t    _this.spaceAfterNotations = 0; // the space between the notation bounds and the first text track\n\t    _this.spaceBetweenTextTracks = 0; // spacing between each text track\n\t\n\t    _this.lastLyrics = [];\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ChantLine, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // start off with a rectangle that holds at least the four staff lines\n\t      this.notationBounds = new _ExsurgeCore.Rect(this.staffLeft, -(ctxt.staffLineWeight / 2 + 3 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval, this.staffRight - this.staffLeft, (ctxt.staffLineWeight + 6 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval);\n\t\n\t      // run through all the elements of the line and calculate the bounds of the notations,\n\t      // as well as the bounds of each text track we will use\n\t      var i;\n\t      var notations = this.score.notations;\n\t      var lastNeumeIndex = this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      var notation = null;\n\t\n\t      this.notationBounds.union(this.startingClef.bounds);\n\t\n\t      // reset the lyric line offsets before we [re]calculate them now\n\t      this.lyricLineHeight = ctxt.textStyles.lyric.size * 1.1;\n\t      this.lyricLineBaseline = 0;\n\t      this.numLyricLines = 0;\n\t\n\t      this.altLineHeight = 0;\n\t      this.altLineBaseline = 0;\n\t      this.numAltLines = 0;\n\t\n\t      this.translationLineHeight = ctxt.textStyles.translation.size * 1.1;\n\t      this.translationLineBaseline = 0;\n\t      this.numTranslationLines = 0;\n\t\n\t      for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n\t        notation = notations[i];\n\t\n\t        this.notationBounds.union(notation.bounds);\n\t\n\t        // keep track of lyric line offsets\n\t        if (notation.lyrics.length && notation.lyrics[0].text) {\n\t          // if (notation.lyrics[0].bounds.height > this.lyricLineHeight)\n\t          //   this.lyricLineHeight = notation.lyrics[0].bounds.height;\n\t          if (notation.lyrics[0].origin.y > this.lyricLineBaseline) this.lyricLineBaseline = notation.lyrics[0].origin.y;\n\t          if (notation.lyrics.length > this.numLyricLines) this.numLyricLines = notation.lyrics.length;\n\t        }\n\t\n\t        if (notation.alText && this.numAltLines < notation.alText.length) {\n\t          if (notation.alText[0].bounds.height > this.altLineHeight) this.altLineHeight = notation.alText[0].bounds.height;\n\t          if (notation.alText[0].origin.y > this.altLineBaseline) this.altLineBaseline = notation.alText[0].origin.y;\n\t          if (notation.alText.length > this.numAltLines) this.numAltLines = notation.alText.length;\n\t        }\n\t\n\t        if (notation.translationText && notation.translationText[0] && notation.translationText[0].text) {\n\t          // if (\n\t          //   notation.translationText[0].bounds.height > this.translationLineHeight\n\t          // )\n\t          //   this.translationLineHeight =\n\t          //     notation.translationText[0].bounds.height;\n\t          if (notation.translationText[0].origin.y > this.translationLineBaseline) this.translationLineBaseline = notation.translationText[0].origin.y;\n\t          if (notation.translationText.length > this.numTranslationLines) this.numTranslationLines = notation.translationText.length;\n\t        }\n\t      }\n\t\n\t      if (this.custos) this.notationBounds.union(this.custos.bounds);\n\t\n\t      // add any braces to the notationBounds as well\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        this.notationBounds.union(this.braces[i].bounds);\n\t      } // finalize the lyrics placement\n\t      var notationBoundsOffset = this.notationBounds.bottom() + ctxt.minSpaceBelowStaff * ctxt.staffInterval;\n\t      this.lyricLineBaseline += notationBoundsOffset;\n\t      this.translationLineBaseline += notationBoundsOffset;\n\t      this.altLineBaseline += this.notationBounds.y - this.altLineHeight - ctxt.staffInterval * 0.5;\n\t\n\t      for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n\t        notation = notations[i];\n\t        var offset = 0;\n\t        for (var j = 0; j < notation.lyrics.length; j++) {\n\t          notation.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n\t          offset += this.lyricLineHeight;\n\t        }\n\t\n\t        if (notation.translationText) {\n\t          for (j = 0; j < notation.translationText.length; j++) {\n\t            notation.translationText[j].bounds.y = offset + this.translationLineBaseline;\n\t            offset += this.translationLineHeight;\n\t          }\n\t        }\n\t\n\t        if (notation.alText) {\n\t          offset = 0;\n\t          for (j = 0; j < notation.alText.length; j++) {\n\t            notation.alText[j].bounds.y = offset + this.altLineBaseline;\n\t            offset -= ctxt.textStyles.al.size * 1.1;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.extraTextOnlyHeight = 0;\n\t      // handle placement of extra TextOnly elements:\n\t      if (ctxt.useExtraTextOnly) {\n\t        var extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n\t        if (this.extraTextOnlyIndex === null) {\n\t          // even if extraTextOnlyIndex is null, there might be extra lines on the last lyric if it is TextOnly:\n\t          var lastNotation = notations[lastNeumeIndex - 1] || {};\n\t          if (lastNotation.constructor === _ExsurgeChant.ChantLineBreak) lastNotation = notations[lastNeumeIndex - 2];\n\t          if (lastNotation.constructor === _ExsurgeChant.TextOnly && lastNotation.lyrics.length === 1 && lastNotation.lyrics[0].bounds.height > this.lyricLineHeight) {\n\t            this.extraTextOnlyHeight = this.lyricLineHeight;\n\t          }\n\t        } else {\n\t          var lastLyrics = null;\n\t          var xOffset = 0;\n\t          offset = (this.numLyricLines - 1) * this.lyricLineHeight;\n\t          offset += this.numTranslationLines * this.translationLineHeight;\n\t          var extraLines = 0;\n\t          for (i = this.extraTextOnlyIndex; i < lastIndex; i++) {\n\t            notation = notations[i];\n\t            if (!notation.lyrics[extraTextOnlyLyricIndex]) continue;\n\t            lastLyrics = notation.lyrics[extraTextOnlyLyricIndex];\n\t            if (lastLyrics.lineWidth) {\n\t              xOffset = this.staffRight - lastLyrics.lineWidth;\n\t              offset += this.lyricLineHeight;\n\t              extraLines++;\n\t            }\n\t            extraLines += lastLyrics.numLines - 1;\n\t            lastLyrics.bounds.y = offset + this.lyricLineBaseline;\n\t            notation.bounds.x += xOffset;\n\t          }\n\t          this.extraTextOnlyHeight = this.lyricLineHeight * extraLines;\n\t        }\n\t      }\n\t\n\t      if (this.startingClef.hasLyrics()) {\n\t        offset = 0;\n\t        for (j = 0; j < this.startingClef.lyrics.length; j++) {\n\t          this.startingClef.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n\t          offset += this.lyricLineHeight;\n\t        }\n\t      }\n\t\n\t      // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.annotation !== null) {\n\t          // annotations use dominant-baseline to align text to the top\n\t          this.score.annotation.bounds.x = this.staffLeft / 2;\n\t          this.score.annotation.bounds.y = -ctxt.staffInterval * 3;\n\t          if (this.score.dropCap !== null) {\n\t            var lowestPossibleAnnotationY = this.lyricLineBaseline - this.score.annotation.bounds.height - ctxt.staffInterval * ctxt.textStyles.annotation.padding - this.score.dropCap.origin.y;\n\t            // if the annotation would overlap with the drop cap, move the annotation higher.\n\t            // otherwise, center the annotation in the vertical space between the top of the drop cap and the top of the staff.\n\t            if (lowestPossibleAnnotationY < this.score.annotation.bounds.y) {\n\t              this.score.annotation.bounds.y = lowestPossibleAnnotationY;\n\t            } else {\n\t              this.score.annotation.bounds.y = (this.score.annotation.bounds.y + lowestPossibleAnnotationY) / 2;\n\t            }\n\t            if (this.score.annotation.bounds.y < this.notationBounds.y) {\n\t              this.notationBounds.y = this.score.annotation.bounds.y;\n\t              this.notationBounds.height += this.notationBounds.y - this.score.annotation.bounds.y;\n\t            }\n\t          }\n\t          this.score.annotation.bounds.y += this.score.annotation.origin.y;\n\t        }\n\t\n\t        if (this.score.dropCap !== null) {\n\t          // drop caps and annotations are drawn from their center, so aligning them\n\t          // horizontally is as easy as this.staffLeft / 2\n\t          this.score.dropCap.bounds.x = this.staffLeft / 2;\n\t          this.score.dropCap.bounds.y = this.lyricLineBaseline - this.score.dropCap.origin.y;\n\t          this.notationBounds.union(this.score.dropCap.bounds);\n\t          this.score.dropCap.bounds.y = this.lyricLineBaseline;\n\t        }\n\t      }\n\t\n\t      if (this.numLyricLines > 0) {\n\t        // add up the lyric line heights to get the total height of the chant line\n\t        var lyricAndTextRect = new _ExsurgeCore.Rect(0, notationBoundsOffset, 0, this.lyricLineHeight * this.numLyricLines + this.extraTextOnlyHeight + this.translationLineHeight * this.numTranslationLines);\n\t        this.notationBounds.union(lyricAndTextRect);\n\t      }\n\t      if (this.numAltLines > 0) {\n\t        var altLineTextRect = new _ExsurgeCore.Rect(0, this.notationBounds.y - this.altLineHeight - 0.5 * ctxt.staffInterval - ctxt.textStyles.al.size * 1.1 * (this.numAltLines - 1), 0, ctxt.textStyles.al.size * 1.1 * this.numAltLines);\n\t        this.notationBounds.union(altLineTextRect);\n\t      }\n\t      // Ensure that there is at least minSpaceBelowStaff below the lowest staff line:\n\t      this.notationBounds.union(new _ExsurgeCore.Rect(0, 0, 0, (3 + ctxt.staffLineWeight / 2 + ctxt.minSpaceBelowStaff) * ctxt.staffInterval));\n\t      var totalHeight = this.notationBounds.height;\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = this.notationBounds.y;\n\t      this.bounds.width = this.notationBounds.right();\n\t      this.bounds.height = totalHeight;\n\t\n\t      // the origin of the chant line's coordinate space is at the center line of the left extremity of the staff\n\t      this.origin = new _ExsurgeCore.Point(this.staffLeft, -this.notationBounds.y);\n\t    }\n\t\n\t    // TODO: remove if not necsessary\n\t\n\t  }, {\n\t    key: \"layoutInsertionCursor\",\n\t    value: function layoutInsertionCursor(ctxt) {\n\t      if (this.insertionCursor) {\n\t        // we have either a Notation to draw the cursor after, or the ChantLine itself when the cursor is the first thing on the line\n\t        this.insertionCursor.performLayout(ctxt);\n\t        this.insertionCursor.bounds.x = this.score.insertionElement.bounds.right() + (this.score.insertionElement.trailingSpace && this.score.insertionElement.calculatedTrailingSpace || 0) / 2 - this.insertionCursor.origin.x;\n\t      }\n\t      return this.insertionCursor;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      // draw the staff lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight,\n\t          y;\n\t      canvasCtxt.lineWidth = ctxt.staffLineWeight;\n\t      canvasCtxt.strokeStyle = ctxt.staffLineColor;\n\t\n\t      for (i = -3; i <= 3; i += 2) {\n\t        y = ctxt.staffInterval * i;\n\t\n\t        canvasCtxt.beginPath();\n\t        canvasCtxt.moveTo(x1, y);\n\t        canvasCtxt.lineTo(x2, y);\n\t        canvasCtxt.stroke();\n\t      }\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        this.insertionCursor.draw(ctxt);\n\t      }\n\t\n\t      // draw the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        canvasCtxt.beginPath();\n\t        canvasCtxt.moveTo(ledgerLine.x1, y);\n\t        canvasCtxt.lineTo(ledgerLine.x2, y);\n\t        canvasCtxt.stroke();\n\t      }\n\t\n\t      // fixme: draw the braces\n\t\n\t      // draw the dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) this.score.dropCap.draw(ctxt);\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          this.score.annotation.draw(ctxt);\n\t      }\n\t\n\t      // draw the notations\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        notations[i].draw(ctxt);\n\t      }this.startingClef.draw(ctxt);\n\t\n\t      if (this.custos) this.custos.draw(ctxt);\n\t\n\t      canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getInnerNodes\",\n\t    value: function getInnerNodes(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t      var functionNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { quickSvg: \"createNode\", elements: \"createSvgNode\" };\n\t\n\t      var inner = [];\n\t\n\t      // add the chant lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight;\n\t\n\t      if (ctxt.editable) {\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"rect\", {\n\t          key: \"insertion\",\n\t          x: x1,\n\t          y: ctxt.staffInterval * -3,\n\t          width: x2 - x1,\n\t          height: ctxt.staffInterval * 6,\n\t          fill: \"none\"\n\t        }));\n\t      }\n\t\n\t      // create the staff lines\n\t      for (i = -3; i <= 3; i += 2) {\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"line\", {\n\t          key: i,\n\t          x1: x1,\n\t          y1: ctxt.staffInterval * i,\n\t          x2: x2,\n\t          y2: ctxt.staffInterval * i,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"staffLine\"\n\t        }));\n\t      }\n\t\n\t      inner = [_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"g\", { class: \"staffLines\" }, inner)];\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        inner.push(this.insertionCursor[functionNames.elements](ctxt));\n\t      }\n\t\n\t      // create the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"line\", {\n\t          x1: ledgerLine.x1,\n\t          y1: y,\n\t          x2: ledgerLine.x2,\n\t          y2: y,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"ledgerLine\"\n\t        }));\n\t      }\n\t\n\t      // add any braces\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        inner.push(this.braces[i][functionNames.elements](ctxt));\n\t      } // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) inner.push(this.score.dropCap[functionNames.elements](ctxt));\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          inner = inner.concat(this.score.annotation[functionNames.elements](ctxt));\n\t      }\n\t\n\t      inner.push(this.startingClef[functionNames.elements](ctxt));\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // add all of the notations\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        inner.push(notations[i][functionNames.elements](ctxt));\n\t      }if (this.custos) inner.push(this.custos[functionNames.elements](ctxt));\n\t      return inner;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = this.getInnerNodes(ctxt, top, {\n\t        quickSvg: \"createNode\",\n\t        elements: \"createSvgNode\"\n\t      });\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createNode(\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex,\n\t        source: this\n\t      }, inner);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = this.getInnerNodes(ctxt, top, {\n\t        quickSvg: \"createSvgTree\",\n\t        elements: \"createSvgTree\"\n\t      });\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex\n\t      }].concat(_toConsumableArray(inner)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = \"\";\n\t\n\t      // add the chant lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight;\n\t\n\t      // create the staff lines\n\t      for (i = -3; i <= 3; i += 2) {\n\t        inner += _ExsurgeDrawing.QuickSvg.createFragment(\"line\", {\n\t          x1: x1,\n\t          y1: ctxt.staffInterval * i,\n\t          x2: x2,\n\t          y2: ctxt.staffInterval * i,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"staffLine\"\n\t        });\n\t      }\n\t\n\t      inner = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", { class: \"staffLines\" }, inner);\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        inner += this.insertionCursor.createSvgFragment(ctxt);\n\t      }\n\t\n\t      // create the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        inner += _ExsurgeDrawing.QuickSvg.createFragment(\"line\", {\n\t          x1: ledgerLine.x1,\n\t          y1: y,\n\t          x2: ledgerLine.x2,\n\t          y2: y,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"ledgerLine\"\n\t        });\n\t      }\n\t\n\t      // add any braces\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        inner += this.braces[i].createSvgFragment(ctxt);\n\t      } // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) inner += this.score.dropCap.createSvgFragment(ctxt);\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          inner += this.score.annotation.createSvgFragment(ctxt);\n\t      }\n\t\n\t      inner += this.startingClef.createSvgFragment(ctxt);\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // add all of the notations\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        inner += notations[i].createSvgFragment(ctxt);\n\t      }if (this.custos) inner += this.custos.createSvgFragment(ctxt);\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex\n\t      }, inner);\n\t    }\n\t\n\t    // code below based on code by: https://gist.github.com/alexhornbake\n\t    //\n\t    // optimized for braces that are only drawn horizontally.\n\t    // returns svg path string ready to insert into svg doc\n\t\n\t  }, {\n\t    key: \"generateCurlyBraceDrawable\",\n\t    value: function generateCurlyBraceDrawable(ctxt, x1, x2, y, isAbove) {\n\t      var h;\n\t\n\t      if (isAbove) h = -ctxt.staffInterval / 2;else h = ctxt.staffInterval / 2;\n\t\n\t      // and q factor, .5 is normal, higher q = more expressive bracket\n\t      var q = 0.6;\n\t\n\t      var len = x2 - x1;\n\t\n\t      //Calculate Control Points of path,\n\t      var qx1 = x1;\n\t      var qy1 = y + q * h;\n\t      var qx2 = x1 + 0.25 * len;\n\t      var qy2 = y + (1 - q) * h;\n\t      var tx1 = x1 + 0.5 * len;\n\t      var ty1 = y + h;\n\t      var qx3 = x2;\n\t      var qy3 = y + q * h;\n\t      var qx4 = x1 + 0.75 * len;\n\t      var qy4 = y + (1 - q) * h;\n\t      var d = \"M \" + x1 + \" \" + y + \" Q \" + qx1 + \" \" + qy1 + \" \" + qx2 + \" \" + qy2 + \" T \" + tx1 + \" \" + ty1 + \" M \" + x2 + \" \" + y + \" Q \" + qx3 + \" \" + qy3 + \" \" + qx4 + \" \" + qy4 + \" T \" + tx1 + \" \" + ty1;\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"path\", {\n\t        d: d,\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.neumeLineWeight + \"px\",\n\t        fill: \"none\"\n\t      });\n\t    }\n\t  }, {\n\t    key: \"buildFromChantNotationIndex\",\n\t    value: function buildFromChantNotationIndex(ctxt, newElementStart, width) {\n\t      // todo: reset / clear the children we have in case they have data\n\t      var notations = this.score.notations,\n\t          beginningLyrics = null,\n\t          prev = null,\n\t          prevNeume = null,\n\t          prevLyrics = [];\n\t      var condensableSpaces = [];\n\t      this.notationsStartIndex = newElementStart;\n\t      this.numNotationsOnLine = 0;\n\t\n\t      this.staffLeft = 0;\n\t      this.paddingLeft = 0;\n\t\n\t      this.extraTextOnlyIndex = null;\n\t      this.extraTextOnlyLyricIndex = 0;\n\t\n\t      if (width > 0) this.staffRight = width;else this.staffRight = Infinity; // no limit to staff size\n\t\n\t      // If this is the first chant line, then we have to make room for a\n\t      // drop cap and/or annotation, if present\n\t      if (this.notationsStartIndex === 0) {\n\t        var padding = 0;\n\t\n\t        if (this.score.dropCap !== null) padding = this.score.dropCap.bounds.width + this.score.dropCap.padding * 2;\n\t\n\t        if (this.score.annotation !== null && (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)) padding = Math.max(padding, this.score.annotation.bounds.width + this.score.annotation.padding * 2);\n\t\n\t        this.staffLeft += padding;\n\t        if (this.score.dropCap !== null) this.paddingLeft = (padding - this.score.dropCap.bounds.width) / 2;\n\t      } else {\n\t        prev = notations[newElementStart - 1];\n\t        if (prev.constructor === _ExsurgeChantSigns.DoubleBar && prev.hasLyrics() && (prev.lyrics.length > 1 || !prev.lyrics[0].text.match(/^(i\\.?)+j\\.?/))) {\n\t          beginningLyrics = prev.lyrics.map(function (lyric) {\n\t            var newLyric = new _ExsurgeDrawing.Lyric(ctxt, lyric.originalText, lyric.lyricType, lyric.notation, lyric.notations, lyric.sourceIndex);\n\t            newLyric.elidesToNext = lyric.elidesToNext;\n\t            // Hide the original lyric by setting its bounds.y to an extremely high number.\n\t            // If the chant is re-laid out, this value will be recalculated so that it won't stay hidden.\n\t            lyric.bounds.y = Number.MAX_SAFE_INTEGER;\n\t            return newLyric;\n\t          });\n\t          var minX = beginningLyrics.map(function (l) {\n\t            return l.bounds.x;\n\t          }).reduce(function (a, b) {\n\t            return a < b ? a : b;\n\t          });\n\t          beginningLyrics.forEach(function (l) {\n\t            l.bounds.x -= minX;\n\t          });\n\t        }\n\t      }\n\t\n\t      // set up the clef...\n\t      // if the first notation on the line is a starting clef, then we treat it a little differently...\n\t      // the clef becomes this line's starting clef and we skip over the clef in the notations array\n\t      if (notations.length && notations[newElementStart].isClef) {\n\t        ctxt.activeClef = notations[newElementStart];\n\t        newElementStart++;\n\t        this.notationsStartIndex++;\n\t      }\n\t\n\t      // make a copy for this line to use at the beginning\n\t      this.startingClef = ctxt.activeClef.clone();\n\t      this.startingClef.performLayout(ctxt);\n\t      this.startingClef.bounds.x = this.staffLeft;\n\t\n\t      var curr = this.startingClef;\n\t\n\t      if (beginningLyrics) {\n\t        _ExsurgeDrawing.LyricArray.setNotation(beginningLyrics, curr);\n\t      }\n\t\n\t      // estimate how much space we have available to us\n\t      var rightNotationBoundary = this.staffRight - _ExsurgeGlyphs.Glyphs.CustosLong.bounds.width * ctxt.glyphScaling; // possible custos on the line\n\t      var lastTranslationTextWithEndNeume = null;\n\t\n\t      // iterate through the notations, fittng what we can on this line\n\t      var i,\n\t          j,\n\t          lastNotationIndex = notations.length - 1;\n\t\n\t      if (curr.hasLyrics()) _ExsurgeDrawing.LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\t\n\t      // if we already have a start brace on the context, we must be continuing it from the previous system.\n\t      if (ctxt.lastStartBrace && !ctxt.lastStartBrace.note) {\n\t        ctxt.lastStartBrace.note = this.startingClef;\n\t      }\n\t      var lastLyricsBeforeTextOnly;\n\t      var textOnlyStartIndex;\n\t\n\t      for (i = newElementStart; i <= lastNotationIndex; i++) {\n\t        prev = curr;\n\t        if (curr.constructor !== _ExsurgeChant.TextOnly) prevNeume = curr;\n\t\n\t        curr = notations[i];\n\t\n\t        var actualRightBoundary;\n\t        if (i === lastNotationIndex || curr.constructor === _ExsurgeChantSigns.Custos || prev.constructor === _ExsurgeChantSigns.Custos && curr.isDivider || curr.constructor === _ExsurgeChant.ChantLineBreak && prevNeume.constructor === _ExsurgeChantSigns.Custos) {\n\t          // on the last notation of the score, we don't need a custos or trailing space, so we use staffRight as the\n\t          // right boundary.\n\t          // Also, if the current notation is a divider and the previous was a custos, we don't need extra space\n\t          // because if the following notation won't fit, we can switch the order and use the custos as the end-of-the-line custos\n\t          // Ditto in the case of the current element being a chant line break and the previous neume a custos, because that custos will become our end-of-line custos\n\t          actualRightBoundary = this.staffRight;\n\t        } else if (i === lastNotationIndex - 1) {\n\t          // on the penultimate notation, make sure there is at least enough room for whichever takes up less space,\n\t          // between the final notation and a custos:\n\t          actualRightBoundary = Math.max(rightNotationBoundary, this.staffRight - notations[lastNotationIndex].bounds.width);\n\t        } else {\n\t          // Otherwise, we use rightNotationBoundary, which leaves room for a custos...\n\t          actualRightBoundary = rightNotationBoundary;\n\t        }\n\t\n\t        // First check if we're already beyond the rightNotationBoundary (due to condensing that hasn't yet happened) and have a good element to end with\n\t        // but if we have 2 or fewer elements, or if the current element is a line break or a custos, we'll go ahead and try for them anyway.\n\t        var forceBreak = !curr.isDivider && curr.constructor !== _ExsurgeChant.ChantLineBreak && curr.constructor !== _ExsurgeChantSigns.Custos && !(curr.constructor === _ExsurgeChant.TextOnly && curr.hasLyrics() && /^(?:[*†]|i+j\\.?)$/.test(curr.lyrics[0].text)) && lastNotationIndex - i > 1 && !prevNeume.keepWithNext && prevNeume.bounds.right() >= rightNotationBoundary;\n\t\n\t        // also force a break if we've run into extra TextOnly elements, but the current notation is not a TextOnly and has lyrics\n\t        forceBreak = forceBreak || this.extraTextOnlyIndex !== null && curr.constructor !== _ExsurgeChant.TextOnly && curr.constructor !== _ExsurgeChant.ChantLineBreak && curr.constructor !== _ExsurgeChantSigns.Custos && curr.hasLyrics();\n\t\n\t        if (curr instanceof _ExsurgeChant.TextOnly && prev === prevNeume) {\n\t          lastLyricsBeforeTextOnly = this.lastLyrics.slice();\n\t          textOnlyStartIndex = i;\n\t        }\n\t        if (curr instanceof _ExsurgeChant.TextOnly && notations[textOnlyStartIndex] && !notations[textOnlyStartIndex].hasLyrics()) {\n\t          // we want textOnlyStartIndex to be the first TextOnly that actually has lyrics,\n\t          // so if the current \"textOnlyStart\" element does not have lyrics, and we have another textOnly\n\t          // that does have lyrics, we will use it instead\n\t          textOnlyStartIndex = i;\n\t        }\n\t\n\t        if (curr.hasLyrics() && curr.lyrics[0].needsLayout) {\n\t          curr.lyrics[0].recalculateMetrics(ctxt);\n\t        }\n\t\n\t        // try to fit the curr element on this line.\n\t        // if it doesn't fit, we finish up here.\n\t        var fitsOnLine = !forceBreak && this.positionNotationElement(ctxt, this.lastLyrics, prevNeume, curr, actualRightBoundary, this.extraTextOnlyIndex ? [] : condensableSpaces // no spaces are condensable once we are on extra text only lyrics\n\t        );\n\t        var candidateForExtraTextOnlyLine = ctxt.useExtraTextOnly && curr.constructor === _ExsurgeChant.TextOnly && _ExsurgeDrawing.LyricArray.hasOnlyOneLyric(curr.lyrics) && (fitsOnLine === false || this.extraTextOnlyIndex !== null);\n\t        var extraTextOnlyLyricIndex;\n\t        if (candidateForExtraTextOnlyLine && this.extraTextOnlyIndex === null) {\n\t          // check to make sure there is enough text to put on the text only line:\n\t          extraTextOnlyLyricIndex = _ExsurgeDrawing.LyricArray.indexOfLyric(curr.lyrics);\n\t          if (textOnlyStartIndex === i) {\n\t            var currentLyric = notations[i].lyrics[extraTextOnlyLyricIndex].text;\n\t            if (currentLyric.length <= 1) {\n\t              var nextNotation = notations[i + 1];\n\t              candidateForExtraTextOnlyLine = nextNotation && nextNotation.constructor === _ExsurgeChant.TextOnly && nextNotation.lyrics[extraTextOnlyLyricIndex] && nextNotation.lyrics[extraTextOnlyLyricIndex].text.length > 0;\n\t            }\n\t          }\n\t        }\n\t        if (candidateForExtraTextOnlyLine) {\n\t          // a special case for TextOnly elements that don't fit on the line: since they don't have neumes associated with them, we can place this\n\t          // and any additional TextOnly elements just below the current lyric lines, but we can only do this if the TextOnly elements have only one\n\t          // line of lyrics associated with them.\n\t          var firstOnLine;\n\t          extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n\t          if (this.extraTextOnlyIndex === null && notations[textOnlyStartIndex].lyrics.length) {\n\t            if (textOnlyStartIndex === this.notationsStartIndex || !ctxt.startExtraTextOnlyFromFirst) {\n\t              textOnlyStartIndex = i;\n\t              var lastNotationWithLyrics = notations.slice(this.notationsStartIndex, i).reverse().find(function (notation) {\n\t                return notation.hasLyrics();\n\t              });\n\t              lastLyricsBeforeTextOnly = lastNotationWithLyrics && lastNotationWithLyrics.lyrics.slice() || [];\n\t            }\n\t            // go back to the first in this string of consecutive TextOnly elements.\n\t            this.extraTextOnlyIndex = textOnlyStartIndex;\n\t            extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex = _ExsurgeDrawing.LyricArray.indexOfLyric(curr.lyrics);\n\t            this.lastLyricsBeforeTextOnly = lastLyricsBeforeTextOnly;\n\t            this.lastLyrics = [];\n\t            i = textOnlyStartIndex - 1;\n\t            this.numNotationsOnLine = textOnlyStartIndex - this.notationsStartIndex;\n\t            continue;\n\t          }\n\t          delete curr.lyrics[extraTextOnlyLyricIndex].lineWidth;\n\t          if (!fitsOnLine || i === this.extraTextOnlyIndex) {\n\t            curr.bounds.x = curr.lyrics[extraTextOnlyLyricIndex].origin.x;\n\t            var lastLyricRight = ctxt.startExtraTextOnlyFromFirst ? _ExsurgeDrawing.LyricArray.getRight(this.lastLyrics) + (ctxt.minLyricWordSpacing || 0) : 0;\n\t            curr.lyrics[extraTextOnlyLyricIndex].setMaxWidth(ctxt, this.staffRight, this.staffRight - lastLyricRight);\n\t            firstOnLine = curr;\n\t          }\n\t          if (firstOnLine) firstOnLine.lyrics[extraTextOnlyLyricIndex].lineWidth = curr.lyrics[extraTextOnlyLyricIndex].getRight();\n\t        } else if (fitsOnLine === false) {\n\t          var isTextOnlyBeforeDivider = function isTextOnlyBeforeDivider(i) {\n\t            var curr = notations[i];\n\t            if (curr.constructor !== _ExsurgeChant.TextOnly) return false;\n\t            var firstDivider = notations.slice(i + 1).findIndex(function (notation) {\n\t              return notation.isDivider;\n\t            });\n\t            if (firstDivider < 0) return false;\n\t            return notations.slice(i + 1, i + 1 + firstDivider).every(function (notation) {\n\t              return notation.constructor === _ExsurgeChant.TextOnly;\n\t            });\n\t          };\n\t          // first check for elements that cannot begin a system: dividers and custodes\n\t          while (this.numNotationsOnLine > 1 && (curr.isDivider || curr.constructor === _ExsurgeChantSigns.Custos || isTextOnlyBeforeDivider(i))) {\n\t            curr = notations[--i];\n\t            this.numNotationsOnLine--;\n\t            if (this.lastLyricsBeforeTextOnly && isTextOnlyBeforeDivider(i)) {\n\t              delete this.lastLyricsBeforeTextOnly;\n\t            }\n\t          }\n\t\n\t          if (lastTranslationTextWithEndNeume) {}\n\t          // console.info(notations[i - 1], lastTranslationTextWithEndNeume);\n\t          // TODO?: need to go back to before the last translation text start:\n\t\n\t\n\t          // count syllables and notes\n\t          var notationsAfterBreak = notations.slice(i + 1);\n\t          var countSyllables = 0;\n\t          var countNotes = 0;\n\t          if (ctxt.minSyllablesLastLine && ctxt.minNotesLastLine) {\n\t            countSyllables = notationsAfterBreak.filter(function (notation) {\n\t              return notation.hasLyrics();\n\t            }).length;\n\t            countNotes = notationsAfterBreak.flatMap(function (notation) {\n\t              return notation.notes;\n\t            }).filter(function (note) {\n\t              return !!note;\n\t            }).length;\n\t          }\n\t\n\t          // check if the prev elements want to be kept with this one\n\t          for (j = i - 1; j > this.notationsStartIndex; j--) {\n\t            var cne = notations[j];\n\t            curr = notations[j + 1];\n\t\n\t            // curr is the first notation on the next line\n\t            // cne is the last notation on this line\n\t            if (ctxt.minSyllablesLastLine && ctxt.minNotesLastLine) {\n\t              countSyllables += curr.hasLyrics() ? 1 : 0;\n\t              countNotes += (curr.notes || []).length;\n\t            }\n\t\n\t            if (cne.firstWithNoWidth) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            // don't let a line break occur in the middle of a translation\n\t            if (lastTranslationTextWithEndNeume) {\n\t              this.numNotationsOnLine--;\n\t              if (cne === lastTranslationTextWithEndNeume) {\n\t                lastTranslationTextWithEndNeume = null;\n\t              }\n\t              continue;\n\t            }\n\t\n\t            // force any notations starting with a quilisma or inclinatum (diamond) to be kept with the previous notation:\n\t            if (curr && curr.notes && (curr.notes[0].shape === _ExsurgeChant.NoteShape.Quilisma || curr.notes[0].shape === _ExsurgeChant.NoteShape.Inclinatum)) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            if (countSyllables < ctxt.minSyllablesLastLine && countNotes < ctxt.minNotesLastLine) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            // if the line break is allowed (cne.allowLineBreakBeforeNext), keep this number of notations around so we can check during justification\n\t            // whether there would be too much space introduced between\n\t            if (cne.keepWithNext === true) {\n\t              if (cne.allowLineBreakBeforeNext && !this.maxNumNotationsOnLine) this.maxNumNotationsOnLine = this.numNotationsOnLine;\n\t              this.numNotationsOnLine--;\n\t            } else break;\n\t          }\n\t          if (this.extraTextOnlyIndex && this.notationsStartIndex + this.numNotationsOnLine <= this.extraTextOnlyIndex) {\n\t            // we've cut back to before the extra text only index, so we have to remove it:\n\t            this.extraTextOnlyIndex = null;\n\t          }\n\t\n\t          // if for some reason not a single notation can fit on the line, we'd better put it on anyway, to avoid an infinite loop:\n\t          if (this.numNotationsOnLine === 0) this.numNotationsOnLine = 1;\n\t\n\t          // determine the neumes we can space apart, if we do end up justifying\n\t          curr = this.findNeumesToJustify(prevLyrics);\n\t\n\t          this.lastLyrics = prevLyrics;\n\t          if (this.maxNumNotationsOnLine) {\n\t            // Check whether we should squeeze some extra notations on the line to avoid too much space after justification:\n\t            // Check how much space we would have without the extra notations\n\t            var extraSpace = this.getWhitespaceOnRight(ctxt);\n\t            if (extraSpace / this.toJustify.length > ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals) {\n\t              _ExsurgeDrawing.LyricArray.mergeInArray(prevLyrics, notations.slice(this.notationsStartIndex + this.numNotationsOnLine, this.notationsStartIndex + this.maxNumNotationsOnLine));\n\t              this.numNotationsOnLine = this.maxNumNotationsOnLine;\n\t              delete this.maxNumNotationsOnLine;\n\t            }\n\t          }\n\t\n\t          // if the next line begins with a fresh word, than there can be extra space between the last notation on this line and the custos:\n\t          var next = this.score.notations[this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex];\n\t          if (next && next.hasLyrics() && (next.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable || next.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.SingleSyllable)) {\n\t            this.toJustify.push(this.custos);\n\t          }\n\t\n\t          if (j >= 1 && notations[j].isDivider && notations[j - 1].constructor === _ExsurgeChantSigns.Custos) {\n\t            // reverse the order: put the divider first, and end the line with the custos.\n\t            prevLyrics = [];\n\t            for (i = j - 2; i >= this.notationsStartIndex; i--) {\n\t              if (notations[i].hasLyrics()) {\n\t                _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, notations[i].lyrics);\n\t                break;\n\t              }\n\t            }\n\t            // remove the custos and divider from the condensable spaces list, before adding the divider back, when repositioning it.\n\t            condensableSpaces.sum -= condensableSpaces.pop().condensable;\n\t            condensableSpaces.sum -= condensableSpaces.pop().condensable;\n\t            this.positionNotationElement(ctxt, prevLyrics, notations[j - 2], notations[j], this.staffRight, condensableSpaces);\n\t            this.custos = notations[j - 1];\n\t            this.custos.bounds.x = this.staffRight - this.custos.bounds.width - this.custos.leadingSpace;\n\t          }\n\t\n\t          // we are at the end of the line!\n\t          break;\n\t        }\n\t\n\t        if (curr.hasLyrics()) _ExsurgeDrawing.LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\t\n\t        if (lastTranslationTextWithEndNeume && curr === lastTranslationTextWithEndNeume.translationText[0].endNeume) {\n\t          lastTranslationTextWithEndNeume = null;\n\t        } else if (curr.translationText && curr.translationText.length && curr.translationText[0].endNeume) {\n\t          lastTranslationTextWithEndNeume = curr;\n\t        }\n\t\n\t        curr.line = this;\n\t        this.numNotationsOnLine++;\n\t\n\t        if (curr.isClef) ctxt.activeClef = curr;\n\t\n\t        // line breaks are a special case indicating to stop processing here\n\t        if (curr.constructor === _ExsurgeChant.ChantLineBreak && width > 0) {\n\t          this.justify = curr.justify || this.extraTextOnlyIndex !== null || this.getWhitespaceOnRight(ctxt) < 0;\n\t          if (this.justify) this.findNeumesToJustify(prevLyrics);\n\t          break;\n\t        }\n\t\n\t        if (curr.constructor === _ExsurgeChantSigns.Custos) {\n\t          this.custos = curr;\n\t        } else if (curr.isNeume) {\n\t          this.custos = null;\n\t        }\n\t      }\n\t\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine - 1;\n\t      var last = notations[lastIndex] || {};\n\t      while (lastIndex > 0 && (last.constructor === _ExsurgeChant.ChantLineBreak || last.constructor === _ExsurgeChantSigns.Custos || last.constructor === _ExsurgeChant.TextOnly)) {\n\t        last = notations[--lastIndex];\n\t      }\n\t      var isLastLine = this.notationsStartIndex + this.numNotationsOnLine === notations.length;\n\t      if (this.justify && this.extraTextOnlyIndex !== null || width > 0 && isLastLine) {\n\t        // this is the last chant line, or it has extra TextOnly elements at the end\n\t        if (!this.toJustify) this.findNeumesToJustify(prevLyrics);\n\t        this.justify = (!isLastLine || last.isDivider) && this.getWhitespaceOnRight(ctxt) / (this.toJustify.length || 1) <= ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals;\n\t      }\n\t\n\t      if (!this.custos) {\n\t        // create the automatic custos at the end of the line if there are neumes left in the notations\n\t        for (i = this.notationsStartIndex + this.numNotationsOnLine; i < notations.length; i++) {\n\t          var notation = notations[i];\n\t\n\t          if (notation.isNeume) {\n\t            this.custos = new _ExsurgeChantSigns.Custos(true);\n\t            ctxt.currNotationIndex = i - 1; // make sure the context knows where the custos is\n\t            this.custos.performLayout(ctxt);\n\t\n\t            if (this.justify) {\n\t              // Put the custos at the very end of the line\n\t              this.custos.bounds.x = this.staffRight - this.custos.bounds.width - this.custos.leadingSpace;\n\t            } else {\n\t              this.custos.bounds.x = prevNeume.bounds.right() + prevNeume.calculatedTrailingSpace;\n\t            }\n\t            // nothing more to see here...\n\t            break;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.lastLyricsBeforeTextOnly) {\n\t        this.lastLyrics = this.lastLyricsBeforeTextOnly;\n\t        delete this.lastLyricsBeforeTextOnly;\n\t      }\n\t\n\t      // find the final lyric and mark it as connecting if needed.\n\t      if (width > 0) {\n\t        var whitespace = this.getWhitespaceOnRight();\n\t        var rightEdge = this.staffRight;\n\t        if (whitespace < 0) {\n\t          rightEdge -= whitespace;\n\t        }\n\t      }\n\t      i = 0;\n\t      while (this.lastLyrics && this.lastLyrics[i]) {\n\t        var lyrics = this.lastLyrics[i];\n\t        if (lyrics.allowsConnector()) {\n\t          lyrics.setNeedsConnector(true, 0);\n\t          if (width > 0 && ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n\t            whitespace = rightEdge - lyrics.getRight();\n\t            // shrink the hyphen if we are already out of whitespace or if we would be if we used a regular hyphen:\n\t            if (whitespace < 0) {\n\t              var minHyphenWidth = Math.max(ctxt.hyphenWidth + whitespace, this.lastLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing);\n\t              // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t              lyrics.setConnectorWidth(minHyphenWidth);\n\t            }\n\t          }\n\t        }\n\t        ++i;\n\t      }\n\t\n\t      // if the provided width is less than zero, then set the width of the line\n\t      // based on the last notation\n\t      if (width <= 0) {\n\t        this.staffRight = notations[this.notationsStartIndex + this.numNotationsOnLine - 1].bounds.right();\n\t        this.justify = false;\n\t      }\n\t\n\t      // Justify the line if we need to\n\t      this.justifyElements(ctxt, this.justify, condensableSpaces);\n\t\n\t      this.centerDividers();\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }, {\n\t    key: \"centerDividers\",\n\t    value: function centerDividers() {\n\t      var lastIndex = this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex,\n\t          curr;\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        curr = this.score.notations[i];\n\t\n\t        if (curr && curr.isDivider) {\n\t          var j = 1;\n\t          var prev = this.score.notations[i - 1];\n\t          var next = i + 1 === lastIndex ? this.custos : this.score.notations[i + 1];\n\t          if (prev === next && next === this.custos) {\n\t            prev = this.score.notations[i - 2];\n\t            // force custos to right edge in this case, since it is a custos that exists\n\t            // regardless of line break, and would normally be before the double bar, but in this case it ends the line:\n\t            next.bounds.x = this.staffRight - next.bounds.width;\n\t          }\n\t          if (prev && next) {\n\t            //if (prev instanceof TextOnly || next instanceof TextOnly) continue;\n\t            var oldBoundsX = curr.bounds.x;\n\t            var barWidth = curr.bounds.width;\n\t            var leftPoint = prev instanceof _ExsurgeChant.TextOnly && prev.hasLyrics() ? prev.lyrics[0].getRight() : prev.bounds.right(),\n\t                rightPoint = next instanceof _ExsurgeChant.TextOnly && next.hasLyrics() ? next.lyrics[0].getLeft() : next.bounds.x;\n\t            if (prev instanceof _ExsurgeChant.TextOnly) {\n\t              var _prev = this.score.notations.slice(this.notationsStartIndex, i).reverse().find(function (notation) {\n\t                return !(notation instanceof _ExsurgeChant.TextOnly);\n\t              });\n\t              leftPoint = _prev ? _prev.bounds.right() : 0;\n\t            }\n\t            if (leftPoint) {\n\t              curr.bounds.x = (leftPoint + rightPoint - barWidth) / 2;\n\t            }\n\t            if (curr.hasLyrics()) {\n\t              var offset = oldBoundsX - curr.bounds.x;\n\t              for (j = curr.lyrics.length - 1; j >= 0; j--) {\n\t                curr.lyrics[j].bounds.x += offset;\n\t                curr.lyrics[j].needsLayout = true;\n\t              }\n\t            }\n\t          } else if (i === lastIndex - 1 && this.justify && (curr.constructor === _ExsurgeChantSigns.DoubleBar || curr.constructor === _ExsurgeChantSigns.FullBar)) {\n\t            curr.bounds.x = this.staffRight - curr.bounds.width;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"findNeumesToJustify\",\n\t    value: function findNeumesToJustify(prevLyrics) {\n\t      this.toJustify = [];\n\t      var prev,\n\t          curr = null,\n\t          next = null,\n\t          nextOrCurr = null,\n\t          lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        prev = nextOrCurr;\n\t        curr = this.score.notations[i];\n\t        next = curr.isAccidental && this.score.notations[++i];\n\t        nextOrCurr = next || curr;\n\t        var hasLyrics = nextOrCurr.hasLyrics();\n\t\n\t        if (!curr || !prev) continue;\n\t\n\t        if (this.extraTextOnlyIndex !== null && i >= this.extraTextOnlyIndex && curr.constructor === _ExsurgeChant.TextOnly) continue;\n\t\n\t        if (prev !== null) {\n\t          _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, prev.lyrics);\n\t          if (prev.keepWithNext === true) continue;\n\t        }\n\t\n\t        if (!curr.isDivider && prevLyrics.length && prevLyrics[0].allowsConnector() && hasLyrics) continue;\n\t\n\t        if (nextOrCurr.constructor === _ExsurgeChant.ChantLineBreak) continue;\n\t\n\t        if (nextOrCurr === this.custos && !hasLyrics) continue;\n\t\n\t        if (i === 0 && this.score.useDropCap && hasLyrics) continue;\n\t\n\t        // otherwise, we can add space before this element\n\t        this.toJustify.push(curr);\n\t      }\n\t      if (nextOrCurr !== null) _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, nextOrCurr.lyrics);\n\t      return nextOrCurr;\n\t    }\n\t  }, {\n\t    key: \"getWhitespaceOnRight\",\n\t    value: function getWhitespaceOnRight(ctxt) {\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      var last = notations[lastIndex - 1];\n\t      if (this.extraTextOnlyIndex !== null && last.constructor === _ExsurgeChant.TextOnly) {\n\t        lastIndex = this.extraTextOnlyIndex;\n\t        last = notations[lastIndex - 1];\n\t      }\n\t      var lastRightNeume = last ? last.bounds.right() + last.calculatedTrailingSpace : 0;\n\t      var lastLyrics = this.lastLyricsBeforeTextOnly || this.lastLyrics;\n\t      var lastRightLyric = lastLyrics.length ? _ExsurgeDrawing.LyricArray.getRight(lastLyrics) : 0;\n\t\n\t      if (this.custos) {\n\t        lastRightNeume += this.custos.bounds.width + this.custos.leadingSpace;\n\t        if (this.custos.hasLyrics()) {\n\t          lastRightLyric = _ExsurgeDrawing.LyricArray.getRight(this.custos.lyrics);\n\t        }\n\t      } else if (ctxt && lastIndex < notations.length) {\n\t        lastRightNeume += _ExsurgeGlyphs.Glyphs.CustosLong.bounds.width * ctxt.glyphScaling;\n\t      }\n\t      return this.staffRight - Math.max(lastRightLyric, lastRightNeume);\n\t    }\n\t  }, {\n\t    key: \"justifyElements\",\n\t    value: function justifyElements(ctxt, doJustify, condensableSpaces) {\n\t      var i;\n\t      var toJustify = this.toJustify || [];\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // if it wasn't an ideal line break, and the last note is further from the custos than it would have been from its next punctum,\n\t      // move the custos over.\n\t      // We do this first so that if it opens up any new whitespace, that gets accounted for when we do the justification\n\t      var lastNotation = notations[this.notationsStartIndex + this.numNotationsOnLine - 1];\n\t      var extraSpaceBeforeCustos = this.staffRight < Infinity && this.custos && lastNotation.keepWithNext && this.custos.bounds.x - lastNotation.bounds.right() - lastNotation.calculatedTrailingSpace;\n\t      if (extraSpaceBeforeCustos > 0) {\n\t        // first, shrink the hyphen(s) if applicable, to move the neumes closer to the custos:\n\t        i = 0;\n\t        while (this.lastLyrics && this.lastLyrics[i]) {\n\t          var lyrics = this.lastLyrics[i];\n\t          if (lyrics.allowsConnector()) {\n\t            var connectorWidth = lyrics.getConnectorWidth();\n\t            if (ctxt.minLyricWordSpacing < connectorWidth) {\n\t              var minHyphenWidth = Math.max(connectorWidth - extraSpaceBeforeCustos, this.lastLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing);\n\t              // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t              lyrics.setConnectorWidth(minHyphenWidth);\n\t            }\n\t          }\n\t          ++i;\n\t        }\n\t        this.custos.bounds.x = lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n\t      }\n\t\n\t      // first step of justification is to determine how much space we have to use up\n\t      var extraSpace = this.getWhitespaceOnRight();\n\t\n\t      if (Math.abs(extraSpace) < 0.5 || extraSpace > 0 && (doJustify && toJustify.length === 0 || !doJustify)) return;\n\t\n\t      this.condensableSpaces = condensableSpaces;\n\t\n\t      var curr, prev;\n\t      var offset = 0;\n\t      var increment = extraSpace / toJustify.length;\n\t      var multiplier = 0;\n\t      var toJustifyIndex = 0;\n\t      if (extraSpace < 0) {\n\t        toJustify = condensableSpaces.filter(function (s) {\n\t          return s.condensable > 0;\n\t        });\n\t        multiplier = extraSpace / condensableSpaces.sum;\n\t        increment = 0;\n\t      }\n\t      var nextToJustify = toJustify[toJustifyIndex++];\n\t      var incrementOffsetAtNextChance = false;\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        prev = curr;\n\t        curr = notations[i];\n\t\n\t        if (this.extraTextOnlyIndex !== null && i >= this.extraTextOnlyIndex && curr.constructor === _ExsurgeChant.TextOnly) {\n\t          continue;\n\t        }\n\t\n\t        if (!multiplier && curr === this.custos) {\n\t          if (curr.hasLyrics()) {\n\t            curr.bounds.x = Math.min(curr.bounds.x + (this.staffRight - _ExsurgeDrawing.LyricArray.getRight(curr.lyrics)), this.staffRight - curr.bounds.width);\n\t            offset += increment;\n\t          } else {\n\t            curr.bounds.x = Math.min(curr.bounds.x + offset, this.staffRight - curr.bounds.width);\n\t          }\n\t          continue;\n\t        }\n\t\n\t        if (multiplier) {\n\t          if (nextToJustify && nextToJustify.notation === curr) {\n\t            offset += multiplier * nextToJustify.condensable;\n\t            nextToJustify = toJustify[toJustifyIndex++];\n\t          }\n\t        } else if (nextToJustify === curr) {\n\t          if (prev.hasNoWidth) {\n\t            incrementOffsetAtNextChance = true;\n\t          } else {\n\t            offset += increment;\n\t          }\n\t          nextToJustify = toJustify[toJustifyIndex++];\n\t        } else if (incrementOffsetAtNextChance && !prev.hasNoWidth) {\n\t          incrementOffsetAtNextChance = false;\n\t          offset += increment;\n\t        }\n\t\n\t        curr.bounds.x += offset;\n\t      }\n\t\n\t      if (extraSpaceBeforeCustos > 0) {\n\t        this.custos.bounds.x = lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"handleEndBrace\",\n\t    value: function handleEndBrace(ctxt, note, i) {\n\t      var startBrace = ctxt.lastStartBrace;\n\t      if (!startBrace) return;\n\t      // calculate the y value of the brace by iterating over all notations\n\t      // under/over the brace.\n\t      var y;\n\t      var k = startBrace.notationIndex;\n\t      var notations = this.score.notations;\n\t      var dy = ctxt.intraNeumeSpacing / 2; // some safe space between brace and notes.\n\t      var startNote = startBrace.note;\n\t\n\t      if (startBrace.isAbove) {\n\t        y = Math.min.apply(Math, [ctxt.calculateHeightFromStaffPosition(4)].concat(_toConsumableArray([startNote, note].concat(notations.slice(k, i + 1)).map(function (n) {\n\t          return n.bounds.y - dy;\n\t        }))));\n\t      } else {\n\t        y = Math.max.apply(Math, [ctxt.calculateHeightFromStaffPosition(-4)].concat(_toConsumableArray([startNote, note].concat(notations.slice(k, i + 1)).map(function (n) {\n\t          return n.bounds.bottom() + dy;\n\t        }))));\n\t      }\n\t\n\t      var addAcuteAccent = false;\n\t\n\t      if (startBrace.shape === _ExsurgeChantMarkings.BraceShape.RoundBrace) {\n\t        this.braces.push(new _ExsurgeDrawing.RoundBraceVisualizer(ctxt, startBrace.getAttachmentX(startNote), note.braceEnd.getAttachmentX(note), y, startBrace.isAbove));\n\t      } else {\n\t        if (startBrace.shape === _ExsurgeChantMarkings.BraceShape.AccentedCurlyBrace) addAcuteAccent = true;\n\t\n\t        this.braces.push(new _ExsurgeDrawing.CurlyBraceVisualizer(ctxt, startBrace.getAttachmentX(startNote), note.braceEnd.getAttachmentX(note), y, startBrace.isAbove, addAcuteAccent));\n\t      }\n\t\n\t      delete ctxt.lastStartBrace;\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      var _this2 = this;\n\t\n\t      this.ledgerLines = []; // clear any existing ledger lines\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // an element needs to have a staffPosition property, as well as the standard\n\t      // bounds property. so it could be a note, or it could be a custos\n\t      // offsetX can be used to add to the position info for the element,\n\t      // useful in the case of notes.\n\t      var processElementForLedgerLine = function processElementForLedgerLine(element) {\n\t        var endElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : element;\n\t        var staffPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : element.staffPosition;\n\t        var offsetX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : element.neume ? element.neume.bounds.x : 0;\n\t\n\t        // do we need a ledger line for this note?\n\t\n\t        if (staffPosition >= 5 || staffPosition <= -5) {\n\t          var x1 = offsetX + element.bounds.x - ctxt.intraNeumeSpacing;\n\t          var x2 = offsetX + endElem.bounds.x + endElem.bounds.width + ctxt.intraNeumeSpacing;\n\t\n\t          // round the staffPosition to the nearest line\n\t          if (staffPosition > 0) staffPosition = staffPosition - (staffPosition - 1) % 2;else staffPosition = staffPosition - (staffPosition + 1) % 2;\n\t\n\t          // if we have a ledger line close by, then average out the distance between the two\n\t          var minLedgerSeparation = ctxt.staffInterval * ctxt.minLedgerSeparation;\n\t\n\t          if (_this2.ledgerLines.length > 0 && _this2.ledgerLines[_this2.ledgerLines.length - 1].x2 + minLedgerSeparation >= x1) {\n\t            // average out the distance\n\t            var half = (x1 - _this2.ledgerLines[_this2.ledgerLines.length - 1].x2) / 2;\n\t            _this2.ledgerLines[_this2.ledgerLines.length - 1].x2 += half;\n\t            x1 -= half;\n\t          }\n\t\n\t          // never let a ledger line extend past the staff width\n\t          if (x2 > _this2.staffRight) x2 = _this2.staffRight;\n\t\n\t          // finally, add the ledger line\n\t          _this2.ledgerLines.push({\n\t            x1: x1,\n\t            x2: x2,\n\t            staffPosition: staffPosition\n\t          });\n\t        }\n\t      };\n\t\n\t      var episemata = []; // keep track of episemata in case we can connect some\n\t      var startBrace = null;\n\t      var minY = Number.MAX_VALUE,\n\t          maxY = Number.MIN_VALUE; // for braces\n\t\n\t      var positionNonLyricText = function positionNonLyricText(text, neume, rightX) {\n\t        text.setMaxWidth(ctxt, _this2.staffRight);\n\t        //text.bounds.x = neume.hasLyrics()? Math.min(...neume.lyrics.map(l => l.bounds.x)) : 0;\n\t        text.bounds.x = 0;\n\t        if (rightX) text.bounds.x = (text.bounds.x + rightX - text.bounds.width) / 2;\n\t        var beyondStaffRight = neume.bounds.x + text.bounds.right() - _this2.staffRight;\n\t        if (beyondStaffRight > 0) {\n\t          text.bounds.x -= beyondStaffRight;\n\t        }\n\t        if (neume.bounds.x + text.bounds.x < 0) {\n\t          text.bounds.x = -neume.bounds.x;\n\t        }\n\t      };\n\t\n\t      // make a final pass over all of the notes to add any necessary\n\t      // ledger lines and to smooth out episemata\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        var neume = notations[i];\n\t\n\t        minY = Math.min(minY, neume.bounds.y);\n\t        maxY = Math.max(maxY, neume.bounds.bottom());\n\t\n\t        if (neume.constructor === _ExsurgeChantSigns.Custos) {\n\t          processElementForLedgerLine(neume);\n\t          continue;\n\t        }\n\t\n\t        // if the AboveLinesText would extend beyond the right edge of the staff, right align it instead\n\t        if (neume.alText) {\n\t          for (var j = 0; j < neume.alText.length; j++) {\n\t            positionNonLyricText(neume.alText[j], neume);\n\t          }\n\t        }\n\t\n\t        // set up horizontal position of translations\n\t        if (neume.translationText) {\n\t          for (j = 0; j < neume.translationText.length; j++) {\n\t            var text = neume.translationText[j];\n\t            if (text.endNeume) {\n\t              var rightX = text.endNeume.hasLyrics() ? text.endNeume.bounds.x + Math.max.apply(Math, _toConsumableArray(text.endNeume.lyrics.map(function (l) {\n\t                return l.bounds.right();\n\t              }))) : text.endNeume.bounds.right();\n\t              rightX -= neume.bounds.x;\n\t              positionNonLyricText(text, neume, rightX);\n\t            } else {\n\t              positionNonLyricText(text, neume);\n\t            }\n\t          }\n\t        }\n\t\n\t        // if it's not a neume then just skip here\n\t        if (!neume.isNeume) continue;\n\t\n\t        for (j = 0; j < neume.ledgerLines.length; j++) {\n\t          var ll = neume.ledgerLines[j];\n\t          processElementForLedgerLine(ll.element, ll.endElem, ll.staffPosition);\n\t        }\n\t\n\t        for (j = 0; j < neume.notes.length; j++) {\n\t          var k,\n\t              note = neume.notes[j];\n\t\n\t          // blend episemata as we're able\n\t          if (note.episemata.length === 0) episemata = [];\n\t          for (k = 0; k < note.episemata.length; k++) {\n\t            var episema = note.episemata[k];\n\t\n\t            var spaceBetweenEpisemata = 0;\n\t\n\t            // calculate the distance between the last episemata and this one...\n\t            // lots of code for a simple: currEpisemata.left - prevEpisemata.right\n\t            if (episemata.length > 0) spaceBetweenEpisemata = neume.bounds.x + episema.bounds.x - (episemata[episemata.length - 1].note.neume.bounds.x + episemata[episemata.length - 1].bounds.right());\n\t\n\t            // we try to blend the episema if we're able.\n\t            if (episemata.length === 0 || episemata[episemata.length - 1].positionHint !== episema.positionHint || episemata[episemata.length - 1].terminating === true || episemata[episemata.length - 1].alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Left || episemata[episemata.length - 1].alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Center || episema.alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Right || episema.alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Center || spaceBetweenEpisemata > ctxt.intraNeumeSpacing * 2 && note.glyphVisualizer.glyphCode !== _ExsurgeDrawing.GlyphCode.None) {\n\t              // start a new set of episemata to potentially blend\n\t              episemata = [episema];\n\t            } else {\n\t              // blend all previous with this one\n\t              var newY;\n\t\n\t              if (episema.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) newY = Math.max(episema.bounds.y, episemata[episemata.length - 1].bounds.y);else newY = Math.min(episema.bounds.y, episemata[episemata.length - 1].bounds.y);\n\t\n\t              if (episema.bounds.y !== newY) episema.bounds.y = newY;else {\n\t                for (var l = 0; l < episemata.length; l++) {\n\t                  episemata[l].bounds.y = newY;\n\t                }\n\t              }\n\t\n\t              // extend the last episema to meet the new one\n\t              var newWidth = neume.bounds.x + episema.bounds.x - (episemata[episemata.length - 1].note.neume.bounds.x + episemata[episemata.length - 1].bounds.x);\n\t              if (newWidth < 0) {\n\t                newWidth *= -1;\n\t                episemata[episemata.length - 1].bounds.x -= newWidth;\n\t              }\n\t              episemata[episemata.length - 1].bounds.width = newWidth;\n\t\n\t              episemata.push(episema);\n\t            }\n\t          }\n\t\n\t          if (note.braceEnd) this.handleEndBrace(ctxt, note, i);\n\t\n\t          if (note.braceStart) {\n\t            ctxt.lastStartBrace = startBrace = note.braceStart;\n\t            startBrace.notationIndex = i;\n\t          }\n\t        }\n\t      }\n\t\n\t      // if we still have an active brace, that means it spands two chant lines!\n\t      if (startBrace !== null) {\n\t        if (this.custos) {\n\t          // if the next end brace is on the first note following the line break, simply use it with the custos\n\t          // Do the same if there is only an accidental between\n\t          // otherwise, make a new end brace to work for this one, and a new start brace for the next line.\n\t          var nextNotation = notations[lastIndex];\n\t          var nextNote = nextNotation.notes && nextNotation.notes[0];\n\t          var nextNotationButOne = notations[lastIndex + 1];\n\t          var nextNoteButOne = nextNotationButOne && nextNotationButOne.notes && nextNotationButOne.notes[0];\n\t          var braceEnd = nextNote && nextNote.braceEnd || nextNotation.isAccidental && nextNoteButOne && nextNoteButOne.braceEnd;\n\t          if (braceEnd) {\n\t            this.custos.braceEnd = braceEnd;\n\t            this.handleEndBrace(ctxt, this.custos, i);\n\t          } else {\n\t            this.braceStart = startBrace;\n\t            this.custos.braceEnd = new _ExsurgeChantMarkings.BracePoint(this.custos, startBrace.isAbove, startBrace.shape, _ExsurgeChantMarkings.BraceAttachment.Right);\n\t            this.handleEndBrace(ctxt, this.custos, i - 1);\n\t            ctxt.lastStartBrace = new _ExsurgeChantMarkings.BracePoint(null, startBrace.isAbove, startBrace.shape, _ExsurgeChantMarkings.BraceAttachment.Left);\n\t            ctxt.lastStartBrace.notationIndex = i;\n\t          }\n\t        }\n\t      }\n\t\n\t      // don't forget to also include the final custos, which may need a ledger line too\n\t      if (this.custos) processElementForLedgerLine(this.custos);\n\t    }\n\t\n\t    // this is where the real core of positioning neumes takes place\n\t    // returns true if positioning was able to fit the neume before rightNotationBoundary.\n\t    // returns false if cannot fit before given right margin.\n\t    // fixme: if this returns false, shouldn't we set the connectors on prev to be activated?!\n\t\n\t  }, {\n\t    key: \"positionNotationElement\",\n\t    value: function positionNotationElement(ctxt, prevLyrics, prev, curr, rightNotationBoundary) {\n\t      var condensableSpaces = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n\t\n\t      if (!condensableSpaces.hasOwnProperty(\"sum\")) condensableSpaces.sum = 0;\n\t      var i,\n\t          space = { notation: curr },\n\t          fixedX = false;\n\t\n\t      // To begin we just place the current notation right after the previous,\n\t      // irrespective of lyrics.\n\t      // But if the previous neume was part of a polyphonic \"no width\" group and the current is not, or is of a separate group,\n\t      // we force it to have the same x as the previous group.\n\t      if ((!curr.hasNoWidth || curr.firstWithNoWidth === curr) && prev.firstWithNoWidth) {\n\t        curr.bounds.x = prev.firstWithNoWidth.bounds.x;\n\t        fixedX = true;\n\t      } else {\n\t        curr.bounds.x = prev.bounds.right();\n\t      }\n\t\n\t      if (curr.constructor === _ExsurgeChant.TextOnly && this.extraTextOnlyIndex === null || !curr.hasLyrics() && prev.calculatedTrailingSpace < 0) {\n\t        // We transfer over the trailing space from the previous neume if the current neume is text only,\n\t        // so that the text only neume has a better chance at not needing a connector.\n\t        curr.calculatedTrailingSpace = prev.calculatedTrailingSpace;\n\t        if (curr.hasLyrics()) curr.calculatedTrailingSpace -= curr.lyrics[0].bounds.width;\n\t        if (curr.constructor === _ExsurgeChant.TextOnly && curr.lyrics.length === 1) {\n\t          curr.lyrics[0].setMaxWidth(ctxt, this.staffRight, this.staffRight - _ExsurgeDrawing.LyricArray.getRight(prevLyrics) - ctxt.minLyricWordSpacing);\n\t        }\n\t      } else if (!fixedX) {\n\t        curr.bounds.x += prev.calculatedTrailingSpace;\n\t      }\n\t\n\t      if (curr.hasLyrics() && !prev.isDivider && !prev.isAccidental && this.numNotationsOnLine > 0 && (curr.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.SingleSyllable || curr.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable)) {\n\t        curr.bounds.x += ctxt.intraNeumeSpacing * ctxt.interVerbalMultiplier;\n\t      }\n\t      if (curr.hasNoWidth || fixedX) {\n\t        space.total = space.condensable = 0;\n\t      } else if (this.extraTextOnlyIndex !== null && curr.constructor === _ExsurgeChant.TextOnly) {\n\t        curr.bounds.x = 0;\n\t        space.total = space.condensable = 0;\n\t      } else {\n\t        space.total = curr.bounds.x - prev.bounds.right();\n\t        space.condensable = space.total * ctxt.condensingTolerance;\n\t      }\n\t\n\t      // if the previous notation has no lyrics, then we simply make sure the\n\t      // current notation with lyrics is in the bounds of the line\n\t      if (prevLyrics.length === 0) {\n\t        var maxRight = curr.bounds.right() + curr.calculatedTrailingSpace;\n\t\n\t        // if the lyric left is negative, then offset the neume appropriately\n\t        for (i = 0; i < curr.lyrics.length; i++) {\n\t          var currLyric = curr.lyrics[i];\n\t          // we hope for the best!\n\t          // but always use a connector if the lyric has original text that was all used up for the drop cap.\n\t          var needsConnector = currLyric.allowsConnector() && currLyric.dropCap && currLyric.originalText && !currLyric.text;\n\t          currLyric.setNeedsConnector(needsConnector);\n\t          var minLeft = this.staffLeft - this.paddingLeft;\n\t\n\t          if (currLyric.getLeft() < minLeft) curr.bounds.x -= currLyric.getLeft() - minLeft;\n\t\n\t          space.condensable = Math.min(space.condensable, currLyric.getLeft() - minLeft);\n\t          maxRight = Math.max(maxRight, currLyric.getRight());\n\t        }\n\t\n\t        if (maxRight > rightNotationBoundary + condensableSpaces.sum + space.condensable) return false;\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      } else {\n\t        if (curr.firstOfSyllable && prevLyrics.length && !curr.hasLyrics()) {\n\t          curr.bounds.x = Math.max(curr.bounds.x, prevLyrics[0].getRight());\n\t          space.total = curr.bounds.x - prev.bounds.right();\n\t          space.condensable = space.total * ctxt.condensingTolerance;\n\t        }\n\t      }\n\t\n\t      // if the curr notation has no lyrics, then simply check whether there is enough room\n\t      if (curr.hasLyrics() === false) {\n\t        if (curr.bounds.right() + curr.calculatedTrailingSpace > rightNotationBoundary + condensableSpaces.sum + space.condensable) return false;\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      }\n\t\n\t      // if we have multiple lyrics on the current or the previous notation,\n\t      // we will have to run several passes over each set of lyrics:\n\t\n\t      // on the first pass, we will check the absolute left-most placement of the new syllables\n\t      // we will make additional passes until everything is stable\n\t      do {\n\t        var hasShifted = false;\n\t        var atLeastOneWithoutConnector = false;\n\t        for (i = 0; i < curr.lyrics.length; i++) {\n\t          if (!curr.lyrics[i].originalText) continue;\n\t          var prevLyricRight = 0;\n\t          var condensableSpacesSincePrevLyric = [];\n\t          var condensableSpaceSincePrevLyric = null;\n\t          if (i < prevLyrics.length && prevLyrics[i]) {\n\t            prevLyricRight = prevLyrics[i].getRight();\n\t            var notationI = condensableSpaces.map(function (s) {\n\t              return s.notation;\n\t            }).lastIndexOf(prevLyrics[i].notation);\n\t            if (notationI >= 0) {\n\t              condensableSpacesSincePrevLyric = condensableSpaces.slice(notationI + 1);\n\t              condensableSpacesSincePrevLyric.sum = condensableSpacesSincePrevLyric.map(function (s) {\n\t                return s.condensable;\n\t              }).reduce(function (a, b) {\n\t                return a + b;\n\t              }, 0);\n\t            } else {\n\t              condensableSpacesSincePrevLyric.sum = 0;\n\t            }\n\t          }\n\t\n\t          curr.lyrics[i].setNeedsConnector(false); // we hope for the best!\n\t          var currLyricLeft = curr.lyrics[i].getLeft();\n\t          if (!prevLyrics[i] || prevLyrics[i].allowsConnector() === false) {\n\t            // No connector needed, but include space between words if necessary!\n\t            var extraSpace = currLyricLeft - prevLyricRight - ctxt.minLyricWordSpacing;\n\t            if (extraSpace < 0) {\n\t              // push the current element over a bit.\n\t              var shift = prevLyricRight + ctxt.minLyricWordSpacing - currLyricLeft;\n\t              curr.bounds.x += shift;\n\t              condensableSpaceSincePrevLyric = 0;\n\t              hasShifted = shift > 0.5;\n\t            } else {\n\t              condensableSpaceSincePrevLyric = extraSpace;\n\t            }\n\t          } else {\n\t            // we may need a connector yet...\n\t            if (prevLyricRight + 0.1 > currLyricLeft - condensableSpacesSincePrevLyric.sum - space.condensable) {\n\t              // in this case, the lyric elements actually overlap.\n\t              // so nope, no connector needed. instead, we just place the lyrics together\n\t              // fixme: for better text layout, we could actually use the kerning values\n\t              // between the prev and curr lyric elements!\n\t              var _shift = prevLyricRight - currLyricLeft;\n\t              if (_shift < -0.1) {\n\t                (function () {\n\t                  // in this case, the spacing needs to be condensed in the neumes since the last lyric...\n\t                  var multiplier = _shift / (condensableSpacesSincePrevLyric.sum + space.condensable);\n\t                  var offset = 0;\n\t                  condensableSpacesSincePrevLyric.forEach(function (s) {\n\t                    offset += multiplier * s.condensable;\n\t                    s.notation.bounds.x += offset;\n\t                  });\n\t                })();\n\t              }\n\t              curr.bounds.x += _shift;\n\t              condensableSpaceSincePrevLyric = 0;\n\t              atLeastOneWithoutConnector = true;\n\t              hasShifted = _shift > 0.5;\n\t            } else {\n\t              // bummer, looks like we couldn't merge the syllables together. Better add a connector...\n\t              if (ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n\t                var spaceBetweenSyls = currLyricLeft - prevLyricRight;\n\t                if (spaceBetweenSyls < ctxt.hyphenWidth) {\n\t                  var minHyphenWidth = prevLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing;\n\t                  // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t                  prevLyrics[i].setConnectorWidth(Math.max(minHyphenWidth, spaceBetweenSyls));\n\t                }\n\t              }\n\t              prevLyrics[i].setNeedsConnector(true);\n\t              prevLyricRight = prevLyrics[i].getRight();\n\t\n\t              if (prevLyricRight + 0.1 > currLyricLeft) {\n\t                var _shift2 = prevLyricRight - currLyricLeft;\n\t                curr.bounds.x += _shift2;\n\t                condensableSpaceSincePrevLyric = 0;\n\t                hasShifted = _shift2 > 0.5;\n\t              } else {\n\t                condensableSpaceSincePrevLyric = currLyricLeft - prevLyricRight;\n\t              }\n\t            }\n\t          }\n\t\n\t          if (condensableSpaceSincePrevLyric !== null) {\n\t            if (condensableSpaceSincePrevLyric < condensableSpacesSincePrevLyric.sum + space.condensable) {\n\t              (function () {\n\t                // reduce condensable space so that lyrics retain at least the width of a space character between words:\n\t                var multiplier = condensableSpaceSincePrevLyric / (condensableSpacesSincePrevLyric.sum + space.condensable);\n\t                space.condensable *= multiplier;\n\t                if (condensableSpacesSincePrevLyric.sum) {\n\t                  condensableSpacesSincePrevLyric.forEach(function (space) {\n\t                    space.condensable *= multiplier;\n\t                  });\n\t                  condensableSpaces.sum = condensableSpaces.map(function (s) {\n\t                    return s.condensable;\n\t                  }).reduce(function (a, b) {\n\t                    return a + b;\n\t                  }, 0);\n\t                }\n\t              })();\n\t            }\n\t          }\n\t        }\n\t      } while (curr.lyrics.length > 1 && hasShifted && atLeastOneWithoutConnector);\n\t\n\t      for (i = Math.min(curr.lyrics.length, prevLyrics.length) - 1; i >= 0; i--) {\n\t        var pLyrics = prevLyrics[i];\n\t        if (pLyrics.needsConnector && pLyrics.connectorWidth) {\n\t          currLyricLeft = curr.lyrics[i].getLeft();\n\t          prevLyricRight = pLyrics.getRight() - pLyrics.connectorWidth;\n\t          spaceBetweenSyls = currLyricLeft - prevLyricRight;\n\t          if (spaceBetweenSyls >= ctxt.hyphenWidth) spaceBetweenSyls = 0;\n\t          pLyrics.setConnectorWidth(spaceBetweenSyls);\n\t        }\n\t      }\n\t\n\t      if (curr.bounds.right() + curr.calculatedTrailingSpace < rightNotationBoundary + condensableSpaces.sum + space.condensable && _ExsurgeDrawing.LyricArray.getRight(curr.lyrics, true) <= this.staffRight + condensableSpaces.sum + space.condensable) {\n\t        if (prev.isAccidental) {\n\t          // move the previous accidental up next to the current note:\n\t          var _shift3 = curr.bounds.x - prev.bounds.width - prev.calculatedTrailingSpace - prev.bounds.x;\n\t          prev.bounds.x += _shift3;\n\t          if (Math.abs(_shift3) > 0.1) {\n\t            var lastCondensable = condensableSpaces[condensableSpaces.length - 1];\n\t            condensableSpaces.sum -= lastCondensable.condensable;\n\t            lastCondensable.condensable = 0;\n\t          }\n\t        }\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      }\n\t\n\t      // if we made it this far, then the element won't fit on this line.\n\t      return false;\n\t    }\n\t\n\t    /**\n\t     * Find the notation closest to x without going past it\n\t     * @param {number} x\n\t     */\n\t\n\t  }, {\n\t    key: \"bisectNotationAtX\",\n\t    value: function bisectNotationAtX(x) {\n\t      var useMidpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      var minIndex = -1,\n\t          maxIndex = Math.min(this.numNotationsOnLine, Infinity),\n\t          curIndex = minIndex + (maxIndex - minIndex >> 1),\n\t          notations = this.score.notations.slice(this.notationsStartIndex, this.notationsStartIndex + this.numNotationsOnLine);\n\t\n\t      while (minIndex < curIndex) {\n\t        var _notation = notations[curIndex];\n\t        var notationX = _notation.bounds.x;\n\t        if (notationX > x) {\n\t          maxIndex = curIndex;\n\t        } else {\n\t          minIndex = curIndex;\n\t        }\n\t        curIndex = minIndex + (maxIndex - minIndex >> 1);\n\t      }\n\t      var notation = notations[curIndex];\n\t      if (useMidpoint && notation && notation.bounds.width === 0 && curIndex + 1 < notations.length) {\n\t        var nextNotation = notations[curIndex + 1],\n\t            closenessToLeft = x - notation.bounds.x,\n\t            closenessToRight = nextNotation.bounds.x - x;\n\t        if (nextNotation.bounds.width === 0 && closenessToRight < closenessToLeft) ++curIndex;\n\t      }\n\t      return notations[curIndex];\n\t    }\n\t  }]);\n\t\n\t  return ChantLine;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.BracePoint = exports.BraceAttachment = exports.BraceShape = exports.Mora = exports.Ictus = exports.HorizontalEpisema = exports.HorizontalEpisemaAlignment = exports.Accent = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Accent = exports.Accent = function (_GlyphVisualizer) {\n\t  _inherits(Accent, _GlyphVisualizer);\n\t\n\t  function Accent(ctxt, note) {\n\t    var glyphCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ExsurgeDrawing.GlyphCode.AcuteAccent;\n\t\n\t    _classCallCheck(this, Accent);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Accent.__proto__ || Object.getPrototypeOf(Accent)).call(this, ctxt, glyphCode));\n\t\n\t    _this.note = note;\n\t    _this.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Accent, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.bounds.x = this.note.bounds.x + this.bounds.width / 2; // center on the note itself\n\t\n\t      // this puts the acute accent either over the staff lines, or over the note if the\n\t      // note is above the staff lines\n\t      this.setStaffPosition(ctxt, Math.max(this.note.staffPosition + 1, 4));\n\t    }\n\t  }]);\n\t\n\t  return Accent;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t// for positioning markings on notes\n\t\n\t\n\tvar HorizontalEpisemaAlignment = exports.HorizontalEpisemaAlignment = {\n\t  Default: 0,\n\t  Left: 1,\n\t  Center: 2,\n\t  Right: 3\n\t};\n\t\n\t/*\n\t * HorizontalEpisema\n\t *\n\t * A horizontal episema marking is it's own visualizer (that is, it implements createSvgFragment)\n\t */\n\t\n\tvar HorizontalEpisema = exports.HorizontalEpisema = function (_ChantLayoutElement) {\n\t  _inherits(HorizontalEpisema, _ChantLayoutElement);\n\t\n\t  function HorizontalEpisema(note) {\n\t    _classCallCheck(this, HorizontalEpisema);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (HorizontalEpisema.__proto__ || Object.getPrototypeOf(HorizontalEpisema)).call(this));\n\t\n\t    _this2.note = note;\n\t\n\t    _this2.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    _this2.terminating = false; // indicates if this episema should terminate itself or not\n\t    _this2.alignment = HorizontalEpisemaAlignment.Default;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(HorizontalEpisema, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // following logic helps to keep the episemata away from staff lines if they get too close\n\t\n\t      var y = 0,\n\t          step;\n\t      var minDistanceAway = ctxt.staffInterval * 0.25; // min distance from neume\n\t      var glyphCode = this.note.glyphVisualizer.glyphCode;\n\t      var ledgerLine = this.note.neume.ledgerLines[0] || {};\n\t      var punctumInclinatumShorten = false;\n\t\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum) {\n\t        var notes = this.note.neume.notes,\n\t            index = notes.indexOf(this.note),\n\t            prevNote = notes[index - 1];\n\t        if (prevNote && prevNote.glyphVisualizer.glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum && prevNote.staffPosition - this.note.staffPosition === 1) {\n\t          punctumInclinatumShorten = true;\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) {\n\t        y = this.note.bounds.bottom() + minDistanceAway; // the highest the line could be at\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.None)\n\t          // correction for episema under the second note of a porrectus\n\t          y += ctxt.staffInterval / 2;\n\t        step = Math.ceil(y / ctxt.staffInterval);\n\t        // if there's enough space, center the episema between the punctum and the next staff line\n\t        if (step % 2 === 0) {\n\t          step = (step + 3 / 4 + (y - minDistanceAway) / ctxt.staffInterval) / 2;\n\t        } else {\n\t          // otherwise, find nearest acceptable third between staff lines (or staff line)\n\t          step = (Math.ceil(1.5 * y / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\t\n\t          // if it's an odd step, that means we're on a staff line,\n\t          // so we shift to between the staff line\n\t          if (Math.abs(step) % 2 === 1) {\n\t            if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n\t              step += 2 / 3;\n\t            } else {\n\t              // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n\t              step += 1 / 3;\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        y = this.note.bounds.y - minDistanceAway; // the lowest the line could be at\n\t        step = Math.floor(y / ctxt.staffInterval);\n\t        // if there's enough space, center the episema between the punctum and the next staff line\n\t        if (step % 2 === 0) {\n\t          step = (step - 3 / 4 + (y + minDistanceAway) / ctxt.staffInterval) / 2;\n\t        } else {\n\t          // otherwise, find nearest acceptable third between staff lines (or staff line)\n\t          step = (Math.floor(1.5 * y / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\t\n\t          // find nearest acceptable third between staff lines (or staff line)\n\t          if (Math.abs(step) % 2 === 1) {\n\t            // if it was a staff line, we need to adjust\n\t            if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n\t              step -= 2 / 3;\n\t            } else {\n\t              // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n\t              step -= 1 / 3;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      y = step * ctxt.staffInterval;\n\t\n\t      var width = this.note.bounds.width;\n\t      var x = this.note.bounds.x;\n\t\n\t      // The porrectus requires special handling of the note width,\n\t      // otherwise the width is just that of the note itself\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus1 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus2 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus3 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus4) width = ctxt.staffInterval;else if (glyphCode === _ExsurgeDrawing.GlyphCode.None) {\n\t        width = ctxt.staffInterval;\n\t        x -= width;\n\t      } else if (punctumInclinatumShorten) {\n\t        width *= 2 / 3;\n\t        x += 0.5 * width;\n\t      } else if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent) {\n\t        width *= 2 / 3;\n\t        x += 0.25 * width;\n\t      }\n\t\n\t      // also, the position hint can affect the x/width of the episema\n\t      if (this.alignment === HorizontalEpisemaAlignment.Left) {\n\t        width *= 0.8;\n\t      } else if (this.alignment === HorizontalEpisemaAlignment.Center) {\n\t        x += width * 0.1;\n\t        width *= 0.8;\n\t      } else if (this.alignment === HorizontalEpisemaAlignment.Right) {\n\t        x += width * 0.2;\n\t        width *= 0.8;\n\t      }\n\t\n\t      this.bounds.x = x;\n\t      this.bounds.y = y - ctxt.episemaLineWeight / 2;\n\t      this.bounds.width = width;\n\t      this.bounds.height = ctxt.episemaLineWeight;\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: this.bounds.width,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"horizontalEpisema\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return HorizontalEpisema;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\t\n\t/*\n\t * Ictus\n\t */\n\t\n\t\n\tvar Ictus = exports.Ictus = function (_GlyphVisualizer2) {\n\t  _inherits(Ictus, _GlyphVisualizer2);\n\t\n\t  function Ictus(ctxt, note) {\n\t    _classCallCheck(this, Ictus);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (Ictus.__proto__ || Object.getPrototypeOf(Ictus)).call(this, ctxt, _ExsurgeDrawing.GlyphCode.VerticalEpisemaAbove));\n\t\n\t    _this3.note = note;\n\t    _this3.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(Ictus, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      var glyphCode = this.note.glyphVisualizer.glyphCode;\n\t      // we have to place the ictus further from the note in some cases to avoid a collision with an episema on the same note:\n\t      var positionHint = this.positionHint || _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      var staffPosition = this.note.staffPosition + (positionHint === _ExsurgeDrawing.MarkingPositionHint.Above ? 1 : -1);\n\t      var collisionWithEpisema = this.note.episemata.length > 0 && (this.note.episemata[0].positionHint || _ExsurgeDrawing.MarkingPositionHint.Above) === positionHint;\n\t      var horizontalOffset;\n\t      var verticalOffset = 1;\n\t      var shortOffset = -0.2;\n\t      var extraOffset = 0;\n\t      var collisionWithStaffLine = staffPosition % 2 && (Math.abs(staffPosition) < 4 || (this.note.neume.ledgerLines[0] || {}).staffPosition === staffPosition);\n\t\n\t      // The porrectus requires special handling of the note width,\n\t      // otherwise the width is just that of the note itself\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus1 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus2 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus3 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus4) horizontalOffset = ctxt.staffInterval / 2;else if (glyphCode === _ExsurgeDrawing.GlyphCode.None) {\n\t        horizontalOffset = -ctxt.staffInterval / 2;\n\t      } else {\n\t        horizontalOffset = this.note.bounds.width / 2;\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum && !collisionWithStaffLine && !collisionWithEpisema) {\n\t          extraOffset = 0.3;\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Above) {\n\t        glyphCode = _ExsurgeDrawing.GlyphCode.VerticalEpisemaAbove;\n\t        verticalOffset *= -1;\n\t      } else {\n\t        glyphCode = _ExsurgeDrawing.GlyphCode.VerticalEpisemaBelow;\n\t      }\n\t      if (collisionWithEpisema) {\n\t        extraOffset = 0.4;\n\t      }\n\t      verticalOffset *= ctxt.staffInterval * (extraOffset + (collisionWithStaffLine ? 0.3 : shortOffset));\n\t\n\t      this.setGlyph(ctxt, glyphCode);\n\t      this.setStaffPosition(ctxt, staffPosition);\n\t\n\t      this.bounds.x = this.note.bounds.x + horizontalOffset - this.origin.x;\n\t      this.bounds.y += verticalOffset;\n\t    }\n\t  }]);\n\t\n\t  return Ictus;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t/*\n\t * Mora\n\t */\n\t\n\t\n\tvar Mora = exports.Mora = function (_GlyphVisualizer3) {\n\t  _inherits(Mora, _GlyphVisualizer3);\n\t\n\t  function Mora(ctxt, note) {\n\t    _classCallCheck(this, Mora);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (Mora.__proto__ || Object.getPrototypeOf(Mora)).call(this, ctxt, _ExsurgeDrawing.GlyphCode.Mora));\n\t\n\t    _this4.note = note;\n\t    _this4.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    _this4.horizontalOffset = ctxt.staffInterval / 2 + _this4.origin.x;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(Mora, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.setGlyph(ctxt, this.glyphCode);\n\t      this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n\t      var staffPosition = this.note.staffPosition;\n\t\n\t      this.setStaffPosition(ctxt, staffPosition);\n\t\n\t      var verticalOffset = 0;\n\t      // First, we need to find the next note in the neume.\n\t      var noteIndex = this.note.neume.notes.indexOf(this.note);\n\t      var nextNote;\n\t      if (noteIndex >= 0) {\n\t        ++noteIndex;\n\t        if (this.note.neume.notes.length > noteIndex) {\n\t          nextNote = this.note.neume.notes[noteIndex];\n\t          if (nextNote.morae && nextNote.morae.length && this.note.neume.notes.length === noteIndex + 1) {\n\t            // this note is the second to last in its neume, and the last note also has a mora\n\t            this.horizontalOffset += nextNote.bounds.right() - this.note.bounds.right();\n\t          } else if (nextNote.bounds.right() > this.note.bounds.right()) {\n\t            // center the dot over the following note.\n\t            this.horizontalOffset = (nextNote.bounds.right() - this.note.bounds.right() - this.bounds.right()) / 2;\n\t          } else {\n\t            nextNote = null;\n\t          }\n\t        } else if (this.note.neume.notes.length === noteIndex) {\n\t          // this note is the last in its neume:\n\t          if (this.note.neume.trailingSpace === 0) {\n\t            // if this was the last note in its neume, we only care about the next note if there is no trailing space at the end of this neume.\n\t            var notationIndex = this.note.neume.score.notations.indexOf(this.note.neume);\n\t            if (notationIndex >= 0) {\n\t              var nextNotation = this.note.neume.score.notations[notationIndex + 1];\n\t              if (nextNotation && nextNotation.notes) {\n\t                nextNote = nextNotation.notes[0];\n\t              }\n\t            }\n\t          } else if (this.note.shape !== _ExsurgeChant.NoteShape.Inclinatum) {\n\t            this.note.neume.calculatedTrailingSpace += this.origin.x;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Above) {\n\t        if (staffPosition % 2 === 0) verticalOffset -= ctxt.staffInterval * 1.75;else verticalOffset -= ctxt.staffInterval * 0.75;\n\t      } else if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) {\n\t        if (staffPosition % 2 === 0) verticalOffset += ctxt.staffInterval * 1.75;else verticalOffset += ctxt.staffInterval * 0.75;\n\t      } else {\n\t        if (staffPosition % 2 === 0) {\n\t          // if the note is in a space and followed by a note on the line below, we often want to move the mora dot up slightly so that it is centered\n\t          // between the top of the note's space and the top of the following note.\n\t          if (nextNote && nextNote.staffPosition === staffPosition - 1) {\n\t            verticalOffset -= ctxt.staffInterval * 0.25;\n\t          }\n\t        } else {\n\t          verticalOffset -= ctxt.staffInterval * 0.75;\n\t        }\n\t      }\n\t      this.bounds.x = this.horizontalOffset + this.note.bounds.right();\n\t      this.bounds.y += verticalOffset;\n\t    }\n\t  }]);\n\t\n\t  return Mora;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t// indicates the shape of the brace\n\t\n\t\n\tvar BraceShape = exports.BraceShape = {\n\t  RoundBrace: 0,\n\t  CurlyBrace: 1,\n\t  AccentedCurlyBrace: 2\n\t};\n\t\n\t// indicates how the brace is alignerd to the note to which it's connected\n\tvar BraceAttachment = exports.BraceAttachment = {\n\t  Left: 0,\n\t  Right: 1\n\t};\n\t\n\tvar BracePoint = exports.BracePoint = function (_ChantLayoutElement2) {\n\t  _inherits(BracePoint, _ChantLayoutElement2);\n\t\n\t  function BracePoint(note, isAbove, shape, attachment) {\n\t    _classCallCheck(this, BracePoint);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (BracePoint.__proto__ || Object.getPrototypeOf(BracePoint)).call(this));\n\t\n\t    _this5.note = note;\n\t    _this5.isAbove = isAbove;\n\t    _this5.shape = shape;\n\t    _this5.attachment = attachment;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(BracePoint, [{\n\t    key: \"getAttachmentX\",\n\t    value: function getAttachmentX(note) {\n\t      if (!note) note = this.note;\n\t      if (this.attachment === BraceAttachment.Left) return (note.neume ? note.neume.bounds.x : 0) + note.bounds.x;else return (note.neume ? note.neume.bounds.x : 0) + note.bounds.right();\n\t    }\n\t  }]);\n\t\n\t  return BracePoint;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Virgula = exports.Accidental = exports.AccidentalType = exports.DoubleBar = exports.DominicanBar = exports.InsertionCursor = exports.FullBar = exports.HalfBar = exports.QuarterBar = exports.Divider = exports.Custos = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t/*\n\t *\n\t */\n\tvar Custos = exports.Custos = function (_ChantNotationElement) {\n\t  _inherits(Custos, _ChantNotationElement);\n\t\n\t  // if auto is true, then the custos will automatically try to determine it's height based on\n\t  // subsequent notations\n\t  function Custos() {\n\t    var auto = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\t\n\t    _classCallCheck(this, Custos);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Custos.__proto__ || Object.getPrototypeOf(Custos)).call(this));\n\t\n\t    _this.auto = auto;\n\t    _this.staffPosition = 0; // default sane value\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Custos, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Custos.prototype.__proto__ || Object.getPrototypeOf(Custos.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      if (this.auto) {\n\t        var neume = ctxt.findNextNeume();\n\t\n\t        if (neume) this.staffPosition = ctxt.activeClef.pitchToStaffPosition(neume.notes[0].pitch);\n\t\n\t        // in case there was a weird fa/do clef change, let's sanitize the staffPosition by making sure it is\n\t        // within reasonable bounds\n\t        while (this.staffPosition < -6) {\n\t          this.staffPosition += 7;\n\t        }while (this.staffPosition > 6) {\n\t          this.staffPosition -= 7;\n\t        }\n\t      }\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, Custos.getGlyphCode(this.staffPosition));\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t\n\t    // called when layout has changed and our dependencies are no longer good\n\t\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {\n\t      // we only need to resolve new dependencies if we're an automatic custos\n\t      if (this.auto) this.needsLayout = true;\n\t    }\n\t  }], [{\n\t    key: \"getGlyphCode\",\n\t    value: function getGlyphCode(staffPosition) {\n\t      if (staffPosition <= 2) {\n\t        // ascending custodes\n\t        if (Math.abs(staffPosition) % 2 === 1) return _ExsurgeDrawing.GlyphCode.CustosLong;else return _ExsurgeDrawing.GlyphCode.CustosShort;\n\t      } else {\n\t        // descending custodes\n\t        if (Math.abs(staffPosition) % 2 === 1) return _ExsurgeDrawing.GlyphCode.CustosDescLong;else return _ExsurgeDrawing.GlyphCode.CustosDescShort;\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Custos;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Divider\n\t */\n\t\n\t\n\tvar Divider = exports.Divider = function (_ChantNotationElement2) {\n\t  _inherits(Divider, _ChantNotationElement2);\n\t\n\t  function Divider() {\n\t    _classCallCheck(this, Divider);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (Divider.__proto__ || Object.getPrototypeOf(Divider)).call(this));\n\t\n\t    _this2.isDivider = true;\n\t    _this2.resetsAccidentals = true;\n\t    return _this2;\n\t  }\n\t\n\t  return Divider;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * QuarterBar\n\t */\n\t\n\t\n\tvar QuarterBar = exports.QuarterBar = function (_Divider) {\n\t  _inherits(QuarterBar, _Divider);\n\t\n\t  function QuarterBar() {\n\t    _classCallCheck(this, QuarterBar);\n\t\n\t    return _possibleConstructorReturn(this, (QuarterBar.__proto__ || Object.getPrototypeOf(QuarterBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(QuarterBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(QuarterBar.prototype.__proto__ || Object.getPrototypeOf(QuarterBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, 2, 4, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return QuarterBar;\n\t}(Divider);\n\t\n\t/*\n\t * HalfBar\n\t */\n\t\n\t\n\tvar HalfBar = exports.HalfBar = function (_Divider2) {\n\t  _inherits(HalfBar, _Divider2);\n\t\n\t  function HalfBar() {\n\t    _classCallCheck(this, HalfBar);\n\t\n\t    return _possibleConstructorReturn(this, (HalfBar.__proto__ || Object.getPrototypeOf(HalfBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(HalfBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(HalfBar.prototype.__proto__ || Object.getPrototypeOf(HalfBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -2, 2, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return HalfBar;\n\t}(Divider);\n\t\n\t/*\n\t * FullBar\n\t */\n\t\n\t\n\tvar FullBar = exports.FullBar = function (_Divider3) {\n\t  _inherits(FullBar, _Divider3);\n\t\n\t  function FullBar() {\n\t    _classCallCheck(this, FullBar);\n\t\n\t    return _possibleConstructorReturn(this, (FullBar.__proto__ || Object.getPrototypeOf(FullBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(FullBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(FullBar.prototype.__proto__ || Object.getPrototypeOf(FullBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -3, 3, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return FullBar;\n\t}(Divider);\n\t\n\t/*\n\t * Insertion Cursor\n\t */\n\t\n\t\n\tvar InsertionCursor = exports.InsertionCursor = function (_Divider4) {\n\t  _inherits(InsertionCursor, _Divider4);\n\t\n\t  function InsertionCursor() {\n\t    _classCallCheck(this, InsertionCursor);\n\t\n\t    return _possibleConstructorReturn(this, (InsertionCursor.__proto__ || Object.getPrototypeOf(InsertionCursor)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(InsertionCursor, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(InsertionCursor.prototype.__proto__ || Object.getPrototypeOf(InsertionCursor.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -4, 4));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t      this.bounds.width = 0;\n\t      this.bounds.height = 0;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return InsertionCursor;\n\t}(Divider);\n\t\n\t/*\n\t * DominicanBar\n\t */\n\t\n\t\n\tvar DominicanBar = exports.DominicanBar = function (_Divider5) {\n\t  _inherits(DominicanBar, _Divider5);\n\t\n\t  function DominicanBar(staffPosition) {\n\t    _classCallCheck(this, DominicanBar);\n\t\n\t    var _this7 = _possibleConstructorReturn(this, (DominicanBar.__proto__ || Object.getPrototypeOf(DominicanBar)).call(this));\n\t\n\t    staffPosition--;\n\t    var parity = staffPosition % 2;\n\t\n\t    _this7.staffPosition = staffPosition - 2 * parity;\n\t    return _this7;\n\t  }\n\t\n\t  _createClass(DominicanBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DominicanBar.prototype.__proto__ || Object.getPrototypeOf(DominicanBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, this.staffPosition - 3, this.staffPosition, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DominicanBar;\n\t}(Divider);\n\t\n\t/*\n\t * DoubleBar\n\t */\n\t\n\t\n\tvar DoubleBar = exports.DoubleBar = function (_Divider6) {\n\t  _inherits(DoubleBar, _Divider6);\n\t\n\t  function DoubleBar() {\n\t    _classCallCheck(this, DoubleBar);\n\t\n\t    return _possibleConstructorReturn(this, (DoubleBar.__proto__ || Object.getPrototypeOf(DoubleBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(DoubleBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DoubleBar.prototype.__proto__ || Object.getPrototypeOf(DoubleBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var line0 = new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -3, 3, this);\n\t      line0.bounds.x = 0;\n\t      this.addVisualizer(line0);\n\t\n\t      var line1 = new _ExsurgeDrawing.DividerLineVisualizer(ctxt, -3, 3, this);\n\t      line1.bounds.x = ctxt.intraNeumeSpacing * 2 - line1.bounds.width;\n\t      this.addVisualizer(line1);\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DoubleBar;\n\t}(Divider);\n\t\n\tvar AccidentalType = exports.AccidentalType = {\n\t  Flat: -1,\n\t  Natural: 0,\n\t  Sharp: 1\n\t};\n\t\n\t/*\n\t * Accidental\n\t */\n\t\n\tvar Accidental = exports.Accidental = function (_ChantNotationElement3) {\n\t  _inherits(Accidental, _ChantNotationElement3);\n\t\n\t  function Accidental(staffPosition, accidentalType) {\n\t    _classCallCheck(this, Accidental);\n\t\n\t    var _this9 = _possibleConstructorReturn(this, (Accidental.__proto__ || Object.getPrototypeOf(Accidental)).call(this));\n\t\n\t    _this9.isAccidental = true;\n\t    _this9.keepWithNext = true; // accidentals should always stay connected...\n\t\n\t    _this9.staffPosition = staffPosition;\n\t    _this9.accidentalType = accidentalType;\n\t    return _this9;\n\t  }\n\t\n\t  _createClass(Accidental, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Accidental.prototype.__proto__ || Object.getPrototypeOf(Accidental.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(this.createGlyphVisualizer(ctxt));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t\n\t    // creation of the glyph visualizer is refactored out or performLayout\n\t    // so that clefs can use the same logic for their accidental glyph\n\t\n\t  }, {\n\t    key: \"createGlyphVisualizer\",\n\t    value: function createGlyphVisualizer(ctxt) {\n\t      var glyphCode = _ExsurgeDrawing.GlyphCode.Flat;\n\t\n\t      switch (this.accidentalType) {\n\t        case AccidentalType.Natural:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Natural;\n\t          break;\n\t        case AccidentalType.Sharp:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Sharp;\n\t          break;\n\t        default:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Flat;\n\t          break;\n\t      }\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, glyphCode);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      return glyph;\n\t    }\n\t  }, {\n\t    key: \"adjustStep\",\n\t    value: function adjustStep(step) {\n\t      switch (this.accidentalType) {\n\t        case AccidentalType.Flat:\n\t          if (step === _ExsurgeCore.Step.Ti) return _ExsurgeCore.Step.Te;\n\t          if (step === _ExsurgeCore.Step.Mi) return _ExsurgeCore.Step.Me;\n\t          break;\n\t        case AccidentalType.Sharp:\n\t          if (step === _ExsurgeCore.Step.Do) return _ExsurgeCore.Step.Du;\n\t          if (step === _ExsurgeCore.Step.Fa) return _ExsurgeCore.Step.Fu;\n\t          break;\n\t        case AccidentalType.Natural:\n\t          if (step === _ExsurgeCore.Step.Te) return _ExsurgeCore.Step.Ti;\n\t          if (step === _ExsurgeCore.Step.Me) return _ExsurgeCore.Step.Mi;\n\t          if (step === _ExsurgeCore.Step.Du) return _ExsurgeCore.Step.Do;\n\t          if (step === _ExsurgeCore.Step.Fu) return _ExsurgeCore.Step.Fa;\n\t          break;\n\t      }\n\t\n\t      // no adjustment needed\n\t      return step;\n\t    }\n\t  }, {\n\t    key: \"applyToPitch\",\n\t    value: function applyToPitch(pitch) {\n\t      // no adjusment needed\n\t      if (this.pitch.octave !== pitch.octave) return;\n\t\n\t      pitch.step = this.adjustStep(pitch.step);\n\t    }\n\t  }]);\n\t\n\t  return Accidental;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Virgula\n\t */\n\t\n\t\n\tvar Virgula = exports.Virgula = function (_Divider7) {\n\t  _inherits(Virgula, _Divider7);\n\t\n\t  function Virgula() {\n\t    _classCallCheck(this, Virgula);\n\t\n\t    // unlike other dividers a virgula does not reset accidentals\n\t    var _this10 = _possibleConstructorReturn(this, (Virgula.__proto__ || Object.getPrototypeOf(Virgula)).call(this));\n\t\n\t    _this10.resetsAccidentals = false;\n\t\n\t    // the staff position of the virgula is customizable, so that it\n\t    // can be placed on different lines (top or bottom) depending on the\n\t    // notation tradition of what is being notated (e.g., Benedictine has it\n\t    //  on top line, Norbertine at the bottom)\n\t    _this10.staffPosition = 3;\n\t    return _this10;\n\t  }\n\t\n\t  _createClass(Virgula, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Virgula.prototype.__proto__ || Object.getPrototypeOf(Virgula.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.Virgula);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      this.addVisualizer(glyph);\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Virgula;\n\t}(Divider);\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Gabc = exports.GabcHeader = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(10);\n\t\n\tvar Markings = _interopRequireWildcard(_ExsurgeChantMarkings);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(11);\n\t\n\tvar Signs = _interopRequireWildcard(_ExsurgeChantSigns);\n\t\n\tvar _ExsurgeChantNeumes = __webpack_require__(13);\n\t\n\tvar Neumes = _interopRequireWildcard(_ExsurgeChantNeumes);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// reusable reg exps\n\tvar __syllablesRegex = /(?=\\S)((?:<v>[\\s\\S]*<\\/v>|[^(])*)(?:\\(?([^)]*)\\)?)?/g;\n\tvar __altTranslationRegex = /<alt>(.*?)<\\/alt>|\\[(alt:)?(.*?)\\]/g;\n\t\n\tvar __notationsRegex = /z0|z|Z|::|:|[,;][1-6]?|`|[cf][1-4]|cb[1-4]|\\/+| |\\!|-?[a-mA-M][oOwWvVrRsxy#~\\+><_\\.'012345]*(?:\\[[^\\]]*\\]?)*|\\{([^}]+)\\}?/g;\n\tvar __notationsRegex_group_insideBraces = 1;\n\t\n\tvar __bracketedCommandRegex = /^([a-z]+):(.*)/;\n\t\n\t// for the brace string inside of [ and ] in notation data\n\t// the capturing groups are:\n\t//  1. o or u, to indicate over or under\n\t//  2. b, cb, or cba, to indicate the brace type\n\t//  3. 0 or 1 to indicate the attachment point\n\t//  4. { or } to indicate opening/closing (this group will be null if the metric version is used)\n\t//  5. a float indicating the millimeter length of the brace (not supported yet)\n\tvar __braceSpecRegex = /([ou])(b|cb|cba):([01])(?:([{}])|;(\\d*(?:\\.\\d+)?)mm)/;\n\t\n\tvar TrailingSpaceForAccidental = function TrailingSpaceForAccidental(ctxt) {\n\t  return ctxt.intraNeumeSpacing * ctxt.accidentalSpaceMultiplier;\n\t};\n\tvar TrailingSpaceMultiple = function TrailingSpaceMultiple(multiplier) {\n\t  return function (ctxt) {\n\t    return ctxt.intraNeumeSpacing * multiplier;\n\t  };\n\t};\n\t\n\tvar regexHeaderEnd = /(?:^|\\n)%%\\s?\\n/;\n\tvar regexHeaderLine = /^([\\w-_.]+):\\s*((?:[^;\\r\\n]|;[ \\t])*)(?:;|$)/i;\n\tvar regexHeaderComment = /^%.*/;\n\t\n\tvar GabcHeader = exports.GabcHeader = function () {\n\t  _createClass(GabcHeader, null, [{\n\t    key: \"getLength\",\n\t    value: function getLength(gabc) {\n\t      var match = gabc.match(regexHeaderEnd);\n\t      return match ? match.index + match[0].length : 0;\n\t    }\n\t  }]);\n\t\n\t  function GabcHeader(text) {\n\t    _classCallCheck(this, GabcHeader);\n\t\n\t    if (typeof text !== \"string\") text = \"\";\n\t    this.comments = [];\n\t    this.cValues = {};\n\t    this.original = \"\";\n\t    var match = text.match(regexHeaderEnd);\n\t    if (match) {\n\t      var txtHeader = this.original = text.slice(0, match.index + match[0].length);\n\t      var lines = txtHeader.split(/\\r?\\n/g);\n\t      for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i],\n\t            _match = regexHeaderLine.exec(line);\n\t        if (_match) {\n\t          var key = _match[1].replace(/-([a-z])/g, function (a, letter) {\n\t            return letter.toUpperCase();\n\t          });\n\t          if (this[_match[1]]) {\n\t            var arrayName = _match[1] + \"Array\";\n\t            if (!this[arrayName]) {\n\t              this[arrayName] = [this[_match[1]]];\n\t            }\n\t            this[arrayName].push(_match[2]);\n\t          } else {\n\t            this[_match[1]] = _match[2];\n\t          }\n\t          if (key !== _match[1]) this[key] = this[_match[1]];\n\t        } else if (_match = regexHeaderComment.exec(line)) {\n\t          if (line !== \"%%\") {\n\t            _match = regexHeaderLine.exec(line.slice(1));\n\t            if (_match) {\n\t              var _key = _match[1].replace(/-([a-z])/g, function (a, letter) {\n\t                return letter.toUpperCase();\n\t              });\n\t              this.cValues[_match[1]] = _match[2];\n\t              if (_key !== _match[1]) this.cValues[_key] = _match[2];\n\t            } else {\n\t              this.comments[i] = line;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  _createClass(GabcHeader, [{\n\t    key: \"toString\",\n\t    value: function toString() {\n\t      var result = [];\n\t      for (var key in this) {\n\t        if (typeof this[key] !== \"string\" || /^(length|original|comments|cValues)$/.test(key)) {\n\t          continue;\n\t        }\n\t        var alternateKey = key.replace(/[A-Z]/g, function (letter) {\n\t          return \"-\" + letter.toLowerCase();\n\t        });\n\t        if (alternateKey !== key && alternateKey in this) continue;\n\t        var array = this[key + \"Array\"];\n\t        if (array) {\n\t          for (var i = 0; i < array.length; ++i) {\n\t            result.push(key + \": \" + array[i] + \";\");\n\t          }\n\t        } else {\n\t          result.push(key + \": \" + this[key] + \";\");\n\t        }\n\t      }\n\t      for (var _key2 in this.cValues) {\n\t        if (_key2.length === 0 || !this.cValues.hasOwnProperty(_key2)) continue;\n\t        result.push(\"%\" + _key2 + \": \" + this.cValues[_key2] + \";\");\n\t      }\n\t      for (var _i in this.comments) {\n\t        if (!this.comments.hasOwnProperty(_i)) continue;\n\t        try {\n\t          result.splice(_i, 0, this.comments[_i]);\n\t        } catch (e) {\n\t          console.warn(e);\n\t        }\n\t      }\n\t      return result.join(\"\\n\") + \"\\n%%\\n\";\n\t    }\n\t  }]);\n\t\n\t  return GabcHeader;\n\t}();\n\t\n\tvar elementCountForNotations = function elementCountForNotations(items) {\n\t  return items.reduce(function (sum, item) {\n\t    return sum + (item.notes ? item.notes.length : 1);\n\t  }, 0);\n\t};\n\t\n\tvar Gabc = exports.Gabc = function () {\n\t  function Gabc() {\n\t    _classCallCheck(this, Gabc);\n\t  }\n\t\n\t  _createClass(Gabc, null, [{\n\t    key: \"createMappingsFromSource\",\n\t\n\t    // takes gabc source code (without the header info) and returns an array\n\t    // of ChantMappings describing the chant. A chant score can then be created\n\t    // fron the chant mappings and later updated via updateMappings() if need\n\t    // be...\n\t    value: function createMappingsFromSource(ctxt, gabcSource) {\n\t      var headerLength = GabcHeader.getLength(gabcSource);\n\t      gabcSource = gabcSource.slice(headerLength);\n\t      var words = this.splitWords(gabcSource);\n\t\n\t      // set the default clef\n\t      ctxt.activeClef = _ExsurgeChant.Clef.default();\n\t\n\t      var mappings = this.createMappingsFromWords(ctxt, words, function (clef) {\n\t        return ctxt.activeClef = clef;\n\t      });\n\t\n\t      // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n\t      if (mappings.length > 0 && mappings[mappings.length - 1].notations.length > 0) mappings[mappings.length - 1].notations[mappings[mappings.length - 1].notations.length - 1].trailingSpace = 0;\n\t\n\t      return mappings;\n\t    }\n\t\n\t    // A simple general purpose diff algorithm adapted here for comparing\n\t    // an array of existing mappings with an updated list of gabc words.\n\t    // note before is an array of mappings, and after is an array of strings\n\t    // (gabc words).\n\t    //\n\t    // This is definitely not the most effecient diff algorithm, but for our\n\t    // limited needs and source size it seems to work just fine...\n\t    //\n\t    // code is adapted from: https://github.com/paulgb/simplediff\n\t    //\n\t    // Returns:\n\t    //   A list of pairs, with the first part of the pair being one of three\n\t    //   strings ('-', '+', '=') and the second part being a list of values from\n\t    //   the original before and/or after lists. The first part of the pair\n\t    //   corresponds to whether the list of values is a deletion, insertion, or\n\t    //   unchanged, respectively.\n\t\n\t  }, {\n\t    key: \"diffDescriptorsAndNewWords\",\n\t    value: function diffDescriptorsAndNewWords(before, after) {\n\t      // Create a map from before values to their indices\n\t      var oldIndexMap = {},\n\t          i;\n\t      for (i = 0; i < before.length; i++) {\n\t        oldIndexMap[before[i].source] = oldIndexMap[before[i].source] || [];\n\t        oldIndexMap[before[i].source].push(i);\n\t      }\n\t\n\t      var overlap = [],\n\t          startOld,\n\t          startNew,\n\t          subLength,\n\t          inew;\n\t\n\t      startOld = startNew = subLength = 0;\n\t\n\t      for (inew = 0; inew < after.length; inew++) {\n\t        var _overlap = [];\n\t        oldIndexMap[after[inew]] = oldIndexMap[after[inew]] || [];\n\t        for (i = 0; i < oldIndexMap[after[inew]].length; i++) {\n\t          var iold = oldIndexMap[after[inew]][i];\n\t          // now we are considering all values of val such that\n\t          // `before[iold] == after[inew]`\n\t          _overlap[iold] = (iold && overlap[iold - 1] || 0) + 1;\n\t          if (_overlap[iold] > subLength) {\n\t            // this is the largest substring seen so far, so store its indices\n\t            subLength = _overlap[iold];\n\t            startOld = iold - subLength + 1;\n\t            startNew = inew - subLength + 1;\n\t          }\n\t        }\n\t        overlap = _overlap;\n\t      }\n\t\n\t      if (subLength === 0) {\n\t        // If no common substring is found, we return an insert and delete...\n\t        var result = [];\n\t\n\t        if (before.length) result.push([\"-\", before]);\n\t\n\t        if (after.length) result.push([\"+\", after]);\n\t\n\t        return result;\n\t      }\n\t\n\t      // ...otherwise, the common substring is unchanged and we recursively\n\t      // diff the text before and after that substring\n\t      return [].concat(this.diffDescriptorsAndNewWords(before.slice(0, startOld), after.slice(0, startNew)), [[\"=\", after.slice(startNew, startNew + subLength)]], this.diffDescriptorsAndNewWords(before.slice(startOld + subLength), after.slice(startNew + subLength)));\n\t    }\n\t\n\t    // this function essentially performs and applies a rudimentary diff between a\n\t    // previously parsed set of mappings and between a new gabc source text.\n\t    // the mappings array passed in is changed in place to be updated from the\n\t    // new source\n\t\n\t  }, {\n\t    key: \"updateMappingsFromSource\",\n\t    value: function updateMappingsFromSource(ctxt, mappings, newGabcSource) {\n\t      var insertionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\t      var oldInsertionIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\t\n\t      var headerLength = GabcHeader.getLength(newGabcSource);\n\t      newGabcSource = newGabcSource.slice(headerLength);\n\t      // always remove the last old mapping since it's spacing/trailingSpace is handled specially\n\t      mappings.pop();\n\t\n\t      if (insertionIndex === null) {\n\t        insertionIndex = NaN;\n\t      }\n\t      if (oldInsertionIndex === null) {\n\t        oldInsertionIndex = NaN;\n\t      }\n\t\n\t      var newWords = this.splitWords(newGabcSource);\n\t\n\t      var results = this.diffDescriptorsAndNewWords(mappings, newWords);\n\t\n\t      var index = 0,\n\t          j,\n\t          k,\n\t          l,\n\t          sourceIndex = 0,\n\t          wordLength = 0,\n\t          mapping,\n\t          elementIndex = 0;\n\t\n\t      ctxt.activeClef = _ExsurgeChant.Clef.default();\n\t\n\t      // apply the results to the mappings, marking notations that need to be processed\n\t      var lastTranslationNeumes = [];\n\t      for (var i = 0; i < results.length; i++) {\n\t        var resultCode = results[i][0];\n\t        var resultValues = results[i][1];\n\t\n\t        if (index > 0) sourceIndex = mappings[index - 1].sourceIndex + mappings[index - 1].source.length + 1;\n\t        if (resultCode === \"=\") {\n\t          var sourceIndexDiff = sourceIndex - mappings[index].sourceIndex;\n\t          // skip over ones that haven't changed, but updating the clef and source\n\t          // index (and pitch in case clef or accidentals have changed) as we go\n\t          for (j = 0; j < resultValues.length; j++, index++) {\n\t            mapping = mappings[index];\n\t            if (elementIndex === 0 && mapping.notations.length && mapping.notations[0].isClef) {\n\t              // the first clef doesn't get kept as a notation:\n\t              elementIndex = -1;\n\t            }\n\t            if (insertionIndex >= elementIndex || oldInsertionIndex >= elementIndex) {\n\t              // check if the insertion index is within this mapping:\n\t              var elementCount = elementCountForNotations(mapping.notations);\n\t              if (insertionIndex >= elementIndex && insertionIndex < elementIndex + elementCount || oldInsertionIndex >= elementIndex && oldInsertionIndex < elementIndex + elementCount) {\n\t                // re-do this mapping:\n\t                // TODO: check sourceIndex\n\t                var _sourceIndex = mapping.sourceIndex + sourceIndexDiff;\n\t                mapping = this.createMappingFromWord(ctxt, resultValues[j], _sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t                mappings.splice(index, 1, mapping);\n\t\n\t                elementIndex += elementCount;\n\t                continue;\n\t              }\n\t              elementIndex += elementCount;\n\t            }\n\t            mapping.sourceIndex += sourceIndexDiff;\n\t            for (k = 0; k < mapping.notations.length; k++) {\n\t              var curNotation = mapping.notations[k];\n\t              var prevIsAccidental = mapping.notations[k - 1] && mapping.notations[k - 1].isAccidental;\n\t              // notify the notation that its dependencies are no longer valid\n\t              curNotation.resetDependencies();\n\t\n\t              if (curNotation.isClef) {\n\t                ctxt.activeClef = mappings[index].notations[k];\n\t              }\n\t\n\t              if (curNotation.isAccidental) {\n\t                ctxt.activeClef.activeAccidental = curNotation;\n\t              } else if (curNotation.resetsAccidentals || !prevIsAccidental && curNotation.hasLyrics() && curNotation.lyrics[0].lyricType <= _ExsurgeDrawing.LyricType.BeginningSyllable) {\n\t                ctxt.activeClef.resetAccidentals();\n\t              }\n\t\n\t              // update source index, pitch, and automatic braces\n\t              if (curNotation.notes) {\n\t                for (l = 0; l < curNotation.notes.length; ++l) {\n\t                  var note = curNotation.notes[l];\n\t                  note.sourceIndex += sourceIndexDiff;\n\t                  note.pitch = ctxt.activeClef.staffPositionToPitch(note.staffPosition);\n\t                  if (note.braceEnd && note.braceEnd.automatic) delete note.braceEnd;\n\t                  if (this.needToEndBrace && !note.braceStart && !note.braceEnd) {\n\t                    note.braceEnd = new Markings.BracePoint(note, this.needToEndBrace.isAbove, this.needToEndBrace.shape, this.needToEndBrace.attachment === Markings.BraceAttachment.Left ? Markings.BraceAttachment.Right : Markings.BraceAttachment.Left);\n\t                    note.braceEnd.automatic = true;\n\t                    delete this.needToEndBrace;\n\t                  } else if (note.braceStart && note.braceStart.automatic) {\n\t                    this.needToEndBrace = note.braceStart;\n\t                  }\n\t                }\n\t              }\n\t              if (curNotation.translationText) {\n\t                for (l = 0; l < curNotation.translationText.length; ++l) {\n\t                  var transText = curNotation.translationText[l];\n\t                  delete transText.endNeume;\n\t                  curNotation.translationText[l].sourceIndex += sourceIndexDiff;\n\t                  if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n\t                    var lastTranslationText = lastTranslationNeumes[0].translationText[l];\n\t                    if (lastTranslationText) lastTranslationText.endNeume = curNotation;\n\t                  }\n\t                }\n\t                lastTranslationNeumes[0] = curNotation;\n\t              }\n\t              if (sourceIndexDiff) {\n\t                if (typeof curNotation.sourceIndex === \"number\") {\n\t                  curNotation.sourceIndex += sourceIndexDiff;\n\t                }\n\t                for (l = 0; l < curNotation.lyrics.length; ++l) {\n\t                  curNotation.lyrics[l].sourceIndex += sourceIndexDiff;\n\t                }\n\t                if (curNotation.alText) {\n\t                  for (l = 0; l < curNotation.alText.length; ++l) {\n\t                    curNotation.alText[l].sourceIndex += sourceIndexDiff;\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t        } else if (resultCode === \"-\") {\n\t          // delete elements that no longer exist, but first notify all\n\t          // elements of the change\n\t          mappings.splice(index, resultValues.length);\n\t        } else if (resultCode === \"+\") {\n\t          // insert new ones\n\t          for (j = 0; j < resultValues.length; j++) {\n\t            wordLength = resultValues[j].length + 1;\n\t            mapping = this.createMappingFromWord(ctxt, resultValues[j], sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t\n\t            if (elementIndex === 0 && mapping.notations.length && mapping.notations[0].isClef) {\n\t              // the first clef doesn't get kept as a notation:\n\t              elementIndex = -1;\n\t              var _elementCount = elementCountForNotations(mapping.notations);\n\t              if (insertionIndex < _elementCount) {\n\t                // re-do the first mapping, because it was broken up incorrectly, due to the presence of the initial clef\n\t                mapping = this.createMappingFromWord(ctxt, resultValues[j], sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t              }\n\t            }\n\t\n\t            for (k = 0; k < mapping.notations.length; k++) {\n\t              var _curNotation = mapping.notations[k];\n\t              elementIndex += _curNotation.notes ? _curNotation.notes.length : 1;\n\t              if (_curNotation.isClef) {\n\t                ctxt.activeClef = mapping.notations[k];\n\t              }\n\t            }\n\t\n\t            mappings.splice(index++, 0, mapping);\n\t            sourceIndex += wordLength;\n\t          }\n\t        }\n\t      }\n\t\n\t      // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n\t      if (mappings.length > 0 && mappings[mappings.length - 1].notations.length > 0) mappings[mappings.length - 1].notations[mappings[mappings.length - 1].notations.length - 1].trailingSpace = 0;\n\t\n\t      return headerLength;\n\t    }\n\t\n\t    // takes an array of gabc words (like that returned by splitWords below)\n\t    // and returns an array of ChantMapping objects, one for each word.\n\t\n\t  }, {\n\t    key: \"createMappingsFromWords\",\n\t    value: function createMappingsFromWords(ctxt, words) {\n\t      var mappings = [];\n\t      var sourceIndex = 0,\n\t          wordLength = 0,\n\t          lastTranslationNeumes = [];\n\t\n\t      for (var i = 0; i < words.length; i++) {\n\t        sourceIndex += wordLength;\n\t        wordLength = words[i].length + 1;\n\t        var word = words[i].trim();\n\t\n\t        if (word === \"\") continue;\n\t\n\t        var mapping = this.createMappingFromWord(ctxt, word, sourceIndex, lastTranslationNeumes);\n\t\n\t        if (mapping) mappings.push(mapping);\n\t      }\n\t\n\t      return mappings;\n\t    }\n\t\n\t    // takes a gabc word (like those returned by splitWords below) and returns\n\t    // a ChantMapping object that contains the gabc word source text as well\n\t    // as the generated notations.\n\t\n\t  }, {\n\t    key: \"createMappingFromWord\",\n\t    value: function createMappingFromWord(ctxt, word, sourceIndex, lastTranslationNeumes, insertionIndex) {\n\t      var matches = [];\n\t      var notations = [];\n\t      var currSyllable = 0;\n\t\n\t      while (match = __syllablesRegex.exec(word)) {\n\t        matches.push(match);\n\t      }for (var j = 0; j < matches.length; j++) {\n\t        var match = matches[j];\n\t\n\t        var lyricText = match[1].replace(/(^|<\\/sp>)([\\s\\S]*?)($|<sp>)/g, function (_, pre, main, post) {\n\t          return \"\" + pre + main.replace(/~/g, \" \") + post;\n\t        });\n\t        var alText = [];\n\t        var translationText = [];\n\t        var notationData = match[2];\n\t\n\t        // new words reset the accidentals, per the Solesmes style (see LU xviij)\n\t        // but we need to also make sure that there _is_ a word and that it has notes associated with it.\n\t        if (currSyllable === 0 && /[a-z]/i.test(lyricText) && /[a-m]/i.test(notationData)) ctxt.activeClef.resetAccidentals();\n\t\n\t        var items = this.parseNotations(ctxt, notationData, sourceIndex + match.index + match[1].length + 1, insertionIndex);\n\t\n\t        if (items.length === 0) continue;\n\t\n\t        if (insertionIndex >= 0) insertionIndex -= elementCountForNotations(items);\n\t\n\t        items[0].firstOfSyllable = !!lyricText;\n\t        items[0].firstOfParentheses = true;\n\t        notations.push.apply(notations, _toConsumableArray(items));\n\t\n\t        // add the lyrics and/or alText to the first notation that makes sense...\n\t        var notationWithLyrics = null;\n\t        for (var i = 0; i < items.length; i++) {\n\t          var cne = items[i];\n\t\n\t          if (cne.isAccidental && i + 1 < items.length) continue;\n\t\n\t          notationWithLyrics = cne;\n\t          break;\n\t        }\n\t\n\t        var m = __altTranslationRegex.exec();\n\t        var indexOffset = 0;\n\t        while (m = __altTranslationRegex.exec(lyricText)) {\n\t          var index = m.index;\n\t          lyricText = lyricText.slice(0, index) + lyricText.slice(index + m[0].length);\n\t          index += sourceIndex + indexOffset + 1;\n\t          if (typeof m[1] === \"string\") {\n\t            var elem = new _ExsurgeDrawing.AboveLinesText(ctxt, m[1], notationWithLyrics, index + 4);\n\t            elem.alIndex = alText.push(elem) - 1;\n\t          } else if (typeof m[2] === \"string\") {\n\t            var _elem = new _ExsurgeDrawing.AboveLinesText(ctxt, m[3], notationWithLyrics, index + m[2].length);\n\t            _elem.alIndex = alText.push(_elem) - 1;\n\t          } else {\n\t            var _elem2 = new _ExsurgeDrawing.TranslationText(ctxt, m[3], notationWithLyrics, index);\n\t            _elem2.translationIndex = translationText.push(_elem2) - 1;\n\t          }\n\t          indexOffset += m[0].length;\n\t          __altTranslationRegex.exec();\n\t        }\n\t        if (lyricText === \"\" && alText.length === 0) continue;\n\t\n\t        if (notationWithLyrics === null) return new _ExsurgeChant.ChantMapping(word, notations, sourceIndex);\n\t\n\t        if (alText.length) notationWithLyrics.alText = alText;\n\t\n\t        if (translationText.length) {\n\t          notationWithLyrics.translationText = translationText;\n\t          for (i = 0; i < translationText.length; ++i) {\n\t            var transText = translationText[i];\n\t            if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n\t              var lastTranslationText = lastTranslationNeumes[0].translationText[i];\n\t              if (lastTranslationText) lastTranslationText.endNeume = notationWithLyrics;\n\t            }\n\t          }\n\t          lastTranslationNeumes[0] = notationWithLyrics;\n\t        }\n\t\n\t        if (lyricText === \"\") continue;\n\t\n\t        var proposedLyricType;\n\t\n\t        // if it's not a neume or a TextOnly notation, then make the lyrics a directive\n\t        if (!cne.isNeume && cne.constructor !== _ExsurgeChant.TextOnly) proposedLyricType = _ExsurgeDrawing.LyricType.Directive;\n\t        // otherwise trye to guess the lyricType for the first lyric anyway\n\t        else if (currSyllable === 0 && j === matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.SingleSyllable;else if (currSyllable === 0 && j < matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.BeginningSyllable;else if (j === matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.EndingSyllable;else proposedLyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;\n\t\n\t        currSyllable++;\n\t\n\t        var lyrics = this.createSyllableLyrics(ctxt, lyricText, proposedLyricType, notationWithLyrics, items, sourceIndex + match.index);\n\t\n\t        if (lyrics === null || lyrics.length === 0) continue;\n\t\n\t        notationWithLyrics.lyrics = lyrics;\n\t      }\n\t\n\t      return new _ExsurgeChant.ChantMapping(word, notations, sourceIndex);\n\t    }\n\t\n\t    // returns an array of lyrics (an array because each syllable can have multiple lyrics)\n\t\n\t  }, {\n\t    key: \"createSyllableLyrics\",\n\t    value: function createSyllableLyrics(ctxt, text, proposedLyricType, notation, notations, sourceIndex) {\n\t      var _this = this;\n\t\n\t      var lyrics = [];\n\t\n\t      // an extension to gabc: multiple lyrics per syllable can be separated by a |\n\t      var lyricTexts = text.split(\"|\");\n\t\n\t      var _loop = function _loop() {\n\t        lyricText = lyricTexts[i];\n\t\n\t\n\t        if (i > 0) {\n\t          if (lyricText.match(/\\s$/)) {\n\t            lyricText = lyricText.replace(/s+$/, \"\");\n\t            proposedLyricType = _ExsurgeDrawing.LyricType.EndingSyllable;\n\t          } else {\n\t            proposedLyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;\n\t          }\n\t        }\n\t\n\t        // gabc allows lyrics to indicate the centering part of the text by\n\t        // using braces to indicate how to center the lyric. So a lyric can\n\t        // look like \"f{i}re\" or \"{fenced}\" to center on the i or on the entire\n\t        // word, respectively. Here we determine if the lyric should be spaced\n\t        // manually with this method of using braces.\n\t        // however, we don't want to consider any braces inside of v tags, so we\n\t        // do a bit of text processing here:\n\t        lyricTextWithoutVTags = lyricText;\n\t\n\t        var vtagRegex = /<v>[\\s\\S]*?<\\/v>/;\n\t        var match = void 0;\n\t        var vtags = [];\n\t        while (match = vtagRegex.exec(lyricTextWithoutVTags)) {\n\t          var index = match.index;\n\t          var length = match[0].length;\n\t          vtags[index] = length;\n\t          lyricTextWithoutVTags = lyricTextWithoutVTags.slice(0, index) + lyricTextWithoutVTags.slice(index + length);\n\t        }\n\t        centerStartIndex = lyricTextWithoutVTags.indexOf(\"{\");\n\t        centerLength = 0;\n\t\n\t\n\t        if (centerStartIndex >= 0) {\n\t          var indexClosingBracket = lyricTextWithoutVTags.indexOf(\"}\");\n\t\n\t          if (indexClosingBracket >= 0 && indexClosingBracket > centerStartIndex) {\n\t            var getTrueIndex = function getTrueIndex(indexWithoutVTags) {\n\t              // map indices back to the lyricText with the V tags:\n\t              var accum = 0;\n\t              for (var _index in vtags) {\n\t                if (vtags.hasOwnProperty(_index) && indexWithoutVTags >= _index) {\n\t                  accum += vtags[_index];\n\t                } else {\n\t                  break;\n\t                }\n\t              }\n\t              return indexWithoutVTags + accum;\n\t            };\n\t            centerStartIndex = getTrueIndex(centerStartIndex);\n\t            indexClosingBracket = getTrueIndex(indexClosingBracket);\n\t            centerLength = indexClosingBracket - centerStartIndex - 1;\n\t\n\t            // strip out the brackets:\n\t            lyricText = lyricText.substring(0, centerStartIndex) + lyricText.substring(centerStartIndex + 1, indexClosingBracket) + lyricText.substring(indexClosingBracket + 1, lyricText.length);\n\t          } else centerStartIndex = -1; // if there's no closing bracket, don't enable centering\n\t        }\n\t\n\t        lyric = _this.makeLyric(ctxt, lyricText, proposedLyricType, notation, notations, sourceIndex);\n\t\n\t\n\t        if (centerStartIndex >= 0) {\n\t          // update indices in case there had been any tags, etc.\n\t          var textIndex = 0,\n\t              centerEndIndex = -1;\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\t\n\t          try {\n\t            for (var _iterator = lyric.spans[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              var span = _step.value;\n\t\n\t              if (centerStartIndex >= span.index && centerStartIndex <= span.index + span.text.length) {\n\t                centerEndIndex = centerStartIndex + centerLength;\n\t                centerStartIndex += textIndex - span.index;\n\t              }\n\t              if (centerEndIndex >= 0 && centerEndIndex >= span.index && centerEndIndex <= span.index + span.text.length) {\n\t                centerEndIndex += textIndex - span.index;\n\t                centerLength = centerEndIndex - centerStartIndex;\n\t                centerEndIndex = -1;\n\t                break;\n\t              }\n\t              textIndex += span.text.length;\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t\n\t          if (centerEndIndex >= 0) {\n\t            centerEndIndex = textIndex;\n\t            centerLength = centerEndIndex - centerStartIndex;\n\t          }\n\t        }\n\t\n\t        // if we have manual lyric centering, then set it now\n\t        if (centerStartIndex >= 0) {\n\t          lyric.centerStartIndex = centerStartIndex;\n\t          lyric.centerLength = centerLength;\n\t        }\n\t\n\t        lyric.lyricIndex = lyrics.push(lyric) - 1;\n\t        sourceIndex += lyricText.length + 1;\n\t      };\n\t\n\t      for (var i = 0; i < lyricTexts.length; i++) {\n\t        var lyricText;\n\t        var lyricTextWithoutVTags;\n\t        var centerStartIndex;\n\t        var centerLength;\n\t        var lyric;\n\t\n\t        _loop();\n\t      }\n\t      notation.lyrics = lyrics;\n\t      return lyrics;\n\t    }\n\t  }, {\n\t    key: \"makeLyric\",\n\t    value: function makeLyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n\t      var elides = false;\n\t      var forceConnector = false;\n\t      if (text.length > 1) {\n\t        if (text[text.length - 1] === \"-\") {\n\t          forceConnector = true;\n\t          if (lyricType === _ExsurgeDrawing.LyricType.EndingSyllable) lyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;else if (lyricType === _ExsurgeDrawing.LyricType.SingleSyllable) lyricType = _ExsurgeDrawing.LyricType.BeginningSyllable;\n\t\n\t          text = text.slice(0, -1);\n\t        } else if (text[text.length - 1] === \" \") {\n\t          if (lyricType === _ExsurgeDrawing.LyricType.MiddleSyllable) lyricType = _ExsurgeDrawing.LyricType.EndingSyllable;else if (lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable) lyricType = _ExsurgeDrawing.LyricType.SingleSyllable;\n\t\n\t          text = text.slice(0, -1);\n\t        } else if (/<\\/i>$/.test(text)) {\n\t          // must be an elision\n\t          elides = true;\n\t        }\n\t      }\n\t\n\t      if (text.match(/^(?:[*†]+|i+j|\\d+)\\.?$/)) lyricType = _ExsurgeDrawing.LyricType.Directive;\n\t\n\t      var lyric = new _ExsurgeDrawing.Lyric(ctxt, text, lyricType, notation, notations, sourceIndex);\n\t      lyric.elidesToNext = elides;\n\t      if (forceConnector) lyric.setForceConnector(true);\n\t\n\t      return lyric;\n\t    }\n\t\n\t    // takes a string of gabc notations and creates exsurge objects out of them.\n\t    // returns an array of notations.\n\t\n\t  }, {\n\t    key: \"parseNotations\",\n\t    value: function parseNotations(ctxt, data, sourceIndex, insertionIndex) {\n\t      var _this2 = this;\n\t\n\t      // if there is no data, then this must be a text only object\n\t      if (!data) return [new _ExsurgeChant.TextOnly(sourceIndex, 0)];\n\t\n\t      var baseSourceIndex = sourceIndex;\n\t      var sourceLength = 0;\n\t      var notations = [];\n\t      var notes = [];\n\t      var trailingSpace = _ExsurgeDrawing.DefaultTrailingSpace;\n\t\n\t      var addToLastSourceGabc = function addToLastSourceGabc(gabc) {\n\t        if (notes.length > 0) {\n\t          notes[notes.length - 1].sourceGabc += gabc;\n\t        }\n\t      };\n\t      var addNotation = function addNotation(notation) {\n\t        // first, if we have any notes left over, we create a neume out of them\n\t        if (notes.length > 0) {\n\t          // create neume(s)\n\t          var neumes = _this2.createNeumesFromNotes(ctxt, notes, trailingSpace);\n\t          for (var i = 0; i < neumes.length; i++) {\n\t            notations.push(neumes[i]);\n\t          }notes = [];\n\t        }\n\t\n\t        // reset the trailing space\n\t        trailingSpace = _ExsurgeDrawing.DefaultTrailingSpace;\n\t\n\t        // then, if we're passed a notation, let's add it\n\t        // also, perform chant logic here\n\t        if (notation !== null) {\n\t          var prevNotation = notations[notations.length - 1];\n\t          notation.sourceIndex = sourceIndex;\n\t          notation.sourceGabc = match[0];\n\t          if (notation.isClef) {\n\t            ctxt.activeClef = notation;\n\t            if (prevNotation && prevNotation.trailingSpace.isDefault && prevNotation.isDivider) {\n\t              prevNotation.trailingSpace = TrailingSpaceForAccidental;\n\t            }\n\t          } else if (notation.isAccidental) {\n\t            ctxt.activeClef.activeAccidental = notation;\n\t          } else if (notation.trailingSpace.isDefault && notation instanceof Signs.Custos) {\n\t            notation.trailingSpace = TrailingSpaceForAccidental;\n\t          } else if (notation.resetsAccidentals) ctxt.activeClef.resetAccidentals();\n\t\n\t          notations.push(notation);\n\t        }\n\t      };\n\t\n\t      var regex = new RegExp(__notationsRegex.source, \"g\");\n\t      var match;\n\t\n\t      while (match = regex.exec(data)) {\n\t        sourceIndex = baseSourceIndex + match.index;\n\t        sourceLength = match[0].length;\n\t        var atom = match[0];\n\t\n\t        // handle the clefs and dividers here\n\t        switch (atom) {\n\t          case \",\":\n\t            addNotation(new Signs.QuarterBar());\n\t            break;\n\t          case \"`\":\n\t            addNotation(new Signs.Virgula());\n\t            break;\n\t          case \";\":\n\t            addNotation(new Signs.HalfBar());\n\t            break;\n\t          case \";1\":\n\t          case \";2\":\n\t          case \";3\":\n\t          case \";4\":\n\t          case \";5\":\n\t          case \";6\":\n\t          case \",1\":\n\t          case \",2\":\n\t          case \",3\":\n\t          case \",4\":\n\t          case \",5\":\n\t          case \",6\":\n\t            addNotation(new Signs.DominicanBar(parseInt(atom[1], 10)));\n\t            break;\n\t          case \":\":\n\t            addNotation(new Signs.FullBar());\n\t            break;\n\t          case \"::\":\n\t            addNotation(new Signs.DoubleBar());\n\t            break;\n\t          // other gregorio dividers are not supported yet\n\t\n\t          case \"c1\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-3, 2));\n\t            break;\n\t\n\t          case \"c2\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-1, 2));\n\t            break;\n\t\n\t          case \"c3\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(1, 2));\n\t            break;\n\t\n\t          case \"c4\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(3, 2));\n\t            break;\n\t\n\t          case \"f1\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(-3, 2));\n\t            break;\n\t\n\t          case \"f2\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(-1, 2));\n\t            break;\n\t\n\t          case \"f3\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(1, 2));\n\t            break;\n\t\n\t          case \"f4\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(3, 2));\n\t            break;\n\t\n\t          case \"cb1\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-3, 2, new Signs.Accidental(-4, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"cb2\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(-1, 2, new Signs.Accidental(-2, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"cb3\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(1, 2, new Signs.Accidental(0, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"cb4\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(3, 2, new Signs.Accidental(2, Signs.AccidentalType.Flat)));\n\t            break;\n\t\n\t          case \"z\":\n\t            addNotation(new _ExsurgeChant.ChantLineBreak(true));\n\t            break;\n\t          case \"Z\":\n\t            addNotation(new _ExsurgeChant.ChantLineBreak(false));\n\t            break;\n\t          case \"z0\":\n\t            addNotation(new Signs.Custos(true));\n\t            break;\n\t\n\t          // spacing indicators\n\t          case \"!\":\n\t            trailingSpace = 0;\n\t            addToLastSourceGabc(atom);\n\t            addNotation(null);\n\t            break;\n\t          case \" \":\n\t            // fixme: is this correct? logically what is the difference in gabc\n\t            // between putting a space between notes vs putting '//' between notes?\n\t            trailingSpace = TrailingSpaceMultiple(2);\n\t            addToLastSourceGabc(atom);\n\t            addNotation(null);\n\t            break;\n\t\n\t          default:\n\t            // might be a number of slashes, a custos, might be an accidental, or might be a note\n\t            if (atom[0] === \"/\") {\n\t              trailingSpace = TrailingSpaceMultiple(atom.length);\n\t              addToLastSourceGabc(atom);\n\t              addNotation(null);\n\t            } else if (atom.length > 1 && atom[1] === \"+\") {\n\t              // custos\n\t              var custos = new Signs.Custos();\n\t\n\t              custos.staffPosition = this.gabcHeightToExsurgeHeight(atom[0]);\n\t\n\t              addNotation(custos);\n\t            } else if (atom.length > 1 && /[xy#]/.test(atom[1])) {\n\t              var accidentalType;\n\t\n\t              switch (atom[1]) {\n\t                case \"y\":\n\t                  accidentalType = Signs.AccidentalType.Natural;\n\t                  break;\n\t                case \"#\":\n\t                  accidentalType = Signs.AccidentalType.Sharp;\n\t                  break;\n\t                default:\n\t                  accidentalType = Signs.AccidentalType.Flat;\n\t                  break;\n\t              }\n\t\n\t              var noteArray = [];\n\t              this.createNoteFromData(ctxt, ctxt.activeClef, atom, noteArray, sourceIndex);\n\t              var accidental = new Signs.Accidental(noteArray[0].staffPosition, accidentalType);\n\t              accidental.pitch = this.gabcHeightToExsurgePitch(ctxt.activeClef, atom[0]);\n\t              accidental.sourceIndex = sourceIndex;\n\t              accidental.sourceLength = sourceLength;\n\t              accidental.trailingSpace = TrailingSpaceForAccidental;\n\t\n\t              ctxt.activeClef.activeAccidental = accidental;\n\t\n\t              addNotation(accidental);\n\t            } else if (atom.length > 1 && atom[0] === \"{\") {\n\t              (function () {\n\t                trailingSpace = 0;\n\t                addNotation(null);\n\t                var bracketedNotations = _this2.parseNotations(ctxt, match[__notationsRegex_group_insideBraces], sourceIndex + 1);\n\t                // Set the width of these notations to 0\n\t                bracketedNotations.forEach(function (neume) {\n\t                  neume.hasNoWidth = true;\n\t                  neume.firstWithNoWidth = bracketedNotations[0];\n\t                });\n\t                notations.push.apply(notations, _toConsumableArray(bracketedNotations));\n\t              })();\n\t            } else {\n\t              // looks like it's a note\n\t              if (insertionIndex === -1) {\n\t                trailingSpace = TrailingSpaceMultiple(1);\n\t                addNotation(null);\n\t              }\n\t              this.createNoteFromData(ctxt, ctxt.activeClef, atom, notes, sourceIndex);\n\t              --insertionIndex;\n\t            }\n\t            break;\n\t        }\n\t      }\n\t\n\t      // finish up any remaining notes we have left\n\t      addNotation(null);\n\t\n\t      return notations;\n\t    }\n\t  }, {\n\t    key: \"createNeumesFromNotes\",\n\t    value: function createNeumesFromNotes(ctxt, notes, finalTrailingSpace) {\n\t      var neumes = [];\n\t      var firstNoteIndex = 0;\n\t      var currNoteIndex = 0;\n\t\n\t      // here we use a simple finite state machine to create the neumes from the notes\n\t      // createNeume is helper function which returns the next state after a neume is created\n\t      // (unknownState). Each state object has a neume() function and a handle() function.\n\t      // neume() allows us to create the neume of the state in the event that we run out\n\t      // of notes. handle() gives the state an opportunity to examine the currNote and\n\t      // determine what to do...either transition to a different neume/state, or\n\t      // continue building the neume of that state. handle() returns the next state\n\t\n\t      var createNeume = function createNeume(neume, includeCurrNote) {\n\t        var includePrevNote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\t\n\t        // add the notes to the neume\n\t        var lastNoteIndex;\n\t        if (includeCurrNote) lastNoteIndex = currNoteIndex;else if (includePrevNote) lastNoteIndex = currNoteIndex - 1;else lastNoteIndex = currNoteIndex - 2;\n\t\n\t        if (lastNoteIndex < 0) return;\n\t\n\t        while (firstNoteIndex <= lastNoteIndex) {\n\t          var note = notes[firstNoteIndex++];\n\t          neume.addNote(note);\n\t          if (note.alText) {\n\t            if (!neume.alText) neume.alText = [];\n\t            neume.alText.push(note.alText);\n\t            note.alText.noteIndex = firstNoteIndex - 1;\n\t          }\n\t        }\n\t\n\t        neumes.push(neume);\n\t\n\t        if (includeCurrNote === false) {\n\t          currNoteIndex--;\n\t\n\t          if (includePrevNote === false) currNoteIndex--;\n\t\n\t          neume.keepWithNext = true;\n\t          if (notes[currNoteIndex + 1].shape === _ExsurgeChant.NoteShape.Quilisma) neume.trailingSpace = 0;else {\n\t            neume.trailingSpace = TrailingSpaceMultiple(1);\n\t            neume.allowLineBreakBeforeNext = true;\n\t          }\n\t        }\n\t\n\t        return unknownState;\n\t      };\n\t\n\t      var unknownState = {\n\t        neume: function neume() {\n\t          return new Neumes.Punctum();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Virga) return virgaState;else if (currNote.shape === _ExsurgeChant.NoteShape.Stropha) return apostrophaState;else if (currNote.shape === _ExsurgeChant.NoteShape.Oriscus) return oriscusState;else if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return punctaInclinataState;else if (currNote.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) return createNeume(new Neumes.Punctum(), true);else return punctumState;\n\t        }\n\t      };\n\t\n\t      var punctumState = {\n\t        neume: function neume() {\n\t          return new Neumes.Punctum();\n\t        },\n\t        handle: function handle(currNote, prevNote, notesRemaining) {\n\t          if (currNote.shape || prevNote.liquescent === _ExsurgeChant.LiquescentType.Small) {\n\t            var neume = new Neumes.Punctum();\n\t            var state = createNeume(neume, false);\n\t            // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n\t            // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n\t            // Otherwise, we want no trailing space.\n\t            if (currNote.staffPosition > prevNote.staffPosition && (currNote.staffPosition % 2 === 1 || prevNote.staffPosition !== currNote.staffPosition - 1 || !prevNote.morae || prevNote.morae.length === 0)) neume.trailingSpace = 0;\n\t            return state;\n\t          }\n\t\n\t          if (currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            return podatusState;\n\t          } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t            if (prevNote.ictus) prevNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return climacusState;else if (prevNote.staffPosition - currNote.staffPosition <= 4) {\n\t              return clivisState;\n\t            }\n\t          } else if (!prevNote.morae || !prevNote.morae.length) {\n\t            return distrophaState;\n\t          }\n\t          return createNeume(new Neumes.Punctum(), false);\n\t        }\n\t      };\n\t\n\t      var punctaInclinataState = {\n\t        neume: function neume() {\n\t          return new Neumes.PunctaInclinata();\n\t        },\n\t        handle: function handle() {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.PunctaInclinata(), false);else return punctaInclinataState;\n\t        }\n\t      };\n\t\n\t      var oriscusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Oriscus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default) {\n\t            if (currNote.staffPosition > prevNote.staffPosition) {\n\t              prevNote.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending;\n\t              return createNeume(new Neumes.PesQuassus(), true);\n\t            } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t              prevNote.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending;\n\t              return createNeume(new Neumes.Clivis(), true);\n\t            }\n\t          }\n\t          // stand alone oriscus\n\t          var neume = new Neumes.Oriscus(),\n\t              state = createNeume(neume, false);\n\t          // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n\t          // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n\t          // Otherwise, we want no trailing space.\n\t          if (currNote.staffPosition > prevNote.staffPosition && (currNote.staffPosition % 2 === 1 || prevNote.staffPosition !== currNote.staffPosition - 1 || !prevNote.morae || prevNote.morae.length === 0)) neume.trailingSpace = 0;\n\t          return state;\n\t        }\n\t      };\n\t\n\t      var podatusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Podatus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            if (prevNote.ictus) prevNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t\n\t            if (prevNote.shape === _ExsurgeChant.NoteShape.Oriscus) return salicusState;else return scandicusState;\n\t          } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t            if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return pesSubpunctisState;else return torculusState;\n\t          } else return createNeume(new Neumes.Podatus(), false);\n\t        }\n\t      };\n\t\n\t      var clivisState = {\n\t        neume: function neume() {\n\t          return new Neumes.Clivis();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            return porrectusState;\n\t          } else return createNeume(new Neumes.Clivis(), false);\n\t        }\n\t      };\n\t\n\t      var climacusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Climacus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.Climacus(), false);else return state;\n\t        }\n\t      };\n\t\n\t      var porrectusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Porrectus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return createNeume(new Neumes.PorrectusFlexus(), true);else return createNeume(new Neumes.Porrectus(), false);\n\t        }\n\t      };\n\t\n\t      var pesSubpunctisState = {\n\t        neume: function neume() {\n\t          return new Neumes.PesSubpunctis();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.PesSubpunctis(), false);else return state;\n\t        }\n\t      };\n\t\n\t      var salicusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Salicus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition < prevNote.staffPosition) return salicusFlexusState;else return createNeume(new Neumes.Salicus(), false);\n\t        }\n\t      };\n\t\n\t      var salicusFlexusState = {\n\t        neume: function neume() {\n\t          return new Neumes.SalicusFlexus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          return createNeume(new Neumes.SalicusFlexus(), false);\n\t        }\n\t      };\n\t\n\t      var scandicusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Scandicus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (prevNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.shape === _ExsurgeChant.NoteShape.Inclinatum && currNote.staffPosition < prevNote.staffPosition) {\n\t            // if we get here, then it seems we have a podatus, now being followed by a climacus\n\t            // rather than a scandicus. react accordingly\n\t            return createNeume(new Neumes.Podatus(), false, false);\n\t          } else if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return scandicusFlexusState;else return createNeume(new Neumes.Scandicus(), false);\n\t        }\n\t      };\n\t\n\t      var scandicusFlexusState = {\n\t        neume: function neume() {\n\t          return new Neumes.ScandicusFlexus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          return createNeume(new Neumes.ScandicusFlexus(), false);\n\t        }\n\t      };\n\t\n\t      var virgaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Virga();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum && currNote.staffPosition < prevNote.staffPosition) return climacusState;else if (currNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.staffPosition === prevNote.staffPosition) return bivirgaState;else return createNeume(new Neumes.Virga(), false);\n\t        }\n\t      };\n\t\n\t      var bivirgaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Bivirga();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.staffPosition === prevNote.staffPosition) return createNeume(new Neumes.Trivirga(), true);else return createNeume(new Neumes.Bivirga(), false);\n\t        }\n\t      };\n\t\n\t      var apostrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Apostropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition === prevNote.staffPosition) return distrophaState;else return createNeume(new Neumes.Apostropha(), false);\n\t        }\n\t      };\n\t\n\t      var distrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Distropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition === prevNote.staffPosition) {\n\t            if (prevNote.morae && prevNote.morae.length) {\n\t              return createNeume(new Neumes.Distropha(), false);\n\t            } else {\n\t              return tristrophaState;\n\t            }\n\t          } else return createNeume(new Neumes.Apostropha(), false, false);\n\t        }\n\t      };\n\t\n\t      var tristrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Tristropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          // we only create a tristropha when the note run ends after three\n\t          // and the neume() function of this state is called. Otherwise\n\t          // we always interpret the third note to belong to the next sequence\n\t          // of notes.\n\t          //\n\t          // fixme: gabc allows any number of punctum/stropha in succession...\n\t          // is this a valid neume type? Or is it just multiple *stropha neumes\n\t          // in succession? Should we simplify the apostropha/distropha/\n\t          // tristropha classes to a generic stropha neume that can have 1 or\n\t          // more successive notes?\n\t          return createNeume(new Neumes.Distropha(), false, false);\n\t        }\n\t      };\n\t\n\t      var torculusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Torculus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition > prevNote.staffPosition) {\n\t            var prevNoteButOne = notes[currNoteIndex - 2];\n\t            if (prevNoteButOne && prevNoteButOne.staffPosition - prevNote.staffPosition <= 4) {\n\t              if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t              return torculusResupinusState;\n\t            }\n\t          }\n\t          return createNeume(new Neumes.Torculus(), false);\n\t        }\n\t      };\n\t\n\t      var torculusResupinusState = {\n\t        neume: function neume() {\n\t          return new Neumes.TorculusResupinus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return createNeume(new Neumes.TorculusResupinusFlexus(), true);else return createNeume(new Neumes.TorculusResupinus(), false);\n\t        }\n\t      };\n\t\n\t      var state = unknownState;\n\t\n\t      while (currNoteIndex < notes.length) {\n\t        var prevNote = currNoteIndex > 0 ? notes[currNoteIndex - 1] : null;\n\t        var currNote = notes[currNoteIndex];\n\t\n\t        state = state.handle(currNote, prevNote, notes.length - 1 - currNoteIndex);\n\t\n\t        // if we are on the last note, then try to create a neume if we need to.\n\t        if (currNoteIndex === notes.length - 1 && state !== unknownState) createNeume(state.neume(), true);\n\t\n\t        currNoteIndex++;\n\t      }\n\t\n\t      if (neumes.length > 0) {\n\t        if (!finalTrailingSpace.isDefault) {\n\t          neumes[neumes.length - 1].trailingSpace = finalTrailingSpace;\n\t          neumes[neumes.length - 1].keepWithNext = true;\n\t\n\t          if (finalTrailingSpace > 0) neumes[neumes.length - 1].allowLineBreakBeforeNext = neumes[neumes.length - 1].keepWithNext = true;\n\t        }\n\t      }\n\t\n\t      return neumes;\n\t    }\n\t\n\t    // appends any notes created to the notes array argument\n\t\n\t  }, {\n\t    key: \"createNoteFromData\",\n\t    value: function createNoteFromData(ctxt, clef, data, notes, sourceIndex) {\n\t      var note = new _ExsurgeChant.Note();\n\t      note.sourceIndex = sourceIndex;\n\t      note.sourceGabc = data;\n\t\n\t      if (data.length < 1) throw \"Invalid note data: \" + data;\n\t\n\t      if (data[0] === \"-\") {\n\t        // liquescent initio debilis\n\t        note.liquescent = _ExsurgeChant.LiquescentType.InitioDebilis;\n\t        data = data.substring(1);\n\t      }\n\t\n\t      if (data.length < 1) throw \"Invalid note data: \" + data;\n\t\n\t      // the next char is always the pitch\n\t      var pitch = this.gabcHeightToExsurgePitch(clef, data[0]);\n\t\n\t      if (data[0] === data[0].toUpperCase()) note.shape = _ExsurgeChant.NoteShape.Inclinatum;\n\t\n\t      note.staffPosition = this.gabcHeightToExsurgeHeight(data[0]);\n\t      note.pitch = pitch;\n\t\n\t      var mark;\n\t\n\t      var episemaNoteIndex = notes.length;\n\t      var episemaNote = note;\n\t\n\t      // process the modifiers\n\t      for (var i = 1; i < data.length; i++) {\n\t        var c = data[i];\n\t        var lookahead = \"\\0\";\n\t\n\t        var haveLookahead = i + 1 < data.length;\n\t        if (haveLookahead) lookahead = data[i + 1];\n\t\n\t        switch (c) {\n\t          // rhythmic markings\n\t          case \".\":\n\t            mark = null;\n\t\n\t            // gabc supports putting up to two morae on each note, by repeating the\n\t            // period. here, we check to see if we've already created a mora for the\n\t            // note, and if so, we simply force the second one to have an Above\n\t            // position hint. if a user decides to try to put position indicators\n\t            // on the double morae (such as 1 or 2), then really the behavior is\n\t            // not defined by gabc, so it's on the user to figure it out.\n\t            if (note.morae.length > 0 && notes.length) {\n\t              var previousNote = notes.slice(-1)[0];\n\t              var previousMora = note.morae.slice(-1)[0];\n\t              previousMora.note = previousNote;\n\t            }\n\t\n\t            mark = new Markings.Mora(ctxt, note);\n\t            if (haveLookahead && lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (haveLookahead && lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t\n\t            note.morae.push(mark);\n\t            break;\n\t\n\t          case \"_\":\n\t            var episemaHadModifier = false;\n\t\n\t            mark = new Markings.HorizontalEpisema(episemaNote);\n\t            while (haveLookahead) {\n\t              if (lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;else if (lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (lookahead === \"2\") mark.terminating = true;\n\t              // episema terminates\n\t              else if (lookahead === \"3\") mark.alignment = Markings.HorizontalEpisemaAlignment.Left;else if (lookahead === \"4\") mark.alignment = Markings.HorizontalEpisemaAlignment.Center;else if (lookahead === \"5\") mark.alignment = Markings.HorizontalEpisemaAlignment.Right;else break;\n\t\n\t              // the gabc definition for episemata is so convoluted...\n\t              // - double underscores create episemata over multiple notes.\n\t              // - unless the _ has a 0, 1, 3, 4, or 5 modifier, which means\n\t              //   another underscore puts a second episema on the same note\n\t              // - (when there's a 2 lookahead, then this is treated as an\n\t              //   unmodified underscore, so another underscore would be\n\t              //   added to previous notes\n\t              if (mark.alignment !== Markings.HorizontalEpisemaAlignment.Default && mark.positionHint !== _ExsurgeDrawing.MarkingPositionHint.Below) episemaHadModifier = true;\n\t\n\t              i++;\n\t              haveLookahead = i + 1 < data.length;\n\t\n\t              if (haveLookahead) lookahead = data[i + 1];\n\t            }\n\t\n\t            // since gabc allows consecutive underscores which is a shortcut to\n\t            // apply the episemata to previous notes, we keep track of that here\n\t            // in order to add the new episema to the correct note.\n\t\n\t            if (episemaNote) episemaNote.episemata.push(mark);\n\t\n\t            if (episemaNote === note && episemaHadModifier) episemaNote = note;else if (episemaNoteIndex >= 0 && notes.length > 0) episemaNote = notes[--episemaNoteIndex];\n\t\n\t            break;\n\t\n\t          case \"'\":\n\t            mark = new Markings.Ictus(ctxt, note);\n\t            if (haveLookahead && lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (haveLookahead && lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;else if (note.shape === _ExsurgeChant.NoteShape.Virga)\n\t              // ictus on a virga goes above by default:\n\t              mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t\n\t            note.ictus = mark;\n\t            break;\n\t\n\t          //note shapes\n\t          case \"r\":\n\t            if (haveLookahead && /^[0-5]$/.test(lookahead)) {\n\t              switch (lookahead) {\n\t                case \"0\":\n\t                  note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Cavum;\n\t                  note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Linea;\n\t                  break;\n\t                case \"1\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.AcuteAccent);\n\t                  break;\n\t                case \"2\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.GraveAccent);\n\t                  break;\n\t                case \"3\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.Circle);\n\t                  break;\n\t                case \"4\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.Semicircle);\n\t                  break;\n\t                case \"5\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.ReversedSemicircle);\n\t                  break;\n\t                default:\n\t              }\n\t              i++;\n\t            } else note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Cavum;\n\t            break;\n\t\n\t          case \"R\":\n\t            note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Linea;\n\t            break;\n\t\n\t          case \"s\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Stropha) {\n\t              // if we're already a stropha, that means this is gabc's\n\t              // quick stropha feature (e.g., gsss). create a new note\n\t              var newNote = new _ExsurgeChant.Note();\n\t              newNote.sourceIndex = sourceIndex + i;\n\t              newNote.sourceGabc = \"s\";\n\t              newNote.staffPosition = note.staffPosition;\n\t              newNote.pitch = note.pitch;\n\t              notes.push(note);\n\t              note = newNote;\n\t              episemaNoteIndex++; // since a new note was added, increase the index here\n\t            }\n\t\n\t            note.shape = _ExsurgeChant.NoteShape.Stropha;\n\t            break;\n\t\n\t          case \"v\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Virga) {\n\t              // if we're already a stropha, that means this is gabc's\n\t              // quick virga feature (e.g., gvvv). create a new note\n\t              var _newNote = new _ExsurgeChant.Note();\n\t              _newNote.sourceIndex = sourceIndex + i;\n\t              _newNote.sourceGabc = \"v\";\n\t              _newNote.staffPosition = note.staffPosition;\n\t              _newNote.pitch = note.pitch;\n\t              notes.push(note);\n\t              note = _newNote;\n\t              episemaNoteIndex++; // since a new note was added, increase the index here\n\t            }\n\t\n\t            note.shape = _ExsurgeChant.NoteShape.Virga;\n\t            break;\n\t\n\t          case \"V\":\n\t            note.shape = _ExsurgeChant.NoteShape.Virga;\n\t            note.shapeModifers |= _ExsurgeChant.NoteShapeModifiers.Reverse;\n\t            break;\n\t\n\t          case \"w\":\n\t            note.shape = _ExsurgeChant.NoteShape.Quilisma;\n\t            break;\n\t\n\t          case \"o\":\n\t            note.shape = _ExsurgeChant.NoteShape.Oriscus;\n\t            if (haveLookahead && lookahead === \"<\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending;\n\t              i++;\n\t            } else if (haveLookahead && lookahead === \">\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending;\n\t              i++;\n\t            }\n\t            break;\n\t\n\t          case \"O\":\n\t            note.shape = _ExsurgeChant.NoteShape.Oriscus;\n\t            if (haveLookahead && lookahead === \"<\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending | _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t              i++;\n\t            } else if (haveLookahead && lookahead === \">\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending | _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t              i++;\n\t            } else note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t            break;\n\t\n\t          // liquescents\n\t          case \"~\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) note.liquescent |= _ExsurgeChant.LiquescentType.Small;else if (note.shape === _ExsurgeChant.NoteShape.Oriscus) note.liquescent |= _ExsurgeChant.LiquescentType.Large;else note.liquescent |= _ExsurgeChant.LiquescentType.Small;\n\t            break;\n\t          case \"<\":\n\t            note.liquescent |= _ExsurgeChant.LiquescentType.Ascending;\n\t            break;\n\t          case \">\":\n\t            note.liquescent |= _ExsurgeChant.LiquescentType.Descending;\n\t            break;\n\t\n\t          // accidentals\n\t          case \"x\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Mi) note.pitch.step = _ExsurgeCore.Step.Me;else if (note.pitch.step === _ExsurgeCore.Step.Ti) note.pitch.step = _ExsurgeCore.Step.Te;\n\t            break;\n\t          case \"y\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Te) note.pitch.step = _ExsurgeCore.Step.Ti;else if (note.pitch.step === _ExsurgeCore.Step.Me) note.pitch.step = _ExsurgeCore.Step.Mi;else if (note.pitch.step === _ExsurgeCore.Step.Du) note.pitch.step = _ExsurgeCore.Step.Do;else if (note.pitch.step === _ExsurgeCore.Step.Fu) note.pitch.step = _ExsurgeCore.Step.Fa;\n\t            break;\n\t          case \"#\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Do) note.pitch.step = _ExsurgeCore.Step.Du;else if (note.pitch.step === _ExsurgeCore.Step.Fa) note.pitch.step = _ExsurgeCore.Step.Fu;\n\t            break;\n\t\n\t          // gabc special item groups\n\t          case \"[\":\n\t            // read in the whole group and parse it\n\t            var startIndex = ++i;\n\t            while (i < data.length && data[i] !== \"]\") {\n\t              i++;\n\t            }this.processInstructionForNote(ctxt, note, data.substring(startIndex, i), startIndex);\n\t            break;\n\t        }\n\t      }\n\t\n\t      if (this.needToEndBrace && !note.braceStart && !note.braceEnd && !/[xy#]/.test(c)) {\n\t        note.braceEnd = new Markings.BracePoint(note, this.needToEndBrace.isAbove, this.needToEndBrace.shape, this.needToEndBrace.attachment === Markings.BraceAttachment.Left ? Markings.BraceAttachment.Right : Markings.BraceAttachment.Left);\n\t        note.braceEnd.automatic = true;\n\t        delete this.needToEndBrace;\n\t      }\n\t\n\t      notes.push(note);\n\t    }\n\t\n\t    // an instruction in this context is referring to a special gabc coding found after\n\t    // notes between ['s and ]'s. choral signs and braces fall into this\n\t    // category.\n\t    //\n\t    // currently only brace instructions are supported here!\n\t\n\t  }, {\n\t    key: \"processInstructionForNote\",\n\t    value: function processInstructionForNote(ctxt, note, instruction, sourceIndexOffset) {\n\t      var results = instruction.match(__bracketedCommandRegex);\n\t      if (results === null) return;\n\t      var cmd = results[1];\n\t      var data = results[2];\n\t      switch (cmd) {\n\t        case \"cs\":\n\t          note.choralSign = new _ExsurgeDrawing.ChoralSign(ctxt, data, note, note.sourceIndex + sourceIndexOffset, instruction.length);\n\t          return;\n\t        case \"alt\":\n\t          note.alText = new _ExsurgeDrawing.AboveLinesText(ctxt, data, note, note.sourceIndex + sourceIndexOffset, instruction.length);\n\t          return;\n\t      }\n\t\n\t      results = instruction.match(__braceSpecRegex);\n\t\n\t      if (results === null) return;\n\t\n\t      // see the comments at the definition of __braceSpecRegex for the\n\t      // capturing groups\n\t      var above = results[1] === \"o\";\n\t      var shape = Markings.BraceShape.CurlyBrace; // default\n\t\n\t      switch (results[2]) {\n\t        case \"b\":\n\t          shape = Markings.BraceShape.RoundBrace;\n\t          break;\n\t        case \"cb\":\n\t          shape = Markings.BraceShape.CurlyBrace;\n\t          break;\n\t        case \"cba\":\n\t          shape = Markings.BraceShape.AccentedCurlyBrace;\n\t          break;\n\t      }\n\t\n\t      var attachmentPoint = results[3] === \"1\" ? Markings.BraceAttachment.Left : Markings.BraceAttachment.Right;\n\t\n\t      if (results[4] === \"{\" || results[5]) note.braceStart = new Markings.BracePoint(note, above, shape, attachmentPoint);else note.braceEnd = new Markings.BracePoint(note, above, shape, attachmentPoint);\n\t\n\t      // just have the next note end a brace that uses length;\n\t      if (results[5]) {\n\t        note.braceStart.automatic = true;\n\t        this.needToEndBrace = note.braceStart;\n\t      }\n\t    }\n\t\n\t    // takes raw gabc text source and parses it into words. For example, passing\n\t    // in a string of \"me(f.) (,) ma(fff)num(d!ewf) tu(fgF'E)am,(f.)\" would return\n\t    // an array of four strings: [\"me(f.)\", \"(,)\", \"ma(fff)num(d!ewf)\", \"tu(fgF'E)am,(f.)\"]\n\t\n\t  }, {\n\t    key: \"splitWords\",\n\t    value: function splitWords(gabcNotations) {\n\t      // split the notations on whitespace boundaries, as long as the space\n\t      // immediately follows a set of parentheses. Prior to doing that, we replace\n\t      // all whitespace with spaces, which prevents tabs and newlines from ending\n\t      // up in the notation data.\n\t      gabcNotations = gabcNotations\n\t      // .trim()\n\t      // .replace(/\\s/g, \" \")\n\t      .replace(/\\)\\s(?=[^\\)]*(?:\\(|$))/g, \")\\n\");\n\t      return gabcNotations.split(/\\n/g);\n\t    }\n\t  }, {\n\t    key: \"parseSource\",\n\t    value: function parseSource(gabcSource) {\n\t      return this.parseWords(this.splitWords(gabcSource));\n\t    }\n\t\n\t    // gabcWords is an array of strings, e.g., the result of splitWords above\n\t\n\t  }, {\n\t    key: \"parseWords\",\n\t    value: function parseWords(gabcWords) {\n\t      var words = [];\n\t\n\t      for (var i = 0; i < gabcWords.length; i++) {\n\t        words.push(this.parseWord(gabcWords[i]));\n\t      }return words;\n\t    }\n\t\n\t    // returns an array of objects, each of which has the following properties\n\t    //  - notations (string)\n\t    //  - lyrics (array of strings)\n\t\n\t  }, {\n\t    key: \"parseWord\",\n\t    value: function parseWord(gabcWord) {\n\t      var syllables = [];\n\t      var matches = [];\n\t\n\t      syllables.wordLength = gabcWord.length;\n\t\n\t      while (match = __syllablesRegex.exec(gabcWord)) {\n\t        matches.push(match);\n\t      }for (var j = 0; j < matches.length; j++) {\n\t        var match = matches[j];\n\t\n\t        var lyrics = match[1].trim().split(\"|\");\n\t        var notations = match[2];\n\t\n\t        syllables.push({\n\t          notations: notations,\n\t          lyrics: lyrics\n\t        });\n\t      }\n\t\n\t      return syllables;\n\t    }\n\t\n\t    // returns pitch\n\t\n\t  }, {\n\t    key: \"gabcHeightToExsurgeHeight\",\n\t    value: function gabcHeightToExsurgeHeight(gabcHeight) {\n\t      return gabcHeight.toLowerCase().charCodeAt(0) - \"a\".charCodeAt(0) - 6;\n\t    }\n\t\n\t    // returns pitch\n\t\n\t  }, {\n\t    key: \"gabcHeightToExsurgePitch\",\n\t    value: function gabcHeightToExsurgePitch(clef, gabcHeight) {\n\t      var exsurgeHeight = this.gabcHeightToExsurgeHeight(gabcHeight);\n\t\n\t      var pitch = clef.staffPositionToPitch(exsurgeHeight);\n\t\n\t      return pitch;\n\t    }\n\t  }]);\n\n\t  return Gabc;\n\t}();\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Virga = exports.Tristropha = exports.TorculusResupinusFlexus = exports.TorculusResupinus = exports.Torculus = exports.ScandicusFlexus = exports.Scandicus = exports.SalicusFlexus = exports.Salicus = exports.Punctum = exports.PunctaInclinata = exports.PorrectusFlexus = exports.Porrectus = exports.Podatus = exports.PesSubpunctis = exports.PesQuassus = exports.Oriscus = exports.Distropha = exports.Clivis = exports.Climacus = exports.Trivirga = exports.Bivirga = exports.Apostropha = exports.Neume = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NeumeBuilder = function () {\n\t  function NeumeBuilder(ctxt, neume) {\n\t    var startingX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t\n\t    _classCallCheck(this, NeumeBuilder);\n\t\n\t    this.ctxt = ctxt;\n\t    this.neume = neume;\n\t    this.x = startingX;\n\t    this.lastNote = null;\n\t    this.lineIsHanging = false;\n\t    this.minX = 0;\n\t  }\n\t\n\t  // used to start a hanging line on the left of the next note\n\t\n\t\n\t  _createClass(NeumeBuilder, [{\n\t    key: \"lineFrom\",\n\t    value: function lineFrom(note) {\n\t      var previousNotation = this.ctxt.notations[this.ctxt.currNotationIndex - 1];\n\t      if (this.x === 0 && previousNotation && previousNotation.notes && previousNotation.trailingSpace === 0) {\n\t        this.lastNote = previousNotation.notes.slice(-1)[0];\n\t        this.minX = -this.ctxt.neumeLineWeight;\n\t      } else {\n\t        this.lastNote = note;\n\t        this.lineIsHanging = true;\n\t      }\n\t      return this;\n\t    }\n\t\n\t    // add a note, with a connecting line on the left if we have one\n\t\n\t  }, {\n\t    key: \"noteAt\",\n\t    value: function noteAt(note, glyph) {\n\t      var withLineTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\t\n\t      if (!note) throw \"NeumeBuilder.noteAt: note must be a valid note\";\n\t\n\t      if (!glyph) throw \"NeumeBuilder.noteAt: glyph must be a valid glyph code\";\n\t\n\t      note.setGlyph(this.ctxt, glyph);\n\t      var noteAlignsRight = note.glyphVisualizer.align === \"right\";\n\t\n\t      var needsLine = withLineTo && this.lastNote !== null && (this.lineIsHanging || this.lastNote.glyphVisualizer && this.lastNote.glyphVisualizer.align === \"right\" || Math.abs(this.lastNote.staffPosition - note.staffPosition) > 1);\n\t\n\t      if (needsLine) {\n\t        var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, note, this.lineIsHanging);\n\t        this.neume.addVisualizer(line);\n\t        line.bounds.x = Math.max(this.minX, this.x - line.bounds.width);\n\t\n\t        if (!noteAlignsRight) this.x = line.bounds.x;\n\t      }\n\t\n\t      var xOffset = 0;\n\t      if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Linea) {\n\t        var linea = new _ExsurgeDrawing.LineaVisualizer(this.ctxt, note);\n\t        this.neume.addVisualizer(linea);\n\t        note.origin.x += linea.origin.x;\n\t        xOffset = linea.origin.x;\n\t      }\n\t\n\t      // if this is the first note of a right aligned glyph (probably an initio debilis),\n\t      // then there's nothing to worry about. but if it's not then first, then this\n\t      // subtraction will right align it visually\n\t      if (noteAlignsRight && this.lastNote) note.bounds.x = this.x - note.bounds.width;else {\n\t        note.bounds.x = this.x + xOffset;\n\t        this.x += note.bounds.width + xOffset;\n\t      }\n\t\n\t      this.neume.addVisualizer(note);\n\t\n\t      this.lastNote = note;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t\n\t    // a special form of noteAdd that creates a virga\n\t    // uses a punctum cuadratum and a line rather than the virga glyphs\n\t\n\t  }, {\n\t    key: \"virgaAt\",\n\t    value: function virgaAt(note) {\n\t      var withLineTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      // add the punctum for the virga\n\t      this.noteAt(note, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // add a line for the virga\n\t      var line = new _ExsurgeDrawing.VirgaLineVisualizer(this.ctxt, note);\n\t      this.x -= line.bounds.width;\n\t      if (note.shapeModifers & _ExsurgeChant.NoteShapeModifiers.Reverse) {\n\t        line.bounds.x = 0;\n\t      } else {\n\t        line.bounds.x = this.x;\n\t      }\n\t      this.neume.addVisualizer(line);\n\t\n\t      this.lastNote = note;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"advanceBy\",\n\t    value: function advanceBy(x) {\n\t      this.lastNote = null;\n\t      this.lineIsHanging = false;\n\t\n\t      this.x += x;\n\t\n\t      return this;\n\t    }\n\t\n\t    // for terminating hanging lines with no lower notes\n\t\n\t  }, {\n\t    key: \"withLineEndingAt\",\n\t    value: function withLineEndingAt(note) {\n\t      if (this.lastNote === null) return;\n\t\n\t      var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, note, true);\n\t      this.neume.addVisualizer(line);\n\t      this.x -= line.bounds.width;\n\t      line.bounds.x = this.x;\n\t\n\t      this.neume.addVisualizer(line);\n\t\n\t      this.lastNote = note;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withPodatus\",\n\t    value: function withPodatus(lowerNote, upperNote) {\n\t      var upperGlyph;\n\t      var lowerGlyph;\n\t\n\t      if (lowerNote.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        // liquescent upper note or not?\n\t        if (upperNote.liquescent === _ExsurgeChant.LiquescentType.None) upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;else upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.BeginningAscLiquescent;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Ascending) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Descending) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t      } else {\n\t        // standard shape\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PodatusLower;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t      }\n\t\n\t      // allow a quilisma pes\n\t      if (lowerNote.shape === _ExsurgeChant.NoteShape.Quilisma) lowerGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;\n\t\n\t      this.noteAt(lowerNote, lowerGlyph).noteAt(upperNote, upperGlyph);\n\t\n\t      // make sure we don't have lines connected to the podatus\n\t      this.lastNote = null;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withClivis\",\n\t    value: function withClivis(upper, lower) {\n\t      var lowerGlyph;\n\t\n\t      if (upper.shape === _ExsurgeChant.NoteShape.Oriscus) this.noteAt(upper, _ExsurgeDrawing.GlyphCode.OriscusDes, false);else this.lineFrom(lower).noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      if (lower.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (lower.liquescent === _ExsurgeChant.LiquescentType.Ascending) lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (lower.liquescent === _ExsurgeChant.LiquescentType.Descending) lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.noteAt(lower, lowerGlyph);\n\t\n\t      // make sure we don't have lines connected to the clivis\n\t      this.lastNote = null;\n\t\n\t      return this;\n\t    }\n\t\n\t    // lays out a sequence of notes that are inclinata (e.g., climacus, pes subpunctis)\n\t\n\t  }, {\n\t    key: \"withInclinata\",\n\t    value: function withInclinata(notes) {\n\t      var staffPosition = notes[0].staffPosition,\n\t          prevStaffPosition = notes[0].staffPosition;\n\t\n\t      // it is important to advance by the width of the inclinatum glyph itself\n\t      // rather than by individual note widths, so that any liquescents are spaced\n\t      // the same as non-liquscents\n\t      var advanceWidth = _ExsurgeGlyphs.Glyphs.PunctumInclinatum.bounds.width * this.ctxt.glyphScaling;\n\t\n\t      // now add all the punctum inclinatum\n\t      for (var i = 0; i < notes.length; i++, prevStaffPosition = staffPosition) {\n\t        var note = notes[i];\n\t\n\t        if (note.liquescent & _ExsurgeChant.LiquescentType.Small) note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent);else if (note.liquescent & _ExsurgeChant.LiquescentType.Large)\n\t          // fixme: is the large inclinatum liquescent the same as the apostropha?\n\t          note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.Stropha);\n\t          // fixme: some climaci in the new chant books end with a punctum quadratum\n\t          // (see, for example, the antiphon \"Sancta Maria\" for October 7).\n\t        else note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.PunctumInclinatum);\n\t\n\t        staffPosition = note.staffPosition;\n\t\n\t        var multiple = Math.abs(prevStaffPosition - staffPosition);\n\t        switch (multiple) {\n\t          case 0:\n\t            multiple = 1.1;\n\t            break;\n\t          default:\n\t            multiple *= 2 / 3;\n\t            break;\n\t        }\n\t\n\t        if (i > 0) this.x += advanceWidth * multiple;\n\t\n\t        note.bounds.x = this.x;\n\t\n\t        this.neume.addVisualizer(note);\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withPorrectusSwash\",\n\t    value: function withPorrectusSwash(start, end) {\n\t      var needsLine = this.lastNote !== null && (this.lineIsHanging || this.lastNote.glyphVisualizer && this.lastNote.glyphVisualizer.align === \"right\" || Math.abs(this.lastNote.staffPosition - start.staffPosition) > 1);\n\t\n\t      if (needsLine) {\n\t        var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, start, this.lineIsHanging);\n\t        this.x = Math.max(this.minX, this.x - line.bounds.width);\n\t        line.bounds.x = this.x;\n\t        this.neume.addVisualizer(line);\n\t      }\n\t\n\t      var glyph;\n\t\n\t      switch (start.staffPosition - end.staffPosition) {\n\t        case 1:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus1;\n\t          break;\n\t        case 2:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus2;\n\t          break;\n\t        case 3:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus3;\n\t          break;\n\t        case 4:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus4;\n\t          break;\n\t        default:\n\t          // fixme: should we generate an error here?\n\t          glyph = _ExsurgeDrawing.GlyphCode.None;\n\t          break;\n\t      }\n\t\n\t      start.setGlyph(this.ctxt, glyph);\n\t      start.bounds.x = this.x;\n\t\n\t      // the second glyph does not draw anything, but it still has logical importance for the editing\n\t      // environment...it can respond to changes which will then change the swash glyph of the first.\n\t      end.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.None);\n\t\n\t      this.x = start.bounds.right();\n\t      end.bounds.x = this.x - end.bounds.width;\n\t\n\t      this.neume.addVisualizer(start);\n\t      this.neume.addVisualizer(end);\n\t\n\t      this.lastNote = end;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return NeumeBuilder;\n\t}();\n\t\n\t/*\n\t * Neumes base class\n\t */\n\t\n\t\n\tvar Neume = exports.Neume = function (_ChantNotationElement) {\n\t  _inherits(Neume, _ChantNotationElement);\n\t\n\t  function Neume() {\n\t    var notes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\t\n\t    _classCallCheck(this, Neume);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Neume.__proto__ || Object.getPrototypeOf(Neume)).call(this));\n\t\n\t    _this.isNeume = true; // poor man's reflection\n\t    _this.notes = notes;\n\t\n\t    for (var i = 0; i < notes.length; i++) {\n\t      notes[i].neume = _this;\n\t    }return _this;\n\t  }\n\t\n\t  _createClass(Neume, [{\n\t    key: \"addNote\",\n\t    value: function addNote(note) {\n\t      note.neume = this;\n\t      this.notes.push(note);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Neume.prototype.__proto__ || Object.getPrototypeOf(Neume.prototype), \"performLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      this.ledgerLines = this.requiresLedgerLine();\n\t\n\t      // allow subclasses an opportunity to position their own markings...\n\t      this.positionMarkings();\n\t\n\t      // layout the markings of the notes\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        var note = this.notes[i];\n\t        var j;\n\t\n\t        for (j = 0; j < note.episemata.length; j++) {\n\t          note.episemata[j].performLayout(ctxt);\n\t          this.addVisualizer(note.episemata[j]);\n\t        }\n\t\n\t        for (j = 0; j < note.morae.length; j++) {\n\t          note.morae[j].performLayout(ctxt);\n\t          this.addVisualizer(note.morae[j]);\n\t        }\n\t\n\t        // if the note has an ictus, then add it here\n\t        if (note.ictus) {\n\t          note.ictus.performLayout(ctxt);\n\t          this.addVisualizer(note.ictus);\n\t        }\n\t\n\t        if (note.accent) {\n\t          note.accent.performLayout(ctxt);\n\t          this.addVisualizer(note.accent);\n\t        }\n\t\n\t        if (note.choralSign) {\n\t          note.choralSign.performLayout(ctxt);\n\t          this.addVisualizer(note.choralSign);\n\t        }\n\t\n\t        // braces are handled by the chant line, so we don't mess with them here\n\t        // this is because brace size depends on chant line logic (neume spacing,\n\t        // justification, etc.) so they are considered chant line level\n\t        // markings rather than note level markings\n\t      }\n\t\n\t      this.origin.x = this.notes[0].origin.x;\n\t      this.origin.y = this.notes[0].origin.y;\n\t\n\t      _get(Neume.prototype.__proto__ || Object.getPrototypeOf(Neume.prototype), \"finishLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"requiresLedgerLine\",\n\t    value: function requiresLedgerLine() {\n\t      var firstAbove = false,\n\t          needsAbove = false,\n\t          firstBelow = false,\n\t          needsBelow = false,\n\t\n\t      // isPorrectus = false,\n\t      result = [];\n\t\n\t      if (!this.notes) return result;\n\t\n\t      for (var i = 0; i < this.notes.length; ++i) {\n\t        var note = this.notes[i];\n\t        var staffPosition = note.staffPosition;\n\t        if (staffPosition >= 4) {\n\t          needsAbove = needsAbove || staffPosition >= 5;\n\t          if (firstAbove === false) firstAbove = Math.max(0, i - 1);\n\t          if (staffPosition >= 5) continue;\n\t        } else if (staffPosition <= -4) {\n\t          needsBelow = needsBelow || staffPosition <= -5;\n\t          if (firstBelow === false) firstBelow = Math.max(0, i - 1);\n\t          if (staffPosition <= -5) continue;\n\t        }\n\t        if (needsAbove || needsBelow) {\n\t          var endI = i; // Math.abs(staffPosition) >= 4? i : i - 1;\n\t          result.push({\n\t            element: this.notes[firstAbove || firstBelow || 0],\n\t            endElem: this.notes[endI],\n\t            staffPosition: needsAbove ? 5 : -5\n\t          });\n\t          firstAbove = firstBelow = needsAbove = needsBelow = false;\n\t        }\n\t        // isPorrectus = /^Porrectus\\d$/.test(note.glyphVisualizer.glyphCode);\n\t      }\n\t      if (needsAbove || needsBelow) {\n\t        result.push({\n\t          element: this.notes[firstAbove || firstBelow || 0],\n\t          endElem: this.notes[this.notes.length - 1],\n\t          staffPosition: needsAbove ? 5 : -5\n\t        });\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {}\n\t  }, {\n\t    key: \"build\",\n\t    value: function build(ctxt) {\n\t      return new NeumeBuilder(ctxt, this);\n\t    }\n\t  }, {\n\t    key: \"positionEpisemata\",\n\t    value: function positionEpisemata(note, position) {\n\t      var i;\n\t      for (i = 0; i < note.episemata.length; i++) {\n\t        if (note.episemata[i].positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) note.episemata[i].positionHint = position;\n\t      }if (note.choralSign) note.choralSign.positionHint = position;\n\t      return note.episemata.length;\n\t    }\n\t  }, {\n\t    key: \"positionEpisemataAbove\",\n\t    value: function positionEpisemataAbove(note) {\n\t      return this.positionEpisemata(note, _ExsurgeDrawing.MarkingPositionHint.Above);\n\t    }\n\t  }, {\n\t    key: \"positionEpisemataBelow\",\n\t    value: function positionEpisemataBelow(note) {\n\t      return this.positionEpisemata(note, _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t  }, {\n\t    key: \"positionPodatusEpisemata\",\n\t    value: function positionPodatusEpisemata(bottomNote, topNote) {\n\t      // 1. episema on lower note by default be below, upper note above\n\t      this.positionEpisemataBelow(bottomNote);\n\t      this.positionEpisemataAbove(topNote);\n\t      if (topNote.ictus) {\n\t        topNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionInclinataMorae\",\n\t    value: function positionInclinataMorae(notes) {\n\t      notes = notes.slice(-2);\n\t      if (notes.length < 2 || notes[1].staffPosition > notes[0].staffPosition) return;\n\t      var bottomNote = notes[1],\n\t          topNote = notes[0],\n\t          mark;\n\t\n\t      // The mora on the second (lower) note should be below the punctum,\n\t      // if the punctum is on a line and the previous punctum is in the space above.\n\t      if (Math.abs(bottomNote.staffPosition % 2) === 1 && topNote.staffPosition - bottomNote.staffPosition === 1 && bottomNote.morae.length > 0) {\n\t        mark = bottomNote.morae.slice(-1)[0];\n\t        if (mark.positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionPodatusMorae\",\n\t    value: function positionPodatusMorae(bottomNote, topNote) {\n\t      var mark;\n\t\n\t      // The mora on the first (lower) note should be below it,\n\t      // if it is on a line.\n\t      if (Math.abs(bottomNote.staffPosition % 2) === 1) {\n\t        if (bottomNote.morae.length === 1) {\n\t          mark = bottomNote.morae[0];\n\t        } else if (topNote.morae.length > 1) {\n\t          mark = topNote.morae[0];\n\t        }\n\t        if (mark && mark.positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t\n\t      // if there is a mora on the first note but not on the second, and the neume\n\t      // continues with a punctum higher than the second note, we need to adjust\n\t      // the space after the neume so that it follows immediately with no gap\n\t      if (bottomNote.morae.length > 0 && topNote.morae.length === 0) {\n\t        bottomNote.morae[0].ignoreBounds = true;\n\t      }\n\t    }\n\t    // for any subclasses that begin with a podatus, they can call this from their own positionMarkings()\n\t\n\t  }, {\n\t    key: \"positionPodatusMarkings\",\n\t    value: function positionPodatusMarkings(bottomNote, topNote) {\n\t      this.positionPodatusEpisemata(bottomNote, topNote);\n\t      this.positionPodatusMorae(bottomNote, topNote);\n\t    }\n\t\n\t    // just like a clivis, but the first note of the three also works like the second note of the clivis:\n\t    // episema below, unless the middle note also has an episema\n\t\n\t  }, {\n\t    key: \"positionTorculusMarkings\",\n\t    value: function positionTorculusMarkings(firstNote, secondNote, thirdNote) {\n\t      var hasTopEpisema = this.positionClivisMarkings(secondNote, thirdNote);\n\t      hasTopEpisema = this.positionEpisemata(firstNote, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below) && hasTopEpisema;\n\t      return hasTopEpisema;\n\t    }\n\t  }, {\n\t    key: \"positionClivisMorae\",\n\t    value: function positionClivisMorae(firstNote, secondNote) {\n\t      // 1. second note of a clivis that ends on a line and goes down one step has its mora below:\n\t      var morae = firstNote.morae.concat(secondNote.morae);\n\t      if (secondNote.morae.length && firstNote.staffPosition - secondNote.staffPosition === 1 && Math.abs(secondNote.staffPosition % 2) === 1) {\n\t        morae.slice(-1)[0].positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionClivisEpisemata\",\n\t    value: function positionClivisEpisemata(firstNote, secondNote) {\n\t      var hasTopEpisema = this.positionEpisemataAbove(firstNote);\n\t      this.positionEpisemata(secondNote, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t      return hasTopEpisema;\n\t    }\n\t  }, {\n\t    key: \"positionClivisMarkings\",\n\t    value: function positionClivisMarkings(firstNote, secondNote) {\n\t      this.positionClivisMorae(firstNote, secondNote);\n\t      return this.positionClivisEpisemata(firstNote, secondNote);\n\t    }\n\t  }, {\n\t    key: \"positionPorrectusMarkings\",\n\t    value: function positionPorrectusMarkings(firstNote, secondNote, thirdNote) {\n\t      // episemata on first and second note work like a clivis,\n\t      // the second note should have its episema below, unless the first note also has an episema.\n\t      this.positionClivisEpisemata(firstNote, secondNote);\n\t      this.positionPodatusMarkings(secondNote, thirdNote);\n\t    }\n\t  }, {\n\t    key: \"positionPorrectusFlexusMarkings\",\n\t    value: function positionPorrectusFlexusMarkings(first, second, third, fourth) {\n\t      var hasTopEpisema = this.positionEpisemataAbove(first);\n\t      hasTopEpisema = this.positionClivisMarkings(third, fourth) || hasTopEpisema;\n\t      this.positionEpisemata(second, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t\n\t    // subclasses can override this in order to correctly place markings in a neume specific way\n\t\n\t  }, {\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {}\n\t  }]);\n\t\n\t  return Neume;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Apostropha\n\t */\n\t\n\t\n\tvar Apostropha = exports.Apostropha = function (_Neume) {\n\t  _inherits(Apostropha, _Neume);\n\t\n\t  function Apostropha() {\n\t    _classCallCheck(this, Apostropha);\n\t\n\t    return _possibleConstructorReturn(this, (Apostropha.__proto__ || Object.getPrototypeOf(Apostropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Apostropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      var positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t\n\t      // logic here is this: if first episema is default position, place it above.\n\t      // then place the second one (if there is one) opposite of the first.\n\t      for (var i = 0; i < this.notes[0].episemata.length; i++) {\n\t        if (this.notes[0].episemata[i].positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) this.notes[0].episemata[i].positionHint = positionHint;else positionHint = this.notes[0].episemata[i].positionHint;\n\t\n\t        // now place the next one in the opposite position\n\t        positionHint = positionHint === _ExsurgeDrawing.MarkingPositionHint.Above ? _ExsurgeDrawing.MarkingPositionHint.Below : _ExsurgeDrawing.MarkingPositionHint.Above;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Apostropha.prototype.__proto__ || Object.getPrototypeOf(Apostropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], Apostropha.getNoteGlyphCode(this.notes[0]));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }], [{\n\t    key: \"getNoteGlyphCode\",\n\t    value: function getNoteGlyphCode(note) {\n\t      if (note.shape === _ExsurgeChant.NoteShape.Stropha) return _ExsurgeDrawing.GlyphCode.Stropha;\n\t\n\t      if (note.liquescent & _ExsurgeChant.LiquescentType.Ascending) return _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Descending) return _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t      if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) return _ExsurgeDrawing.GlyphCode.PunctumCavum;\n\t\n\t      return _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t    }\n\t  }]);\n\t\n\t  return Apostropha;\n\t}(Neume);\n\t\n\t/*\n\t * Bivirga\n\t *\n\t * For simplicity in implementation, Bivirga's have two notes in the object\n\t * structure. These technically must be the same pitch though.\n\t */\n\t\n\t\n\tvar Bivirga = exports.Bivirga = function (_Neume2) {\n\t  _inherits(Bivirga, _Neume2);\n\t\n\t  function Bivirga() {\n\t    _classCallCheck(this, Bivirga);\n\t\n\t    return _possibleConstructorReturn(this, (Bivirga.__proto__ || Object.getPrototypeOf(Bivirga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Bivirga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Bivirga.prototype.__proto__ || Object.getPrototypeOf(Bivirga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Bivirga;\n\t}(Neume);\n\t\n\t/*\n\t * Trivirga\n\t *\n\t * For simplicity in implementation, Trivirga's have three notes in the object\n\t * structure. These technically must be the same pitch though.\n\t */\n\t\n\t\n\tvar Trivirga = exports.Trivirga = function (_Neume3) {\n\t  _inherits(Trivirga, _Neume3);\n\t\n\t  function Trivirga() {\n\t    _classCallCheck(this, Trivirga);\n\t\n\t    return _possibleConstructorReturn(this, (Trivirga.__proto__ || Object.getPrototypeOf(Trivirga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Trivirga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t      this.positionEpisemataAbove(this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Trivirga.prototype.__proto__ || Object.getPrototypeOf(Trivirga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[1]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[2]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Trivirga;\n\t}(Neume);\n\t\n\t/*\n\t * Climacus\n\t */\n\t\n\t\n\tvar Climacus = exports.Climacus = function (_Neume4) {\n\t  _inherits(Climacus, _Neume4);\n\t\n\t  function Climacus() {\n\t    _classCallCheck(this, Climacus);\n\t\n\t    return _possibleConstructorReturn(this, (Climacus.__proto__ || Object.getPrototypeOf(Climacus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Climacus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        this.positionEpisemataAbove(this.notes[i]);\n\t      }\n\t      this.positionInclinataMorae(this.notes);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Climacus.prototype.__proto__ || Object.getPrototypeOf(Climacus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).withInclinata(this.notes.slice(1));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Climacus;\n\t}(Neume);\n\t\n\t/*\n\t * Clivis\n\t */\n\t\n\t\n\tvar Clivis = exports.Clivis = function (_Neume5) {\n\t  _inherits(Clivis, _Neume5);\n\t\n\t  function Clivis() {\n\t    _classCallCheck(this, Clivis);\n\t\n\t    return _possibleConstructorReturn(this, (Clivis.__proto__ || Object.getPrototypeOf(Clivis)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Clivis, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionClivisMarkings(this.notes[0], this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Clivis.prototype.__proto__ || Object.getPrototypeOf(Clivis.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var upper = this.notes[0];\n\t      var lower = this.notes[1];\n\t\n\t      this.build(ctxt).withClivis(upper, lower);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Clivis;\n\t}(Neume);\n\t\n\t/*\n\t * Distropha\n\t *\n\t * For simplicity in implementation, Distropha's have two notes in the object\n\t * structure. These technically must be the same pitch though (like Bivirga).\n\t */\n\t\n\t\n\tvar Distropha = exports.Distropha = function (_Neume6) {\n\t  _inherits(Distropha, _Neume6);\n\t\n\t  function Distropha() {\n\t    _classCallCheck(this, Distropha);\n\t\n\t    return _possibleConstructorReturn(this, (Distropha.__proto__ || Object.getPrototypeOf(Distropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Distropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Distropha.prototype.__proto__ || Object.getPrototypeOf(Distropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t      var glyphCodes = this.notes.map(function (note) {\n\t        return Apostropha.getNoteGlyphCode(note);\n\t      });\n\t      var glyphAdvance = ctxt.intraNeumeSpacing;\n\t      glyphCodes.slice(0, 2).forEach(function (glyphCode) {\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.Stropha) glyphAdvance -= ctxt.intraNeumeSpacing / 4;\n\t      });\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], glyphCodes[0]).advanceBy(glyphAdvance).noteAt(this.notes[1], glyphCodes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Distropha;\n\t}(Neume);\n\t\n\t/*\n\t * Oriscus\n\t */\n\t\n\t\n\tvar Oriscus = exports.Oriscus = function (_Neume7) {\n\t  _inherits(Oriscus, _Neume7);\n\t\n\t  function Oriscus() {\n\t    _classCallCheck(this, Oriscus);\n\t\n\t    return _possibleConstructorReturn(this, (Oriscus.__proto__ || Object.getPrototypeOf(Oriscus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Oriscus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Oriscus.prototype.__proto__ || Object.getPrototypeOf(Oriscus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // determine the glyph to use\n\t      var note = this.notes[0];\n\t      var glyph;\n\t\n\t      if (note.liquescent !== _ExsurgeChant.LiquescentType.None) {\n\t        glyph = _ExsurgeDrawing.GlyphCode.OriscusLiquescent;\n\t      } else {\n\t        if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Ascending) glyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;else if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Descending) glyph = _ExsurgeDrawing.GlyphCode.OriscusDes;else {\n\t          // by default we take the descending form, unless we can figure out by a lookahead here\n\t          glyph = _ExsurgeDrawing.GlyphCode.OriscusDes;\n\t\n\t          // try to find a neume following this one\n\t          var neume = ctxt.findNextNeume();\n\t\n\t          if (neume) {\n\t            var nextNoteStaffPosition = ctxt.activeClef.pitchToStaffPosition(neume.notes[0].pitch);\n\t\n\t            if (nextNoteStaffPosition > note.staffPosition) glyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.build(ctxt).noteAt(note, glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {\n\t      // a single oriscus tries to automatically use the right direction\n\t      // based on the following neumes. if we don't have a manually designated\n\t      // direction, then we reset our layout so that we can try to guess it\n\t      // at next layout phase.\n\t      if (this.notes[0].shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Ascending || this.notes[0].shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Descending) return;\n\t\n\t      this.needsLayout = true;\n\t    }\n\t  }]);\n\t\n\t  return Oriscus;\n\t}(Neume);\n\t\n\t/*\n\t * PesQuassus\n\t */\n\t\n\t\n\tvar PesQuassus = exports.PesQuassus = function (_Neume8) {\n\t  _inherits(PesQuassus, _Neume8);\n\t\n\t  function PesQuassus() {\n\t    _classCallCheck(this, PesQuassus);\n\t\n\t    return _possibleConstructorReturn(this, (PesQuassus.__proto__ || Object.getPrototypeOf(PesQuassus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PesQuassus, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PesQuassus.prototype.__proto__ || Object.getPrototypeOf(PesQuassus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var lower = this.notes[0];\n\t      var upper = this.notes[1];\n\t\n\t      var lowerGlyph;\n\t\n\t      var lowerStaffPos = lower.staffPosition;\n\t      var upperStaffPos = upper.staffPosition;\n\t\n\t      if (lower.shape === _ExsurgeChant.NoteShape.Oriscus) lowerGlyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;else lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      var builder = this.build(ctxt).noteAt(lower, lowerGlyph);\n\t\n\t      if (upperStaffPos - lowerStaffPos === 1)\n\t        // use a virga glyph in this case\n\t        builder.virgaAt(upper);else if (upper.liquescent === _ExsurgeChant.LiquescentType.LargeDescending) builder.noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent).withLineEndingAt(lower);else builder.noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withLineEndingAt(lower);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PesQuassus;\n\t}(Neume);\n\t\n\t/*\n\t * PesSubpunctis\n\t */\n\t\n\t\n\tvar PesSubpunctis = exports.PesSubpunctis = function (_Neume9) {\n\t  _inherits(PesSubpunctis, _Neume9);\n\t\n\t  function PesSubpunctis() {\n\t    _classCallCheck(this, PesSubpunctis);\n\t\n\t    return _possibleConstructorReturn(this, (PesSubpunctis.__proto__ || Object.getPrototypeOf(PesSubpunctis)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PesSubpunctis, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPodatusEpisemata(this.notes[0], this.notes[1]);\n\t      for (var i = 2; i < this.notes.length; ++i) {\n\t        this.positionEpisemataAbove(this.notes[i]);\n\t      }\n\t      this.positionInclinataMorae(this.notes.slice(1));\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PesSubpunctis.prototype.__proto__ || Object.getPrototypeOf(PesSubpunctis.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // podatus followed by inclinata\n\t      this.build(ctxt).withPodatus(this.notes[0], this.notes[1]).advanceBy(ctxt.intraNeumeSpacing * 0.68).withInclinata(this.notes.slice(2));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PesSubpunctis;\n\t}(Neume);\n\t\n\t/*\n\t * Podatus\n\t *\n\t * This podatus class handles a few neume types actually, depending on the note\n\t * data: Podatus (including various liquescent types on the upper note),\n\t * Podatus initio debilis, and Quilisma-Pes\n\t */\n\t\n\t\n\tvar Podatus = exports.Podatus = function (_Neume10) {\n\t  _inherits(Podatus, _Neume10);\n\t\n\t  function Podatus() {\n\t    _classCallCheck(this, Podatus);\n\t\n\t    return _possibleConstructorReturn(this, (Podatus.__proto__ || Object.getPrototypeOf(Podatus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Podatus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Podatus.prototype.__proto__ || Object.getPrototypeOf(Podatus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).withPodatus(this.notes[0], this.notes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Podatus;\n\t}(Neume);\n\t\n\t/*\n\t * Porrectus\n\t */\n\t\n\t\n\tvar Porrectus = exports.Porrectus = function (_Neume11) {\n\t  _inherits(Porrectus, _Neume11);\n\t\n\t  function Porrectus() {\n\t    _classCallCheck(this, Porrectus);\n\t\n\t    return _possibleConstructorReturn(this, (Porrectus.__proto__ || Object.getPrototypeOf(Porrectus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Porrectus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Porrectus.prototype.__proto__ || Object.getPrototypeOf(Porrectus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      var thirdGlyph;\n\t\n\t      if (third.liquescent & _ExsurgeChant.LiquescentType.Small) thirdGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;else if (third.liquescent & _ExsurgeChant.LiquescentType.Descending) thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else thirdGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t\n\t      this.build(ctxt).lineFrom(second).withPorrectusSwash(first, second).noteAt(third, thirdGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Porrectus;\n\t}(Neume);\n\t\n\t/*\n\t * PorrectusFlexus\n\t */\n\t\n\t\n\tvar PorrectusFlexus = exports.PorrectusFlexus = function (_Neume12) {\n\t  _inherits(PorrectusFlexus, _Neume12);\n\t\n\t  function PorrectusFlexus() {\n\t    _classCallCheck(this, PorrectusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (PorrectusFlexus.__proto__ || Object.getPrototypeOf(PorrectusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PorrectusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusFlexusMarkings(this.notes[0], this.notes[1], this.notes[2], this.notes[3]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PorrectusFlexus.prototype.__proto__ || Object.getPrototypeOf(PorrectusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum,\n\t          fourthGlyph;\n\t\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t        fourthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).lineFrom(second).withPorrectusSwash(first, second).noteAt(third, thirdGlyph).noteAt(fourth, fourthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PorrectusFlexus;\n\t}(Neume);\n\t\n\t// this is some type of pseudo nume right? there is no such thing as a neume\n\t// of puncta inclinata, but this will be part of other composite neumes.\n\t\n\t\n\tvar PunctaInclinata = exports.PunctaInclinata = function (_Neume13) {\n\t  _inherits(PunctaInclinata, _Neume13);\n\t\n\t  function PunctaInclinata() {\n\t    _classCallCheck(this, PunctaInclinata);\n\t\n\t    return _possibleConstructorReturn(this, (PunctaInclinata.__proto__ || Object.getPrototypeOf(PunctaInclinata)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PunctaInclinata, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionInclinataMorae(this.notes);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PunctaInclinata.prototype.__proto__ || Object.getPrototypeOf(PunctaInclinata.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).withInclinata(this.notes);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PunctaInclinata;\n\t}(Neume);\n\t\n\t/*\n\t * Punctum\n\t */\n\t\n\t\n\tvar Punctum = exports.Punctum = function (_Neume14) {\n\t  _inherits(Punctum, _Neume14);\n\t\n\t  function Punctum() {\n\t    _classCallCheck(this, Punctum);\n\t\n\t    return _possibleConstructorReturn(this, (Punctum.__proto__ || Object.getPrototypeOf(Punctum)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Punctum, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Punctum.prototype.__proto__ || Object.getPrototypeOf(Punctum.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var note = this.notes[0];\n\t      var glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      // determine the glyph to use\n\t      if (note.liquescent !== _ExsurgeChant.LiquescentType.None) {\n\t        if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) glyph = _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent;else if (note.shape === _ExsurgeChant.NoteShape.Oriscus) glyph = _ExsurgeDrawing.GlyphCode.OriscusLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Ascending) glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Descending) glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumLiquescent;\n\t      } else {\n\t        if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) glyph = _ExsurgeDrawing.GlyphCode.PunctumCavum;else if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) glyph = _ExsurgeDrawing.GlyphCode.PunctumInclinatum;else if (note.shape === _ExsurgeChant.NoteShape.Quilisma) glyph = _ExsurgeDrawing.GlyphCode.Quilisma;else glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t      }\n\t\n\t      this.build(ctxt).noteAt(note, glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Punctum;\n\t}(Neume);\n\t\n\t/*\n\t * Salicus\n\t */\n\t\n\t\n\tvar Salicus = exports.Salicus = function (_Neume15) {\n\t  _inherits(Salicus, _Neume15);\n\t\n\t  function Salicus() {\n\t    _classCallCheck(this, Salicus);\n\t\n\t    return _possibleConstructorReturn(this, (Salicus.__proto__ || Object.getPrototypeOf(Salicus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Salicus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      // by default place episema below\n\t      // fixme: is this correct?\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        this.positionEpisemataBelow(this.notes[i]);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Salicus.prototype.__proto__ || Object.getPrototypeOf(Salicus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      var builder = this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // if the next note doesn't require a stem connector, then add a tad bit\n\t      // of spacing here\n\t      if (!(second.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Stemmed)) builder.advanceBy(ctxt.intraNeumeSpacing);\n\t\n\t      // second note is always an oriscus, which may or may not be stemmed\n\t      // to the first\n\t      builder.noteAt(second, _ExsurgeDrawing.GlyphCode.OriscusAsc);\n\t\n\t      // third note can be a punctum quadratum or various liquescent forms\n\t      if (third.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent);else if (third.liquescent === _ExsurgeChant.LiquescentType.Ascending) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent);else if (third.liquescent === _ExsurgeChant.LiquescentType.Descending) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.virgaAt(third);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Salicus;\n\t}(Neume);\n\t\n\t/*\n\t * Salicus Flexus\n\t */\n\t\n\t\n\tvar SalicusFlexus = exports.SalicusFlexus = function (_Neume16) {\n\t  _inherits(SalicusFlexus, _Neume16);\n\t\n\t  function SalicusFlexus() {\n\t    _classCallCheck(this, SalicusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (SalicusFlexus.__proto__ || Object.getPrototypeOf(SalicusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(SalicusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      var hasTopEpisema = this.positionTorculusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n\t      this.positionEpisemata(this.notes[0], hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(SalicusFlexus.prototype.__proto__ || Object.getPrototypeOf(SalicusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var builder = this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // if the next note doesn't require a stem connector, then add a tad bit\n\t      // of spacing here\n\t      if (!(second.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Stemmed)) builder.advanceBy(ctxt.intraNeumeSpacing);\n\t\n\t      // second note is always an oriscus, which may or may not be stemmed\n\t      // to the first\n\t      builder.noteAt(second, _ExsurgeDrawing.GlyphCode.OriscusAsc);\n\t\n\t      // third note can be a punctum quadratum or various liquescent forms,\n\t      // ...based on note four though!\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // finally, do the fourth note\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent);else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent);else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return SalicusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Scandicus\n\t */\n\t\n\t\n\tvar Scandicus = exports.Scandicus = function (_Neume17) {\n\t  _inherits(Scandicus, _Neume17);\n\t\n\t  function Scandicus() {\n\t    _classCallCheck(this, Scandicus);\n\t\n\t    return _possibleConstructorReturn(this, (Scandicus.__proto__ || Object.getPrototypeOf(Scandicus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Scandicus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      if (this.notes[2].shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t        this.positionEpisemataAbove(this.notes[2]);\n\t      } else {\n\t        this.positionEpisemataBelow(this.notes[0]);\n\t        this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n\t      }\n\t    }\n\t\n\t    // if the third note shape is a virga, then the scadicus is rendered\n\t    // as a podatus followed by a virga. Otherwise, it's rendered as a\n\t    // punctum followed by a podatus...\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Scandicus.prototype.__proto__ || Object.getPrototypeOf(Scandicus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      if (third.shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.build(ctxt).withPodatus(first, second).virgaAt(third);\n\t      } else {\n\t        this.build(ctxt).noteAt(first, first.shape === _ExsurgeChant.NoteShape.Quilisma ? _ExsurgeDrawing.GlyphCode.Quilisma : _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withPodatus(second, third);\n\t      }\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Scandicus;\n\t}(Neume);\n\t\n\t/*\n\t * Scandicus Flexus\n\t */\n\t\n\t\n\tvar ScandicusFlexus = exports.ScandicusFlexus = function (_Neume18) {\n\t  _inherits(ScandicusFlexus, _Neume18);\n\t\n\t  function ScandicusFlexus() {\n\t    _classCallCheck(this, ScandicusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (ScandicusFlexus.__proto__ || Object.getPrototypeOf(ScandicusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ScandicusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      if (this.notes[2].shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t        this.positionClivisMarkings(this.notes[2], this.notes[3]);\n\t      } else {\n\t        this.positionEpisemataBelow(this.notes[0]);\n\t        this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n\t        this.positionEpisemataAbove(this.notes[3]);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(ScandicusFlexus.prototype.__proto__ || Object.getPrototypeOf(ScandicusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      if (third.shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.build(ctxt).withPodatus(first, second).advanceBy(ctxt.intraNeumeSpacing).withClivis(third, fourth);\n\t      } else {\n\t        var fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t        if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t        this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withPodatus(second, third).advanceBy(ctxt.intraNeumeSpacing).noteAt(fourth, fourthGlyph);\n\t      }\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return ScandicusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Torculus\n\t */\n\t\n\t\n\tvar Torculus = exports.Torculus = function (_Neume19) {\n\t  _inherits(Torculus, _Neume19);\n\t\n\t  function Torculus() {\n\t    _classCallCheck(this, Torculus);\n\t\n\t    return _possibleConstructorReturn(this, (Torculus.__proto__ || Object.getPrototypeOf(Torculus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Torculus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionTorculusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Torculus.prototype.__proto__ || Object.getPrototypeOf(Torculus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var note1 = this.notes[0];\n\t      var note2 = this.notes[1];\n\t      var note3 = this.notes[2];\n\t\n\t      var glyph1, glyph3;\n\t\n\t      if (note1.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) glyph1 = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;else if (note1.shape === _ExsurgeChant.NoteShape.Quilisma) glyph1 = _ExsurgeDrawing.GlyphCode.Quilisma;else glyph1 = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (note3.liquescent & _ExsurgeChant.LiquescentType.Small) glyph3 = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;else if (note3.liquescent & _ExsurgeChant.LiquescentType.Ascending) glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note3.liquescent & _ExsurgeChant.LiquescentType.Descending) glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).noteAt(note1, glyph1).noteAt(note2, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).noteAt(note3, glyph3);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Torculus;\n\t}(Neume);\n\t\n\t/*\n\t * TorculusResupinus\n\t */\n\t\n\t\n\tvar TorculusResupinus = exports.TorculusResupinus = function (_Neume20) {\n\t  _inherits(TorculusResupinus, _Neume20);\n\t\n\t  function TorculusResupinus() {\n\t    _classCallCheck(this, TorculusResupinus);\n\t\n\t    return _possibleConstructorReturn(this, (TorculusResupinus.__proto__ || Object.getPrototypeOf(TorculusResupinus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TorculusResupinus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n\t      this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TorculusResupinus.prototype.__proto__ || Object.getPrototypeOf(TorculusResupinus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var firstGlyph, fourthGlyph;\n\t\n\t      if (first.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        firstGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (first.shape === _ExsurgeChant.NoteShape.Quilisma) firstGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;else firstGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) fourthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;else if (third.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fourthGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t\n\t      this.build(ctxt).noteAt(first, firstGlyph).withPorrectusSwash(second, third).noteAt(fourth, fourthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TorculusResupinus;\n\t}(Neume);\n\t\n\t/*\n\t * TorculusResupinusFlexus\n\t */\n\t\n\t\n\tvar TorculusResupinusFlexus = exports.TorculusResupinusFlexus = function (_Neume21) {\n\t  _inherits(TorculusResupinusFlexus, _Neume21);\n\t\n\t  function TorculusResupinusFlexus() {\n\t    _classCallCheck(this, TorculusResupinusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (TorculusResupinusFlexus.__proto__ || Object.getPrototypeOf(TorculusResupinusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TorculusResupinusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusFlexusMarkings(this.notes[1], this.notes[2], this.notes[3], this.notes[4]);\n\t      this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TorculusResupinusFlexus.prototype.__proto__ || Object.getPrototypeOf(TorculusResupinusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t      var fifth = this.notes[4];\n\t\n\t      var firstGlyph,\n\t          fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum,\n\t          fifthGlyph;\n\t\n\t      if (first.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        firstGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (first.shape === _ExsurgeChant.NoteShape.Quilisma) firstGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;else firstGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (fifth.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t        fifthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (fifth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fifth.liquescent & _ExsurgeChant.LiquescentType.Descending) fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).noteAt(first, firstGlyph).withPorrectusSwash(second, third).noteAt(fourth, fourthGlyph).noteAt(fifth, fifthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TorculusResupinusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Tristropha\n\t *\n\t * For simplicity in implementation, Tristropha's have three notes in the object\n\t * structure. These technically must be the same pitch though (like the\n\t * Distropha and Bivirga).\n\t */\n\t\n\t\n\tvar Tristropha = exports.Tristropha = function (_Neume22) {\n\t  _inherits(Tristropha, _Neume22);\n\t\n\t  function Tristropha() {\n\t    _classCallCheck(this, Tristropha);\n\t\n\t    return _possibleConstructorReturn(this, (Tristropha.__proto__ || Object.getPrototypeOf(Tristropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Tristropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t      this.positionEpisemataAbove(this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Tristropha.prototype.__proto__ || Object.getPrototypeOf(Tristropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t      var glyphCodes = this.notes.map(function (note) {\n\t        return Apostropha.getNoteGlyphCode(note);\n\t      });\n\t      var glyphAdvance = glyphCodes[0] === _ExsurgeDrawing.GlyphCode.Stropha ? ctxt.intraNeumeSpacing / 2 : ctxt.intraNeumeSpacing;\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], glyphCodes[0]).advanceBy(glyphAdvance).noteAt(this.notes[1], glyphCodes[1]).advanceBy(glyphAdvance).noteAt(this.notes[2], glyphCodes[2]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Tristropha;\n\t}(Neume);\n\t\n\t/*\n\t * Virga\n\t */\n\t\n\t\n\tvar Virga = exports.Virga = function (_Neume23) {\n\t  _inherits(Virga, _Neume23);\n\t\n\t  function Virga() {\n\t    _classCallCheck(this, Virga);\n\t\n\t    return _possibleConstructorReturn(this, (Virga.__proto__ || Object.getPrototypeOf(Virga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Virga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Virga.prototype.__proto__ || Object.getPrototypeOf(Virga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Virga;\n\t}(Neume);\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Titles = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Benjamin Bloomfield <benjamin@sourceandsummit.com>\n\t//\n\t// Copyright (c) 2019\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Titles = exports.Titles = function (_ChantLayoutElement) {\n\t  _inherits(Titles, _ChantLayoutElement);\n\t\n\t  function Titles(ctxt, score) {\n\t    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n\t        supertitle = _ref.supertitle,\n\t        title = _ref.title,\n\t        subtitle = _ref.subtitle,\n\t        textLeft = _ref.textLeft,\n\t        textRight = _ref.textRight;\n\t\n\t    _classCallCheck(this, Titles);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Titles.__proto__ || Object.getPrototypeOf(Titles)).call(this));\n\t\n\t    _this.score = score;\n\t    _this.setSupertitle(ctxt, supertitle);\n\t    _this.setTitle(ctxt, title);\n\t    _this.setSubtitle(ctxt, subtitle);\n\t    _this.setTextLeft(ctxt, textLeft);\n\t    _this.setTextRight(ctxt, textRight);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Titles, [{\n\t    key: \"setBoundsX\",\n\t    value: function setBoundsX(ctxt, elementName, width) {\n\t      var element = this[elementName];\n\t      switch (ctxt.textStyles[elementName].alignment) {\n\t        case \"left\":\n\t          element.textAnchor = \"start\";\n\t          element.bounds.x = 0;\n\t          break;\n\t        case \"right\":\n\t          element.textAnchor = \"end\";\n\t          element.bounds.x = width;\n\t          break;\n\t        case \"center\":\n\t        default:\n\t          element.textAnchor = \"middle\";\n\t          element.bounds.x = width / 2;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Lays out the titles, and returns their total height\n\t     * @param  {ChantContext} ctxt\n\t     * @return {number}      the tottal height of titles laid out\n\t     */\n\t\n\t  }, {\n\t    key: \"layoutTitles\",\n\t    value: function layoutTitles(ctxt, width) {\n\t      this.bounds = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t      var y = 0;\n\t      if (this.supertitle) {\n\t        this.supertitle.recalculateMetrics(ctxt);\n\t        this.supertitle.setMaxWidth(ctxt, width);\n\t\n\t        this.setBoundsX(ctxt, \"supertitle\", width);\n\t        this.supertitle.bounds.y = y;\n\t        this.bounds.union(this.supertitle.bounds);\n\t        this.supertitle.bounds.y += this.supertitle.origin.y;\n\t        y += this.supertitle.bounds.height + this.supertitle.padding(ctxt);\n\t      }\n\t      if (this.title) {\n\t        if (y) y += this.title.padding(ctxt);\n\t        this.title.recalculateMetrics(ctxt);\n\t        this.title.setMaxWidth(ctxt, width);\n\t        this.setBoundsX(ctxt, \"title\", width);\n\t        this.title.bounds.y = y;\n\t        this.bounds.union(this.title.bounds);\n\t        this.title.bounds.y += this.title.origin.y;\n\t        y += this.title.bounds.height + this.title.padding(ctxt);\n\t      }\n\t      if (this.subtitle) {\n\t        if (y) y += this.subtitle.padding(ctxt);\n\t        this.subtitle.recalculateMetrics(ctxt);\n\t        this.subtitle.setMaxWidth(ctxt, width);\n\t        this.setBoundsX(ctxt, \"subtitle\", width);\n\t        this.subtitle.bounds.y = y;\n\t        this.bounds.union(this.subtitle.bounds);\n\t        this.subtitle.bounds.y += this.subtitle.origin.y;\n\t        y += this.subtitle.bounds.height + this.subtitle.padding(ctxt);\n\t      }\n\t      var finalY = y,\n\t          textLeft = this.score.overrideTextLeft || this.textLeft;\n\t      if (textLeft) {\n\t        textLeft.recalculateMetrics(ctxt);\n\t        textLeft.bounds.y = y;\n\t        this.bounds.union(textLeft.bounds);\n\t        textLeft.bounds.y += textLeft.origin.y;\n\t        finalY = y + textLeft.bounds.height + textLeft.padding(ctxt);\n\t      }\n\t      if (this.textRight) {\n\t        this.textRight.recalculateMetrics(ctxt);\n\t        this.textRight.bounds.x = width;\n\t        this.textRight.bounds.y = y;\n\t        this.bounds.union(this.textRight.bounds);\n\t        this.textRight.bounds.y += this.textRight.origin.y;\n\t        finalY = Math.max(finalY, y + this.textRight.bounds.height + this.textRight.padding(ctxt));\n\t      }\n\t      return finalY;\n\t    }\n\t  }, {\n\t    key: \"setSupertitle\",\n\t    value: function setSupertitle(ctxt, supertitle) {\n\t      this.supertitle = supertitle ? new _ExsurgeDrawing.Supertitle(ctxt, supertitle) : null;\n\t    }\n\t  }, {\n\t    key: \"setTitle\",\n\t    value: function setTitle(ctxt, title) {\n\t      this.title = title ? new _ExsurgeDrawing.Title(ctxt, title) : null;\n\t    }\n\t  }, {\n\t    key: \"setSubtitle\",\n\t    value: function setSubtitle(ctxt, subtitle) {\n\t      this.subtitle = subtitle ? new _ExsurgeDrawing.Subtitle(ctxt, subtitle) : null;\n\t    }\n\t  }, {\n\t    key: \"setTextLeft\",\n\t    value: function setTextLeft(ctxt, textLeft) {\n\t      this.textLeft = textLeft ? new _ExsurgeDrawing.TextLeftRight(ctxt, textLeft, \"textLeft\") : null;\n\t    }\n\t  }, {\n\t    key: \"setTextRight\",\n\t    value: function setTextRight(ctxt, textRight) {\n\t      this.textRight = textRight ? new _ExsurgeDrawing.TextLeftRight(ctxt, textRight, \"textRight\") : null;\n\t    }\n\t  }, {\n\t    key: \"hasSupertitle\",\n\t    value: function hasSupertitle(ctxt, supertitle) {\n\t      return !!this.supertitle;\n\t    }\n\t  }, {\n\t    key: \"hasTitle\",\n\t    value: function hasTitle(ctxt, title) {\n\t      return !!this.title;\n\t    }\n\t  }, {\n\t    key: \"hasSubtitle\",\n\t    value: function hasSubtitle(ctxt, subtitle) {\n\t      return !!this.subtitle;\n\t    }\n\t  }, {\n\t    key: \"hasTextLeft\",\n\t    value: function hasTextLeft(ctxt, textLeft) {\n\t      return !!this.textLeft;\n\t    }\n\t  }, {\n\t    key: \"hasTextRight\",\n\t    value: function hasTextRight(ctxt, textRight) {\n\t      return !!this.textRight;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\t\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      var _arr = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i = 0; _i < _arr.length; _i++) {\n\t        var el = _arr[_i];\n\t        if (el) el.draw(ctxt, scale);\n\t      }\n\t\n\t      canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getInnerNodes\",\n\t    value: function getInnerNodes(ctxt) {\n\t      var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createSvgNode\";\n\t\n\t      var nodes = [];\n\t\n\t      var _arr2 = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n\t        var el = _arr2[_i2];\n\t        if (el) nodes.push(el[functionName](ctxt));\n\t      }\n\t      return nodes;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var nodes = this.getInnerNodes(ctxt, \"createSvgNode\");\n\t\n\t      var node = _ExsurgeDrawing.QuickSvg.createNode(\"g\", { class: \"Titles\" }, nodes);\n\t\n\t      node.source = this;\n\t      this.svg = node;\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var nodes = this.getInnerNodes(ctxt, \"createSvgTree\");\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", { class: \"Titles\", source: this }].concat(_toConsumableArray(nodes)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = \"\";\n\t\n\t      var _arr3 = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n\t        var el = _arr3[_i3];\n\t        if (el) fragment += el.createSvgFragment(ctxt);\n\t      }\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", { class: \"Titles\" }, fragment);\n\t      return fragment;\n\t    }\n\t  }]);\n\t\n\t  return Titles;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// exsurge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1adf79a25a8f9a5c836b","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n'use strict';\n\n// import { Annotation, ChantContext } from './Exsurge.Drawing.js'\n// import { Gabc } from './Exsurge.Gabc.js'\n//\n// // client side support\n//\n// if (typeof document !== 'undefined' && document.registerElement) {\n//   var ChantVisualElementPrototype = Object.create(HTMLElement.prototype);\n//\n//   ChantVisualElementPrototype.createdCallback = function() {\n//     var ctxt = new ChantContext();\n//\n//     ctxt.setFont(\"'Crimson Text', serif\", 19.2);\n//\n//     var useDropCap = true;\n//     var useDropCapAttr = this.getAttribute(\"use-drop-cap\");\n//     if (useDropCapAttr === 'false')\n//       useDropCap = false;\n//\n//     var score = Gabc.loadChantScore(ctxt, this.innerText, useDropCap);\n//\n//     var annotationAttr = this.getAttribute(\"annotation\");\n//     if (annotationAttr) {\n//       // add an annotation\n//       score.annotation = new Annotation(ctxt, annotationAttr);\n//     }\n//\n//     var _element = this;\n//\n//     var width = 0;\n//     var doLayout = function() {\n//       var newWidth = _element.parentElement.clientWidth;\n//       if(width === newWidth) return;\n//       width = newWidth;\n//       // perform layout on the chant\n//       score.performLayout(ctxt, function() {\n//         score.layoutChantLines(ctxt, width, function() {\n//           // render the score to svg code\n//           _element.appendElement(score.createSvgNode(ctxt));\n//         });\n//       });\n//     }\n//     doLayout();\n//     if (window.addEventListener)\n//       window.addEventListener('resize',doLayout,false);\n//     else if (window.attachEvent)\n//       window.attachEvent('onresize',doLayout);\n//   }\n//\n//   ChantVisualElementPrototype.attachedCallback = function() {\n//\n//   }\n//\n//   // register the custom element\n//   // if(window.customElements && window.customElements.define) {\n//   //   window.customElements.define('chant-visual', ChantVisualElementPrototype);\n//   // } else {\n//     document.registerElement('chant-visual', {\n//       prototype: ChantVisualElementPrototype\n//     });\n//   // }\n// }\n\nexport * from './Exsurge.Core.js'\nexport * from './Exsurge.Text.js'\nexport * from './Exsurge.Glyphs.js'\nexport * from './Exsurge.Drawing.js'\nexport * from './Exsurge.Chant.js'\nexport * from './Exsurge.Chant.ChantLine.js'\nexport * from './Exsurge.Chant.Markings.js'\nexport * from './Exsurge.Chant.Signs.js'\nexport * from './Exsurge.Chant.Neumes.js'\nexport * from './Exsurge.Gabc.js'\nexport * from './Exsurge.Titles.js'\nexport * from './greextraGlyphs.js'\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nexport var Units = {\n  // enums\n  DeviceIndepenedent: 0, // device independent units: 96/inch\n  Centimeters: 1,\n  Millimeters: 2,\n  Inches: 3,\n\n  // constants for device independent units (diu)\n  DIU_PER_INCH: 96,\n  DIU_PER_CENTIMETER: 96 / 2.54,\n\n  ToDeviceIndependent: function (n, inputUnits) {\n    switch (inputUnits) {\n      case Centimeters:\n        return n * Units.DIU_PER_CENTIMETER;\n      case Millimeters:\n        return n * Units.DIU_PER_CENTIMETER / 10;\n      case Inches:\n        return n * Units.DIU_PER_INCH;\n      default:\n        return n;\n    }\n  },\n\n  FromDeviceIndependent: function (n, outputUnits) {\n    switch (outputUnits) {\n      case Centimeters:\n        return n / Units.DIU_PER_CENTIMETER;\n      case Millimeters:\n        return n / Units.DIU_PER_CENTIMETER * 10;\n      case Inches:\n        return n / Units.DIU_PER_INCH;\n      default:\n        return n;\n    }\n  },\n\n\n  StringToUnitsType: function(s) {\n    switch (s.ToLower()) {\n      case \"in\":\n      case \"inches\":\n        return Units.Inches;\n\n      case \"cm\":\n      case \"centimeters\":\n        return Units.Centimeters;\n\n      case \"mm\":\n      case \"millimeters\":\n        return Units.Millimeters;\n\n      case \"di\":\n      case \"device-independent\":\n        return Units.DeviceIndepenedent;\n\n      default:\n        return Units.DeviceIndepenedent;\n    }\n  },\n\n  UnitsTypeToString: function(units) {\n    switch (units) {\n      case Units.Inches: return \"in\";\n      case Units.Centimeters: return \"cm\";\n      case Units.Millimeters: return \"mm\";\n      case Units.DeviceIndepenedent: return \"device-independent\";\n      default: return \"device-independent\";\n    }\n  }\n}\n\nexport function DeviceIndependent(n) {\n  return n;\n}\n\nexport function Centimeters(n) {\n  return Units.ToDeviceIndependent(n, Units.Centimeters);\n}\n\nexport function Millimeters(n) {\n  return Units.ToDeviceIndependent(n, Units.Millimeters);\n}\n\nexport function Inches(n) {\n  return Units.ToDeviceIndependent(n, Units.Inches);\n}\n\nexport function ToCentimeters(n) {\n  return Units.FromDeviceIndependent(n, Units.Centimeters);\n}\n\nexport function ToMillimeters(n) {\n  return Units.FromDeviceIndependent(n, Units.Millimeters);\n}\n\nexport function ToInches(n) {\n  return Units.FromDeviceIndependent(n, Units.Inches);\n}\n\n\n/*\n * Point\n */\nexport class Point {\n  constructor(x, y) {\n    this.x = (typeof x !== 'undefined') ? x : 0;\n    this.y = (typeof y !== 'undefined') ? y : 0;\n  }\n\n  clone() {\n    return new Point(this.x, this.y);\n  }\n\n  equals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n}\n\n/*\n * Rect\n */\nexport class Rect {\n  constructor(x, y, width, height) {\n    this.x = (typeof x !== 'undefined') ? x : Infinity;\n    this.y = (typeof y !== 'undefined') ? y : Infinity;\n    this.width = (typeof width !== 'undefined') ? width : -Infinity;\n    this.height = (typeof height !== 'undefined') ? height : -Infinity;\n  }\n\n  clone() {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  isEmpty() {\n    return (this.x === Infinity &&\n            this.y === Infinity &&\n            this.width === -Infinity &&\n            this.height === -Infinity);\n  }\n\n  // convenience method\n  right() {\n    return this.x + this.width;\n  }\n\n  bottom() {\n    return this.y + this.height;\n  }\n\n  equals(rect) {\n    return this.x === rect.x && this.y === rect.y &&\n           this.width === rect.width && this.height === rect.height;\n  }\n\n  // other can be a Point or a Rect\n  contains(other) {\n    if (other instanceof Point) {\n      return other.x >= this.x &&\n              other.x <= this.x + this.width &&\n              other.y >= this.y &&\n              other.y <= this.y + this.height;\n    } else { // better be instance of Rect\n      return this.x <= other.x &&\n              this.x + this.width >= other.x + other.width &&\n              this.y <= other.y &&\n              this.y + this.height >= other.y + other.height;\n    }\n  }\n\n  union(rect) {\n\n    var right = Math.max(this.x + this.width, rect.x + rect.width);\n    var bottom = Math.max(this.y + this.height, rect.y + rect.height);\n\n    this.x = Math.min(this.x, rect.x);\n    this.y = Math.min(this.y, rect.y);\n\n    this.width = right - this.x;\n    this.height = bottom - this.y;\n  }\n}\n\n/**\n * Margins\n *\n * @class\n */\nexport class Margins {\n  constructor(left, top, right, bottom) {\n    this.left = (typeof left !== 'undefined') ? left : 0;\n    this.top = (typeof top !== 'undefined') ? top : 0;\n    this.right = (typeof right !== 'undefined') ? right : 0;\n    this.bottom = (typeof bottom !== 'undefined') ? bottom : 0;\n  }\n\n  clone() {\n    return new Margins(this.left, this.top, this.right, this.bottom);\n  }\n\n  equals(margins) {\n    return this.left === margins.left &&\n        this.top === margins.top &&\n        this.right === margins.right &&\n        this.bottom === margins.bottom;\n  }\n}\n\n/**\n * Size\n *\n * @class\n */\nexport class Size {\n  constructor(width, height) {\n    this.width = (typeof width !== 'undefined') ? width : 0;\n    this.height = (typeof height !== 'undefined') ? height : 0;\n  }\n\n  clone() {\n    return new Size(this.width, this.height);\n  }\n\n  equals(size) {\n    return this.width === size.width && this.height === size.height;\n  }\n}\n\n\n/*\n * Pitches, notes\n */\nexport var Step = {\n  Do: 0,\n  Du: 1,\n  Re: 2,\n  Me: 3,\n  Mi: 4,\n  Fa: 5,\n  Fu: 6,\n  So: 7,\n  La: 9,\n  Te: 10,\n  Ti: 11\n};\n\n  // this little array helps map step values to staff positions. The numeric values of steps\n  // correspond to whole step increments (2) or half step increments (1). This gives us the ability\n  // to compare pitches precisely, but makes it challenging to place steps on the staff. this little\n  // array maps the steps to an incremental position the steps take on the staff line. This works\n  // so simply because chant only uses do and fa clefs, and only has a flatted ti (te), making\n  // for relatively easy mapping to staff line locations.\n  //                         Do Du Re Me Mi Fa Fu So    La Te Ti\nvar __StepToStaffPosition = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6];\nvar __StaffOffsetToStep = [Step.Do, Step.Re, Step.Mi, Step.Fa, Step.So, Step.La, Step.Ti]; // no accidentals in this one\n\n\nexport class Pitch {\n  constructor(step, octave) {\n    if(typeof octave === 'undefined') {\n      octave = Math.floor(step / 12)\n      step = step % 12;\n    }\n    this.step = step;\n    this.octave = octave;\n  }\n\n  toInt() {\n    return this.octave * 12 + this.step;\n  }\n\n  transpose(step) {\n    return new Pitch(this.toInt() + step);\n  }\n\n  isHigherThan(pitch) {\n    return this.toInt() > pitch.toInt();\n  }\n\n  isLowerThan(pitch) {\n    return this.toInt() < pitch.toInt();\n  }\n\n  equals(pitch) {\n    return this.toInt() === pitch.toInt();\n  }\n\n  static stepToStaffOffset(step) {\n    return __StepToStaffPosition[step];\n  }\n\n  static staffOffsetToStep(offset) {\n    while (offset < 0)\n      offset = __StaffOffsetToStep.length + offset;\n\n    return __StaffOffsetToStep[offset % __StaffOffsetToStep.length];\n  }\n}\n\nexport function generateRandomGuid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4();\n}\n\nexport function getCssForProperties(properties) {\n  return Object.entries(properties)\n    .map(([key, val]) =>\n      key && val && key !== \"class\" ? `${key}: ${val};` : \"\"\n    )\n    .join(\"\");\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Core.js","//\n\n/**\n * @class\n */\nexport class Language {\n  constructor(name) {\n    this.name = typeof name !== \"undefined\" ? name : \"<unknown>\";\n    this.centerNeume = false;\n  }\n\n  /**\n   * @param {String} text The string to parsed into words.\n   * @return {Word[]} the resulting parsed words from syllabification\n   */\n  syllabify(text) {\n    var parsedWords = [];\n\n    if (typeof text === \"undefined\" || text === \"\") return parsedWords;\n\n    // Divide the text into words separated by whitespace\n    var words = text.split(/[\\s]+/);\n\n    for (var i = 0, end = words.length; i < end; i++)\n      parsedWords.push(this.syllabifyWord(words[i]));\n\n    return parsedWords;\n  }\n}\n\nexport class English extends Language {\n  constructor() {\n    super(\"English\");\n    this.centerNeume = true;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var regexLetter = /[a-z\\u0300-\\u0311äëïöüÿáéíóúýàèìòùỳāēīōūȳăĕĭŏŭæœ‿]+/i;\n    var match = regexLetter.exec(s.slice(startIndex));\n    if (match)\n      return {\n        found: true,\n        startIndex: startIndex + match.index,\n        length: match[0].length\n      };\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\n/**\n * @class\n */\nexport class Latin extends Language {\n  /**\n   * @constructs\n   */\n  constructor() {\n    super(\"Latin\");\n\n    // fixme: ui is only diphthong in the exceptional cases below (according to Wheelock's Latin)\n    this.diphthongs = [\"ae\", \"au\", \"oe\", \"aé\", \"áu\", \"oé\"];\n    // for centering over the vowel, we will need to know any combinations that might be diphthongs:\n    this.possibleDiphthongs = this.diphthongs.concat([\n      \"ei\",\n      \"eu\",\n      \"ui\",\n      \"éi\",\n      \"éu\",\n      \"úi\"\n    ]);\n    this.regexVowel = /(i|(?:[qg]|^)u)?([eé][iu]|[uú]i|[ao][eé]|[aá]u|[aeiouáéíóúäëïöüāēīōūăĕĭŏŭåe̊o̊ůæœǽyýÿ])/i;\n\n    // some words that are simply exceptions to standard syllabification rules!\n    var wordExceptions = new Object();\n\n    // ui combos pronounced as diphthongs\n    wordExceptions[\"huius\"] = [\"hui\", \"us\"];\n    wordExceptions[\"cuius\"] = [\"cui\", \"us\"];\n    wordExceptions[\"huic\"] = [\"huic\"];\n    wordExceptions[\"cui\"] = [\"cui\"];\n    wordExceptions[\"hui\"] = [\"hui\"];\n\n    // eu combos pronounced as diphthongs\n    wordExceptions[\"euge\"] = [\"eu\", \"ge\"];\n    wordExceptions[\"seu\"] = [\"seu\"];\n\n    this.vowels = [\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"á\",\n      \"é\",\n      \"í\",\n      \"ó\",\n      \"ú\",\n      \"ä\",\n      \"ë\",\n      \"ï\",\n      \"ö\",\n      \"ü\",\n      \"ā\",\n      \"ē\",\n      \"ī\",\n      \"ō\",\n      \"ū\",\n      \"ă\",\n      \"ĕ\",\n      \"ĭ\",\n      \"ŏ\",\n      \"ŭ\",\n      \"å\",\n      \"e̊\",\n      \"o̊\",\n      \"ů\",\n      \"æ\",\n      \"œ\",\n      \"ǽ\", // no accented œ in unicode?\n      \"y\",\n      \"ý\",\n      \"ÿ\"\n    ]; // y is treated as a vowel; not native to Latin but useful for words borrowed from Greek\n\n    this.vowelsThatMightBeConsonants = [\"i\", \"u\"];\n\n    this.muteConsonantsAndF = [\"b\", \"c\", \"d\", \"g\", \"p\", \"t\", \"f\"];\n\n    this.liquidConsonants = [\"l\", \"r\"];\n  }\n\n  // c must be lowercase!\n  isVowel(c) {\n    for (var i = 0, end = this.vowels.length; i < end; i++)\n      if (this.vowels[i] === c) return true;\n\n    return false;\n  }\n\n  isVowelThatMightBeConsonant(c) {\n    for (var i = 0, end = this.vowelsThatMightBeConsonants.length; i < end; i++)\n      if (this.vowelsThatMightBeConsonants[i] === c) return true;\n\n    return false;\n  }\n\n  // substring should be a vowel and the character following\n  isVowelActingAsConsonant(substring) {\n    return (\n      this.isVowelThatMightBeConsonant(substring[0]) &&\n      this.isVowel(substring[1])\n    );\n  }\n\n  /**\n   * f is not a mute consonant, but we lump it together for syllabification\n   * since it is syntactically treated the same way\n   *\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isMuteConsonantOrF(c) {\n    for (var i = 0, end = this.muteConsonantsAndF.length; i < end; i++)\n      if (this.muteConsonantsAndF[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is a liquid consonant\n   */\n  isLiquidConsonant(c) {\n    for (var i = 0, end = this.liquidConsonants.length; i < end; i++)\n      if (this.liquidConsonants[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isDiphthong(s) {\n    for (var i = 0, end = this.diphthongs.length; i < end; i++)\n      if (this.diphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isPossibleDiphthong(s) {\n    for (var i = 0, end = this.possibleDiphthongs.length; i < end; i++)\n      if (this.possibleDiphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  /**\n   * Rules for Latin syllabification (from Collins, \"A Primer on Ecclesiastical Latin\")\n   *\n   * Divisions occur when:\n   *   1. After open vowels (those not followed by a consonant) (e.g., \"pi-us\" and \"De-us\")\n   *   2. After vowels followed by a single consonant (e.g., \"vi-ta\" and \"ho-ra\")\n   *   3. After the first consonant when two or more consonants follow a vowel\n   *      (e.g., \"mis-sa\", \"minis-ter\", and \"san-ctus\").\n   *\n   * Exceptions:\n   *   1. In compound words the consonants stay together (e.g., \"de-scribo\").\n   *   2. A mute consonant (b, c, d, g, p, t) or f followed by a liquid consonant (l, r)\n   *      go with the succeeding vowel: \"la-crima\", \"pa-tris\"\n   *\n   * In addition to these rules, Wheelock's Latin provides this sound exception:\n   *   -  Also counted as single consonants are qu and the aspirates ch, ph,\n   *      th, which should never be separated in syllabification:\n   *      architectus, ar-chi-tec-tus; loquacem, lo-qua-cem.\n   *\n   */\n  syllabifyWord(word) {\n    var syllables = [];\n    var haveCompleteSyllable = false;\n    var previousWasVowel = false;\n    var workingString = word.toLowerCase();\n    var startSyllable = 0;\n\n    var c, lookahead, haveLookahead;\n\n    // a helper function to create syllables\n    var makeSyllable = function(length) {\n      if (haveCompleteSyllable) {\n        syllables.push(word.substr(startSyllable, length));\n        startSyllable += length;\n      }\n\n      haveCompleteSyllable = false;\n    };\n\n    for (var i = 0, wordLength = workingString.length; i < wordLength; i++) {\n      c = workingString[i];\n\n      // get our lookahead in case we need them...\n      lookahead = \"*\";\n      haveLookahead = i + 1 < wordLength;\n\n      if (haveLookahead) lookahead = workingString[i + 1];\n\n      var cIsVowel = this.isVowel(c);\n\n      // i is a special case for a vowel. when i is at the beginning\n      // of the word (Iesu) or i is between vowels (alleluia),\n      // then the i is treated as a consonant (y)\n      if (c === \"i\") {\n        if (i === 0 && haveLookahead && this.isVowel(lookahead))\n          cIsVowel = false;\n        else if (previousWasVowel && haveLookahead && this.isVowel(lookahead)) {\n          cIsVowel = false;\n        }\n      }\n\n      if (c === \"-\") {\n        // a hyphen forces a syllable break, which effectively resets\n        // the logic...\n\n        haveCompleteSyllable = true;\n        previousWasVowel = false;\n        makeSyllable(i - startSyllable);\n        startSyllable++;\n      } else if (cIsVowel) {\n        // once we get a vowel, we have a complete syllable\n        haveCompleteSyllable = true;\n\n        if (\n          previousWasVowel &&\n          !this.isDiphthong(workingString[i - 1] + \"\" + c)\n        ) {\n          makeSyllable(i - startSyllable);\n          haveCompleteSyllable = true;\n        }\n\n        previousWasVowel = true;\n      } else if (haveLookahead) {\n        if (\n          (c === \"q\" && lookahead === \"u\") ||\n          (lookahead === \"h\" && (c === \"c\" || c === \"p\" || c === \"t\"))\n        ) {\n          // handle wheelock's exceptions for qu, ch, ph and th\n          makeSyllable(i - startSyllable);\n          i++; // skip over the 'h' or 'u'\n        } else if (previousWasVowel && this.isVowel(lookahead)) {\n          // handle division rule 2\n          makeSyllable(i - startSyllable);\n        } else if (\n          this.isMuteConsonantOrF(c) &&\n          this.isLiquidConsonant(lookahead)\n        ) {\n          // handle exception 2\n          makeSyllable(i - startSyllable);\n        } else if (haveCompleteSyllable) {\n          // handle division rule 3\n          makeSyllable(i + 1 - startSyllable);\n        }\n\n        previousWasVowel = false;\n      }\n    }\n\n    // if we have a complete syllable, we can add it as a new one. Otherwise\n    // we tack the remaining characters onto the last syllable.\n    if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));\n    else if (startSyllable > 0)\n      syllables[syllables.length - 1] += word.substr(startSyllable);\n\n    return syllables;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var match = this.regexVowel.exec(s.slice(startIndex));\n    if (match) {\n      if (match[1]) {\n        // the first group should be ignored, as it is to separate an i or u that is used as a consonant.\n        match.index += match[1].length;\n      }\n      return {\n        found: true,\n        startIndex: startIndex + match.index,\n        length: match[2].length\n      };\n    }\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\n/**\n * @class\n */\nexport class Spanish extends Language {\n  constructor() {\n    super(\"Spanish\");\n\n    this.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ü\"];\n\n    this.weakVowels = [\"i\", \"u\", \"ü\", \"y\"];\n\n    this.strongVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\n\n    this.diphthongs = [\n      \"ai\",\n      \"ei\",\n      \"oi\",\n      \"ui\",\n      \"ia\",\n      \"ie\",\n      \"io\",\n      \"iu\",\n      \"au\",\n      \"eu\",\n      \"ou\",\n      \"ua\",\n      \"ue\",\n      \"uo\",\n      \"ái\",\n      \"éi\",\n      \"ói\",\n      \"úi\",\n      \"iá\",\n      \"ié\",\n      \"ió\",\n      \"iú\",\n      \"áu\",\n      \"éu\",\n      \"óu\",\n      \"uá\",\n      \"ué\",\n      \"uó\",\n      \"üe\",\n      \"üi\"\n    ];\n\n    this.uDiphthongExceptions = [\"gue\", \"gui\", \"qua\", \"que\", \"qui\", \"quo\"];\n  }\n\n  // c must be lowercase!\n  isVowel(c) {\n    for (var i = 0, end = this.vowels.length; i < end; i++)\n      if (this.vowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isWeakVowel(c) {\n    for (var i = 0, end = this.weakVowels.length; i < end; i++)\n      if (this.weakVowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isStrongVowel(c) {\n    for (var i = 0, end = this.strongVowels.length; i < end; i++)\n      if (this.strongVowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isDiphthong(s) {\n    for (var i = 0, end = this.diphthongs.length; i < end; i++)\n      if (this.diphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  createSyllable(text) {\n    /*\n    var accented = false;\n    var ellidesToNext = false;\n\n    if (text.length > 0) {\n\n        if (text[0] == '`') {\n            accented = true;\n            text = text.substr(1);\n        }\n\n        if (text[text.length - 1] == '_') {\n            ellidesToNext = true;\n            text = text.substr(0, text.length - 1);\n        }\n    }\n\n    var s = new Syllable(text);\n\n    s.isMusicalAccent = accented;\n    s.elidesToNext = ellidesToNext;*/\n\n    return text;\n  }\n\n  /**\n   */\n  syllabifyWord(word) {\n    var syllables = [];\n\n    var haveCompleteSyllable = false;\n    var previousIsVowel = false;\n    var previousIsStrongVowel = false; // only valid if previousIsVowel == true\n    var startSyllable = 0;\n\n    // fixme: first check for prefixes\n\n    for (var i = 0; i < word.length; i++) {\n      var c = word[i].toLowerCase();\n\n      if (this.isVowel(c)) {\n        // we have a complete syllable as soon as we have a vowel\n        haveCompleteSyllable = true;\n\n        var cIsStrongVowel = this.isStrongVowel(c);\n\n        if (previousIsVowel) {\n          // if we're at a strong vowel, then we finish out the last syllable\n          if (cIsStrongVowel) {\n            if (previousIsStrongVowel) {\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable)\n                )\n              );\n              startSyllable = i;\n            }\n          }\n        }\n\n        previousIsVowel = true;\n        previousIsStrongVowel = cIsStrongVowel;\n      } else {\n        if (!haveCompleteSyllable) {\n          // do nothing since we don't have a complete syllable yet...\n        } else {\n          // handle explicit syllable breaks\n          if (word[i] === \"-\") {\n            // start new syllable\n            syllables.push(\n              this.createSyllable(word.substr(startSyllable, i - startSyllable))\n            );\n            startSyllable = ++i;\n          } else {\n            var numberOfConsonants = 1,\n              consonant2;\n\n            // count how many more consonants there are\n            for (var j = i + 1; j < word.length; j++) {\n              if (this.isVowel(word[j])) break;\n              numberOfConsonants++;\n            }\n\n            if (numberOfConsonants === 1) {\n              // start new syllable\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable)\n                )\n              );\n              startSyllable = i;\n            } else if (numberOfConsonants === 2) {\n              consonant2 = word[i + 1].toLowerCase();\n              if (\n                consonant2 === \"l\" ||\n                consonant2 === \"r\" ||\n                (c === \"c\" && consonant2 === \"h\")\n              ) {\n                // split before the consonant pair\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, i - startSyllable)\n                  )\n                );\n                startSyllable = i++;\n              } else {\n                //split the consonants\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, ++i - startSyllable)\n                  )\n                );\n                startSyllable = i;\n              }\n            } else if (numberOfConsonants === 3) {\n              consonant2 = word[i + 1].toLowerCase();\n\n              // if second consonant is s, divide cc-c, otherwise divide c-cc\n              if (consonant2 === \"s\") {\n                i += 2;\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, i - startSyllable)\n                  )\n                );\n              } else\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, ++i - startSyllable)\n                  )\n                );\n\n              startSyllable = i;\n            } else if (numberOfConsonants === 4) {\n              // four always get split cc-cc\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable + 2)\n                )\n              );\n              startSyllable = i + 2;\n              i += 3;\n            }\n          }\n\n          haveCompleteSyllable = false;\n        }\n\n        previousIsVowel = false;\n      }\n    }\n\n    // if we have a complete syllable, we can add it as a new one. Otherwise\n    // we tack the remaining characters onto the last syllable.\n    if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));\n    else if (startSyllable > 0)\n      syllables[syllables.length - 1] += word.substr(startSyllable);\n    else if (syllables.length === 0) syllables.push(this.createSyllable(word));\n\n    return syllables;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var i, end, index;\n    var workingString = s.toLowerCase();\n\n    // do we have a diphthongs?\n    for (i = 0, end = this.diphthongs.length; i < end; i++) {\n      var d = this.diphthongs[i];\n      index = workingString.indexOf(d, startIndex);\n\n      if (index >= 0) {\n        // check the exceptions...\n        if (d[0] === \"u\" && index > 0) {\n          var tripthong = s.substr(index - 1, 3).toLowerCase();\n\n          for (\n            let j = 0, endj = this.uDiphthongExceptions.length;\n            i < endj;\n            j++\n          ) {\n            if (tripthong === this.uDiphthongExceptions[j]) {\n              // search from after the u...\n              return this.findVowelSegment(s, index + 1);\n            }\n          }\n        }\n\n        return { found: true, startIndex: index, length: d.length };\n      }\n    }\n\n    // no diphthongs. Let's look for single vowels then...\n    for (i = 0, end = this.vowels.length; i < end; i++) {\n      index = workingString.indexOf(this.vowels[i], startIndex);\n\n      if (index >= 0) return { found: true, startIndex: index, length: 1 };\n    }\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\nexport const language = {\n  english: new English(),\n  latin: new Latin(),\n  spanish: new Spanish()\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Text.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// generated based on the svg data\nexport let Glyphs = {\n  None: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    origin: {\n      x: 0,\n      y: 0\n    },\n    align: \"left\"\n  },\n  AcuteAccent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M4 0C-.614.52-.614.52-.803-3.182l60.768-108.422c4.52-7.182 10.543-13.67 18.075-13.67 5.27 0 14.31 1.264 23.346 7.793 7.53 5.223 8.803 11.752 8.803 16.975 0 3.917-.52 11.1-8.05 17.628L4 0z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0, // TODO: figure out a better way to align this horizontally.  width should be 110.992,\n      height: 125.794\n    },\n    origin: {\n      x: 0.803,\n      y: 125.274\n    },\n    align: \"left\"\n  },\n  GraveAccent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M105.386.26C110 .78 110 .78 110.189-2.922l-60.768-108.422c-4.52-7.182-10.543-13.67-18.075-13.67-5.27 0-14.31 1.264-23.346 7.793-7.53 5.223-8.803 11.752-8.803 16.975 0 3.917.52 11.1 8.05 17.628L105.386.26z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0, //110.992,\n      height: 125.794\n    },\n    origin: {\n      x: 0, // -110.992,\n      y: 125.274\n    },\n    align: \"left\"\n  },\n  Circle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 -50A50 50 0 0 0 100 -50 50 50 0 0 0 0 -50M10 -50A40 40 0 0 1 90 -50 40 40 0 0 1 10 -50\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100\n    },\n    origin: {\n      x: -50,\n      y: 100\n    }\n  },\n  Semicircle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 -50A50 50 0 0 0 100 -50 5 5 0 0 0 90 -50 40 40 0 0 1 10 -50 5 5 0 0 0 0 -50\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 55\n    },\n    origin: {\n      x: -50,\n      y: 50\n    }\n  },\n  ReversedSemicircle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 0A50 50 0 0 1 100 0 5 5 0 0 1 90 0 40 40 0 0 0 10 0 5 5 0 0 1 0 0\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 55\n    },\n    origin: {\n      x: -50,\n      y: 50\n    }\n  },\n  Stropha: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M1.22-73.438c4.165 13.02 12.238 27.084 24.217 42.188L49.657 0 34.812 27.344C18.666 55.47-.084 72.396-21.438 78.124c4.687-3.645 7.03-8.593 7.03-14.843 0-8.853-4.947-20.572-14.843-35.155L-48 0 1.22-73.438z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 97.657,\n      height: 151.562\n    },\n    origin: {\n      x: 48,\n      y: 73.438\n    },\n    align: \"left\"\n  },\n  BeginningAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 152.344\n    },\n    origin: {\n      x: 50,\n      y: 88.344\n    },\n    align: \"left\"\n  },\n  BeginningDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 151.562\n    },\n    origin: {\n      x: 50,\n      y: 75.562\n    },\n    align: \"left\"\n  },\n  CustosDescLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M39.063 273.472c5.73.52 7.29-6.25 4.687-20.312V-65.59c-13.542 2.083-24.22 5.468-32.03 10.156C3.905-50.226 0-43.714 0-35.904V71.91c5.73-5.21 10.677-8.594 14.844-10.157 5.73-1.562 12.24-2.343 19.53-2.343v196.875c0 11.458 1.563 17.187 4.688 17.187\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 46.353,\n      height: 339.582\n    },\n    origin: {\n      x: 0,\n      y: 65.59\n    },\n    align: \"left\"\n  },\n  CustosDescShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M34.375 191.923c0 8.333 1.563 12.24 4.688 11.72 3.125-.522 4.687-7.033 4.687-19.533v-250c-13.542 2.084-24.22 5.47-32.03 10.157C3.905-50.525 0-44.015 0-36.203V71.61c5.73-5.208 10.677-8.593 14.844-10.156 5.73-1.562 12.24-2.344 19.53-2.344v132.813z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 43.75,\n      height: 270.053\n    },\n    origin: {\n      x: 0,\n      y: 65.89\n    },\n    align: \"left\"\n  },\n  CustosLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M39.063-269.562c5.73-.52 7.29 6.25 4.687 20.312V69.5c-13.542-2.083-24.22-5.47-32.03-10.156C3.905 54.134 0 47.624 0 39.812V-68c5.73 5.208 10.677 8.594 14.844 10.156 5.73 1.563 12.24 2.344 19.53 2.344v-196.875c0-11.458 1.563-17.187 4.688-17.187z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 46.353,\n      height: 339.582\n    },\n    origin: {\n      x: 0,\n      y: 270.082\n    },\n    align: \"left\"\n  },\n  CustosShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M34.375-188.125c0-8.333 1.563-12.24 4.688-11.72 3.125.522 4.687 7.033 4.687 19.532v250c-13.542-2.083-24.22-5.468-32.03-10.156C3.905 54.324 0 47.813 0 40V-67.813c5.73 5.21 10.677 8.594 14.844 10.157 5.73 1.562 12.24 2.344 19.53 2.343v-132.812z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 43.75,\n      height: 270.052\n    },\n    origin: {\n      x: 0,\n      y: 200.365\n    },\n    align: \"left\"\n  },\n  DoClef: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 98.406V-97.688C0-118 5.99-134.275 17.97-146.516c11.978-12.24 27.603-18.36 46.874-18.36 10.937 0 19.53 3.126 25.78 9.376s9.376 14.583 9.376 25v107.813l-6.25-5.47c-4.167-3.645-10.287-7.42-18.36-11.327-8.072-3.907-16.796-5.86-26.17-5.86-11.46 0-21.486 4.427-30.08 13.282-8.593 8.854-12.89 19.53-12.89 32.03s4.297 23.308 12.89 32.423c8.594 9.115 18.62 13.672 30.08 13.672 9.374 0 18.098-1.822 26.17-5.468 8.073-3.646 14.193-7.292 18.36-10.938l6.25-6.25V132c0 9.896-3.125 18.1-9.375 24.61-6.25 6.51-14.844 9.765-25.78 9.765-19.272 0-34.897-6.25-46.876-18.75C5.99 135.125 0 118.72 0 98.405z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 331.251\n    },\n    origin: {\n      x: 0,\n      y: 164.876\n    },\n    align: \"left\"\n  },\n  FaClef: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M85.156-32v193.75c0 9.375-1.562 14.323-4.687 14.844-1.564 0-2.605-.52-3.126-1.563-.52-1.04-.782-2.603-.78-4.686V56.28c-8.335-8.332-19.793-12.5-34.376-12.5-17.71 0-31.77 3.907-42.188 11.72V-32c0-18.23 14.193-27.344 42.578-27.344 28.385 0 42.578 9.115 42.578 27.344zM98.438 93V-92.156c0-19.27 5.73-34.896 17.187-46.875 11.458-11.98 26.562-17.97 45.313-17.97 10.937 0 19.14 2.865 24.61 8.594 5.467 5.73 8.202 13.542 8.202 23.437v103.126l-5.47-4.687c-3.645-3.647-9.374-7.293-17.186-10.94-7.813-3.645-15.886-5.467-24.22-5.468-11.978 0-22.004 4.167-30.077 12.5-8.073 8.334-12.11 18.36-12.11 30.08 0 11.717 4.037 22.004 12.11 30.858s18.1 13.28 30.078 13.28c8.333 0 16.406-1.822 24.22-5.468 7.81-3.645 13.54-7.03 17.186-10.156l5.47-5.468V125.81c0 9.896-2.865 17.84-8.594 23.83-5.73 5.988-13.802 8.983-24.22 8.983-18.75 0-33.853-6.12-45.31-18.36-11.46-12.24-17.19-27.994-17.19-47.265z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 193.752,\n      height: 333.595\n    },\n    origin: {\n      x: 0.001,\n      y: 157.001\n    },\n    align: \"left\"\n  },\n  Flat: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M7.813-204.406c4.166 0 6.25 5.208 6.25 15.625L12.5-10.657C33.854 13.302 54.167 25.28 73.438 25.28c9.374 0 14.062-4.686 14.062-14.06 0-6.25-1.042-11.72-3.125-16.407-2.083-4.688-7.03-9.766-14.844-15.235-7.81-5.47-13.02-8.984-15.624-10.547L27.344-45.81V-80.97c17.187 0 33.073 4.82 47.656 14.454C89.583-56.88 96.875-47.376 96.875-38c0 67.708-.26 101.562-.78 101.563-38.543 0-69.532-12.24-92.97-36.72C0-52.322-1.042-123.936 0-188c0-10.937 2.604-16.406 7.813-16.406z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 97.917,\n      height: 267.969\n    },\n    origin: {\n      x: 1.042,\n      y: 204.406\n    },\n    align: \"left\"\n  },\n  Mora: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M47.478-24c6.957 0 12.793 2.288 17.49 6.883C69.662-12.52 72-6.904 72-.267c0 6.64-2.337 12.352-7.033 17.118C60.27 21.618 54.435 24 47.477 24c-6.26 0-11.748-2.383-16.444-7.15C26.337 12.086 24 6.374 24-.265c0-6.638 2.337-12.255 7.033-16.85C35.73-21.713 41.217-24 47.478-24z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 48,\n      height: 48\n    },\n    origin: {\n      x: -24,\n      y: 24\n    },\n    align: \"left\"\n  },\n  Natural: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M7.906-166.563c-2.864 0-5.614.52-8.218 1.563v13.28l.78 56.25.782 78.907v85.157c.52 3.646 2.604 5.73 6.25 6.25l23.438-3.906 23.437-3.907v29.69c0 42.186-.26 63.54-.78 64.06l6.25 2.345c1.04.52 2.082.78 3.124.78 2.603 0 4.947-1.3 7.03-3.905L67.656-71.25c-.52-2.604-2.083-3.906-4.687-3.906-7.814 0-17.19 1.04-28.126 3.125l-19.53 3.124.78-38.28V-165c-2.604-1.042-5.323-1.562-8.188-1.563zM55.938-40v71.875l-41.407 7.03c0-48.436.262-72.655.783-72.655L55.938-40z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 70.311,\n      height: 330.469\n    },\n    origin: {\n      x: 0.312,\n      y: 166.563\n    },\n    align: \"left\"\n  },\n  Sharp: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"m41.725,-73.773c-5.421,-0.241-10.878,5.856-6.549,12.357L67.061,-20.473 61.264,-12.5 13.436,-71.199c-5.634,-5.934-16.988,1.032-11.232,9.783L50.756,0.182 2.203,61.416c-6.745,7.984 3.442,17.859 11.232,9.783L61.264,12.5l5.797,7.973-31.885,40.943c-5.578,6.844 5.588,16.005 11.594,9.783L77.568,33.154 108.367,71.199c4.894,6.717 17.343,-1.575 11.232,-9.783L87.715,20.473 93.873,12.5 141.34,71.199c6.725,7.67 17.509,-2.248 11.596,-9.783L104.02,0.182 152.936,-61.416c5.52,-7.02-5.541,-16.309-11.596,-9.783L93.873,-12.5l-6.158,-7.973 31.884766,-40.943c5.407,-7.045-5.505,-15.924-11.232,-9.783L77.568,-33.154 46.77,-71.199c-1.435,-1.708-3.238,-2.494-5.044922,-2.574zM77.568,-8.516 84.09,0.182 77.568,8.516 70.684,0.182Z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 154.646,\n      height: 147.987\n    },\n    origin: {\n      x: 0,\n      y: 74.098\n    },\n    align: \"left\"\n  },\n  OriscusAsc: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50 30.25c0 12.5-3.125 21.354-9.375 26.562-3.125 2.605-7.813 3.907-14.063 3.907-3.125 0-5.99-.522-8.593-1.564-2.605-1.04-5.6-2.474-8.986-4.297C5.6 53.035 2.734 51.603.39 50.56c-2.343-1.04-5.338-2.474-8.984-4.296-3.646-1.823-6.77-3.256-9.375-4.297-2.603-1.043-5.468-1.564-8.593-1.564-6.25 0-10.937 1.563-14.062 4.688C-46.875 50.824-50 59.677-50 71.656v-106.25c0-13.02 3.125-21.875 9.375-26.562 3.125-2.604 7.813-3.906 14.063-3.907 3.125 0 5.99.52 8.593 1.563 2.605 1.042 5.73 2.474 9.376 4.297 3.646 1.823 6.51 2.995 8.594 3.516l10.938 5.468c6.25 3.126 11.458 4.69 15.624 4.69 6.25 0 10.938-1.564 14.063-4.69C46.875-55.426 50-64.02 50-76V30.25z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 76\n    },\n    align: \"left\"\n  },\n  OriscusDes: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 30.844v-106.25c0 11.458 3.125 20.052 9.375 25.78 3.125 3.126 7.813 4.69 14.063 4.688 4.687 0 13.41-3.255 26.17-9.765 12.762-6.51 21.746-9.766 26.954-9.766 6.25 0 10.938 1.303 14.063 3.907C46.875-55.874 50-47.02 50-34V72.25c0-11.98-3.125-20.833-9.375-26.563C37.5 42.563 32.812 41 26.562 41 21.875 41 13.023 44.385 0 51.156c-4.167 2.604-8.594 4.948-13.28 7.032-4.69 2.083-9.116 3.124-13.283 3.124-6.25 0-10.937-1.302-14.062-3.906C-46.875 52.198-50 43.344-50 30.844z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 75.406\n    },\n    align: \"left\"\n  },\n  OriscusLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M 19.055,78.887 C 20.242,78.487 21.532,77.890 22.925,77.097 24.318,76.304 26.700882,74.417 30.074,71.438 33.447,68.458 36.524,64.985 39.303,61.019 42.083,57.052 44.563,51.396 46.743,44.05 48.923,36.704 50.013,28.671 50.013,19.950525 L 50.013,-34.226 C 50.013,-54.464 42.074,-64.584 26.195,-64.584 20.248,-64.584 11.519,-61.410 0.007,-55.064 -11.506,-48.717 -20.235,-45.544 -26.182,-45.544 -34.515,-45.544 -40.568,-48.520 -44.340791,-54.473 -48.114,-60.426 -50.000,-67.369 -50.000,-75.303 L -50.000,30.07 C -50.000,49.909 -42.060754,59.829 -26.182,59.829 -21.023,59.829 -12.39,56.455 -0.284,49.709 11.822,42.963 20.648,39.59 26.195,39.59 29.369,40.777 30.362,44.25 29.17479,50.009 27.988,55.768 26.001,62.020829 23.216,68.767 z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 75.406\n    },\n    align: \"left\"\n  },\n  PodatusLower: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-4.688-30.28c22.396 0 34.636-.262 36.72-.782 5.728-1.563 8.593-5.21 8.593-10.938H50v97.656c0 2.604-1.302 4.167-3.906 4.688-5.21.52-21.355.78-48.438.78-23.958 0-38.54-.26-43.75-.78-2.604 0-3.906-1.302-3.906-3.906v-82.032c0-3.646 1.302-5.468 3.906-5.468h2.344c2.604.52 15.625.78 39.063.78z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 103.124\n    },\n    origin: {\n      x: 50,\n      y: 42\n    },\n    align: \"left\"\n  },\n  PodatusUpper: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-46.094-63.78c13.542 0 24.61 2.473 33.203 7.42C-4.298-51.41 0-43.99 0-34.093V62h-9.375c0-10.938-2.604-19.14-7.812-24.61-5.21-5.468-14.844-8.203-28.907-8.202-18.23 0-33.333 4.166-45.312 12.5v-75.782c0-19.79 15.104-29.687 45.312-29.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 91.406,\n      height: 125.781\n    },\n    origin: {\n      x: 91.406,\n      y: 63.781\n    },\n    align: \"right\"\n  },\n  Porrectus1: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M233.594 162.875c-58.855 0-107.032-6.25-144.53-18.75C34.895 125.895-11.46 99.855-50 66V-52.75C-21.354-24.625 26.302 6.885 92.97 41.78 123.697 57.928 163.54 66 212.5 66c21.354 0 34.635-9.896 39.844-29.688V151.94c0 7.29-6.25 10.937-18.75 10.937z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 302.344,\n      height: 215.627\n    },\n    origin: {\n      x: 50,\n      y: 52.75\n    },\n    align: \"left\"\n  },\n  Porrectus2: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M309.375 259.375c-50.52 0-110.938-22.396-181.25-67.188C48.437 141.667-10.938 94.272-50 50V-68.75C0-3.125 60.417 52.083 131.25 96.875c58.333 36.98 110.677 58.854 157.03 65.625h7.033c16.145 0 26.822-9.896 32.03-29.688v114.844c0 7.812-5.99 11.72-17.968 11.72z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 377.343,\n      height: 328.126\n    },\n    origin: {\n      x: 50,\n      y: 68.75\n    },\n    align: \"left\"\n  },\n  Porrectus3: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M309.375 355.78c-48.96-16.666-109.115-55.468-180.47-116.405C79.428 198.23 19.793 134.687-50 48.75V-70C20 40 94.104 103.79 135.25 148.063 190 200 230 230 288.28 258.906c4.168 2.083 8.334 3.125 12.5 3.125 12.5 0 21.355-10.937 26.564-32.81v114.06c0 9.376-3.386 14.063-10.156 14.064-2.084 0-4.688-.522-7.813-1.563z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 377.344,\n      height: 427.345\n    },\n    origin: {\n      x: 50,\n      y: 70\n    },\n    align: \"left\"\n  },\n  Porrectus4: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M350 453.438c-52.754-22.397-120-77.345-201.74-164.844C90.87 227.656 24.784 147.708-50 48.75V-70C-8.84-1.25 58.406 86.51 151.74 193.28c60.868 69.793 119.13 124.22 174.782 163.282 5.797 3.646 11.014 5.47 15.652 5.47 12.173 0 21.45-11.72 27.826-35.157V441.72c0 9.373-3.19 14.06-9.565 14.06-2.9 0-6.377-.78-10.435-2.342z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 420,\n      height: 525.78\n    },\n    origin: {\n      x: 50,\n      y: 70\n    },\n    align: \"left\"\n  },\n  PunctumCavum: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n      },\n      {\n        type: \"negative\",\n        data:\n          \"M.08-42.56c9.585.206 20.126.53 27.954 6.822 4.96 3.9 4.71 10.792 4.574 16.482v51.278C22.09 27.066 7.283 26.072.168 26.01c-7.72.23-21.895.935-32.616 4.674.04-19.197-.083-38.395.064-57.59.567-7.5 7.834-12.33 14.62-13.774 5.818-1.498 11.857-1.86 17.844-1.88z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratum: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-36.5436c19.999799999999997 0 30 5.781 30 17.3436v56.717999999999996C23.437199999999997 30.956999999999997 13.4376 27.6756 0 27.6756s-23.4378 3.2819999999999996-30 9.843599999999999V-19.2c0-11.562 10.000200000000001-17.3436 30-17.3436z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 152.344\n    },\n    origin: {\n      x: 50,\n      y: 88.344\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 151.562\n    },\n    origin: {\n      x: 50,\n      y: 75.562\n    },\n    align: \"left\"\n  },\n  PunctumInclinatum: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M0-75.78L50 0 0 75-50 0 0-75.78z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 150.78\n    },\n    origin: {\n      x: 50,\n      y: 75.78\n    },\n    align: \"left\"\n  },\n  PunctumInclinatumLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M 0,-53.164 35,-0.117 0,52.383 -35,-0.117 0,-53.164 z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 105.546\n    },\n    origin: {\n      x: 50,\n      y: 53.164\n    },\n    align: \"left\"\n  },\n  Quilisma: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 34.938V-51c5.73 20.833 13.02 31.25 21.875 31.25 7.813 0 12.5-15.625 14.063-46.875 3.645 12.5 6.9 21.224 9.765 26.172s6.9 7.422 12.11 7.422c5.208 0 9.374-14.324 12.5-42.97 5.73 22.917 10.677 34.375 14.843 34.375 5.73 0 10.677-15.885 14.844-47.656v100c0 17.707-3.125 26.56-9.375 26.56-4.688 0-9.115-5.988-13.28-17.968-2.085 21.875-8.074 32.813-17.97 32.813-7.813 0-16.146-7.292-25-21.875-4.688 20.312-10.677 30.47-17.97 30.47-5.207 0-9.244-2.605-12.108-7.814C-48.568 47.698-50 41.708-50 34.938z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 150\n    },\n    origin: {\n      x: 50,\n      y: 89.282\n    },\n    align: \"left\"\n  },\n  TerminatingAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-9.375 40.22c0-11.98-4.948-17.97-14.844-17.97-10.936 0-19.53 3.646-25.78 10.938v-53.126c0-6.77 2.604-12.76 7.813-17.968 5.208-5.21 10.677-8.594 16.406-10.157 2.603-.52 5.207-.78 7.81-.78 3.647 0 7.032.78 10.157 2.343C-2.603-43.896 0-39.73 0-34V73.03h-9.375V40.22z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 49.999,\n      height: 121.873\n    },\n    origin: {\n      x: 49.999,\n      y: 48.843\n    },\n    align: \"right\"\n  },\n  TerminatingDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-9.375-48.156V-80.97H0V26.845c0 5.73-2.604 9.896-7.813 12.5-3.125 1.562-6.51 2.343-10.156 2.343-2.603 0-5.207-.26-7.81-.78-5.73-1.563-11.2-4.95-16.407-10.157C-47.398 25.542-50 19.292-50 12v-52.344c6.25 7.292 14.844 10.938 25.78 10.938 9.897 0 14.845-6.25 14.845-18.75z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 50,\n      height: 122.658\n    },\n    origin: {\n      x: 50,\n      y: 80.97\n    },\n    align: \"right\"\n  },\n  VerticalEpisemaAbove: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M-8-4c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 16,\n      height: 60\n    },\n    origin: {\n      x: 8,\n      y: 60\n    },\n    align: \"left\"\n  },\n  VerticalEpisemaBelow: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M-8 56c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 16,\n      height: 60\n    },\n    origin: {\n      x: 8,\n      y: 0\n    },\n    align: \"left\"\n  },\n  VirgaLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50-38v285.156c0 6.77-2.344 10.937-7.03 12.5-1.564 0-2.605-.78-3.126-2.344-.52-1.562-.782-10.156-.782-25.78V54.186C29.168 45.334 16.146 40.907 0 40.907c-22.917 0-39.583 5.208-50 15.624V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 326.562\n    },\n    origin: {\n      x: 50,\n      y: 66.906\n    },\n    align: \"left\"\n  },\n  VirgaShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50-38v211.72c0 7.29-2.344 11.457-7.03 12.5-1.564 0-2.606-.783-3.126-2.345-.52-1.563-.782-10.156-.782-25.78V54.187C29.167 45.332 16.146 40.906 0 40.906c-22.917 0-39.583 5.21-50 15.625V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 253.126\n    },\n    origin: {\n      x: 50,\n      y: 66.906\n    },\n    align: \"left\"\n  },\n  Virgula: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M8.178-55.66c0-22.137 12.092-33.2 36.287-33.2 11.835 0 23.53 5.66 35.108 16.98C91.15-60.547 96.94-41.766 96.94-15.534c0 53.515-31.646 87.487-94.937 101.895-2.048-2.06-3.077-5.146-3.077-9.273 0-1.03.247-1.8.76-2.316 42.71-19.027 64.075-41.678 64.075-67.92 0-11.322-2.325-20.326-6.945-27.016-4.62-6.69-9.52-11.052-14.676-13.11-5.147-2.048-11.836-3.85-20.07-5.403C12.81-39.707 8.18-45.37 8.18-55.66z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 98.014,\n      height: 175.221\n    },\n    origin: {\n      x: 1.074,\n      y: 88.86\n    },\n    align: \"left\"\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Glyphs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  getCssForProperties, Point,\n  Rect\n} from \"./Exsurge.Core.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\nimport { language } from \"./Exsurge.Text.js\";\nimport { addAccent } from \"./addAccent.js\";\nimport { makeLigature } from \"./makeLigature.js\";\nimport { greextraGlyphs } from \"./greextraGlyphs.js\";\n\nfunction getFontFilenameForProperties(properties = {}, url = \"{}\") {\n  var italic = properties[\"font-style\"] === \"italic\" ? \"Italic\" : \"\",\n    bold = properties[\"font-weight\"] === \"bold\" ? \"Bold\" : \"\";\n  return url.replace(\n    \"{}\",\n    `${italic || bold ? `${bold}${italic}` : `Regular`}`\n  );\n}\n\n// load in the web font for special chant characters here:\n// var __exsurgeCharactersFont = require(\"url?limit=30000!../assets/fonts/ExsurgeChar.otf\")\n\nconst canAccessDOM = typeof document !== \"undefined\";\n\nconst __getNeumeFromSvgElem = (score, elem) => {\n  let note =\n    score.notes[\n      elem.parentElement\n        .querySelector(\"[element-index]\")\n        .getAttribute(\"element-index\")\n    ];\n  return note.neume || note;\n};\n\n// for positioning markings on notes\nexport var MarkingPositionHint = {\n  Default: 0,\n  Above: 1,\n  Below: 2\n};\n\n/**\n * List of types of text and their defaults relative to lyrics\n * @type Array\n */\nexport const TextTypes = {\n  supertitle: {\n    display: \"Supertitle\",\n    defaultSize: (size) => (size * 7) / 6, // 14pt\n    containedInScore: (score) => score.titles.hasSupertitle(),\n    getFromScore: (score) => score.titles.supertitle\n  },\n  title: {\n    display: \"Title\",\n    defaultSize: (size) => (size * 3) / 2, // 18pt\n    containedInScore: (score) => score.titles.hasTitle(),\n    getFromScore: (score) => score.titles.title\n  },\n  subtitle: {\n    display: \"Subtitle\",\n    defaultSize: (size) => size, // 12pt\n    containedInScore: (score) => score.titles.hasSubtitle(),\n    getFromScore: (score) => score.titles.subtitle\n  },\n  leftRight: {\n    display: \"Left / Right Text\",\n    cssClass: \"textLeftRight\",\n    defaultSize: (size) => size * 0.9,\n    containedInScore: (score) =>\n      score.titles.hasTextLeft() || score.titles.hasTextRight(),\n    getFromScore: (score, elem) => score.titles[elem.extraClass],\n    getFromSvgElem: (score, elem) =>\n      score.titles[\n        elem.classList.contains(\"textRight\") ? \"textRight\" : \"textLeft\"\n      ]\n  },\n  annotation: {\n    display: \"Annotation\",\n    defaultSize: (size) => (size * 2) / 3,\n    containedInScore: (score) =>\n      !!score.annotation &&\n      (!score.mergeAnnotationWithTextLeft || score.dropCap),\n    getFromScore: (score, { elementIndex = 0 }) =>\n      score.annotation &&\n      (score.annotation.annotations\n        ? score.annotation.annotations[elementIndex]\n        : score.annotation)\n  },\n  dropCap: {\n    display: \"Drop Cap\",\n    defaultSize: (size) => size * 4,\n    containedInScore: (score) => !!score.dropCap,\n    getFromScore: (score) => score.dropCap\n  },\n  al: {\n    display: \"Above Staff\",\n    cssClass: \"aboveLinesText\",\n    defaultSize: (size) => size,\n    containedInScore: (score) => score.hasAboveLinesText,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].alText[elem.alIndex],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).alText[\n        elem.getAttribute(\"al-index\") || 0\n      ]\n  },\n  choralSign: {\n    display: \"Choral Sign\",\n    size: (ctxt) => ctxt.staffInterval * 1.5,\n    containedInScore: (score) => false,\n    getFromScore: (score, elem) =>\n      score.notes[elem.note.elementIndex].choralSign\n  },\n  lyric: {\n    display: \"Lyric\",\n    defaultSize: (size) => size * 0.9,\n    containedInScore: (score) => score.hasLyrics,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].lyrics[elem.lyricIndex],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).lyrics[\n        elem.getAttribute(\"lyric-index\") || 0\n      ]\n  },\n  translation: {\n    display: \"Translation\",\n    defaultSize: (size) => size * 0.75,\n    containedInScore: (score) => score.hasTranslations,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].translationText[\n        elem.translationIndex\n      ],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).translationText[\n        elem.getAttribute(\"translation-index\") || 0\n      ]\n  }\n};\nexport const TextTypesByClass = {};\nObject.entries(TextTypes).forEach(([key, entry]) => {\n  let cssClass = (entry.cssClass = entry.cssClass || key);\n  entry.key = key;\n  TextTypesByClass[cssClass] = entry;\n});\n\nexport const DefaultTrailingSpace = (ctxt) =>\n  ctxt.intraNeumeSpacing * ctxt.interSyllabicMultiplier;\nDefaultTrailingSpace.isDefault = true;\n\nexport let GlyphCode = {\n  None: \"None\",\n\n  AcuteAccent: \"AcuteAccent\",\n  GraveAccent: \"GraveAccent\",\n  Circle: \"Circle\",\n  Semicircle: \"Semicircle\",\n  ReversedSemicircle: \"ReversedSemicircle\",\n  Stropha: \"Stropha\",\n  StrophaLiquescent: \"StrophaLiquescent\",\n\n  BeginningAscLiquescent: \"BeginningAscLiquescent\",\n  BeginningDesLiquescent: \"BeginningDesLiquescent\",\n\n  CustosDescLong: \"CustosDescLong\",\n  CustosDescShort: \"CustosDescShort\",\n  CustosLong: \"CustosLong\",\n  CustosShort: \"CustosShort\",\n\n  // clefs and other markings\n  DoClef: \"DoClef\",\n  FaClef: \"FaClef\",\n  Flat: \"Flat\",\n  Mora: \"Mora\",\n  Natural: \"Natural\",\n  OriscusAsc: \"OriscusAsc\",\n  OriscusDes: \"OriscusDes\",\n  OriscusLiquescent: \"OriscusLiquescent\",\n\n  PodatusLower: \"PodatusLower\",\n  PodatusUpper: \"PodatusUpper\",\n\n  Porrectus1: \"Porrectus1\", // 1 staff line difference,\n  Porrectus2: \"Porrectus2\", // 2 lines difference, etc...\n  Porrectus3: \"Porrectus3\",\n  Porrectus4: \"Porrectus4\",\n\n  PunctumCavum: \"PunctumCavum\",\n  PunctumQuadratum: \"PunctumQuadratum\",\n  PunctumQuadratumLiquescent: \"PunctumQuadratumLiquescent\",\n  PunctumQuadratumAscLiquescent: \"PunctumQuadratumAscLiquescent\",\n  PunctumQuadratumDesLiquescent: \"PunctumQuadratumDesLiquescent\",\n  PunctumInclinatum: \"PunctumInclinatum\",\n  PunctumInclinatumLiquescent: \"PunctumInclinatumLiquescent\",\n  Quilisma: \"Quilisma\",\n\n  Sharp: \"Sharp\",\n  TerminatingAscLiquescent: \"TerminatingAscLiquescent\",\n  TerminatingDesLiquescent: \"TerminatingDesLiquescent\",\n  VerticalEpisemaAbove: \"VerticalEpisemaAbove\",\n  VerticalEpisemaBelow: \"VerticalEpisemaBelow\",\n  VirgaLong: \"VirgaLong\",\n  VirgaShort: \"VirgaShort\",\n  Virgula: \"Virgula\",\n\n  UpperBrace: \"UpperBrace\"\n}; // GlyphCode\n\nexport var QuickSvg = {\n  // namespaces\n  ns: \"http://www.w3.org/2000/svg\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\",\n  xlink: \"http://www.w3.org/1999/xlink\",\n\n  hasDOMAccess: function () {\n    return canAccessDOM;\n  },\n\n  // create the root level svg object\n  svg: function (width, height) {\n    var node = document.createElementNS(this.ns, \"svg\");\n\n    node.setAttribute(\"xmlns\", this.ns);\n    node.setAttribute(\"version\", \"1.1\");\n    node.setAttributeNS(this.xmlns, \"xmlns:xlink\", this.xlink);\n\n    node.setAttribute(\"width\", width);\n    node.setAttribute(\"height\", height);\n\n    // create the defs element\n    var defs = document.createElementNS(this.ns, \"defs\");\n    node.appendChild(defs);\n\n    node.defs = defs;\n\n    node.clearNotations = function () {\n      // clear out all children except defs\n      node.removeChild(defs);\n\n      while (node.hasChildNodes()) node.removeChild(node.lastChild);\n\n      node.appendChild(defs);\n    };\n\n    return node;\n  },\n\n  rect: function (width, height) {\n    var node = document.createElementNS(this.ns, \"rect\");\n\n    node.setAttribute(\"width\", width);\n    node.setAttribute(\"height\", height);\n\n    return node;\n  },\n\n  line: function (x1, y1, x2, y2) {\n    var node = document.createElementNS(this.ns, \"line\");\n\n    node.setAttribute(\"x1\", x1);\n    node.setAttribute(\"y1\", y1);\n    node.setAttribute(\"x2\", x2);\n    node.setAttribute(\"y2\", y2);\n\n    return node;\n  },\n\n  g: function () {\n    var node = document.createElementNS(this.ns, \"g\");\n\n    return node;\n  },\n\n  text: function () {\n    var node = document.createElementNS(this.ns, \"text\");\n\n    return node;\n  },\n\n  tspan: function (str) {\n    var node = document.createElementNS(this.ns, \"tspan\");\n    node.textContent = str;\n\n    return node;\n  },\n\n  // nodeRef should be the id of the object in defs (without the #)\n  use: function (nodeRef) {\n    var node = document.createElementNS(this.ns, \"use\");\n    node.setAttributeNS(this.xlink, \"xlink:href\", \"#\" + nodeRef);\n\n    return node;\n  },\n\n  svgFragmentForGlyph: function (glyph) {\n    var svgSrc = \"\";\n    for (var i = 0; i < glyph.paths.length; ++i) {\n      var path = glyph.paths[i];\n      svgSrc += QuickSvg.createFragment(path.data ? \"path\" : \"g\", {\n        d: path.data || undefined,\n        fill: path.type === \"negative\" ? \"#fff\" : undefined\n      });\n    }\n    return svgSrc;\n  },\n\n  nodesForGlyph: function (glyph, functionName = \"createNode\") {\n    var nodes = [];\n    for (var i = 0; i < glyph.paths.length; ++i) {\n      var path = glyph.paths[i];\n      let props = {};\n      if (path.data) props.d = path.data;\n      if (path.type === \"negative\") props.fill = \"#fff\";\n      nodes.push(QuickSvg[functionName](path.data ? \"path\" : \"g\", props));\n    }\n    return nodes;\n  },\n\n  createNode: function (name, attributes, children) {\n    var node = document.createElementNS(this.ns, name);\n    if (attributes && attributes.source) {\n      node.source = attributes.source;\n      delete attributes.source;\n    }\n    for (var attr in attributes) {\n      if (\n        attributes.hasOwnProperty(attr) &&\n        typeof attributes[attr] !== \"undefined\"\n      ) {\n        var val = attributes[attr];\n        var match = attr.match(/^([^:]+):([^:]+)$/);\n        if (match) {\n          node.setAttributeNS(this[match[1]], match[2], val);\n        } else {\n          node.setAttribute(attr, val);\n        }\n      }\n    }\n    if (children) {\n      if (typeof children === \"string\") {\n        node.textContent = children;\n      } else if (children.constructor === [].constructor) {\n        for (var i = 0; i < children.length; ++i) {\n          node.appendChild(children[i]);\n        }\n      } else {\n        node.appendChild(children);\n      }\n    }\n    return node;\n  },\n\n  createSvgTree(name, props, ...children) {\n    if (\"class\" in props) {\n      props.className = props.class;\n      delete props.class;\n    }\n    if (children.length === 1 && children[0] instanceof Array) {\n      children = children[0];\n    }\n    const convertKeysToCamelCase = (obj) => {\n      for (let key of Object.keys(obj)) {\n        if (/[-:][a-z]/.test(key)) {\n          if (/^\\w+-index$/.test(key)) continue;\n          let camelCase = key.replace(/[-:]([a-z])/g, (whole, letter) =>\n            letter.toUpperCase()\n          );\n          obj[camelCase] = obj[key];\n          delete obj[key];\n        }\n      }\n    };\n    convertKeysToCamelCase(props);\n    if (props.style) convertKeysToCamelCase(props.style);\n    let source = props.source;\n    if (source && source.sourceGabc) {\n      props[\"source-gabc\"] = source.sourceGabc;\n    }\n    return { name, props, children };\n  },\n\n  createFragment: function (name, attributes, child) {\n    if (child === undefined || child === null) child = \"\";\n\n    var fragment = \"<\" + name + \" \";\n\n    for (var attr in attributes) {\n      if (\n        attributes.hasOwnProperty(attr) &&\n        typeof attributes[attr] !== \"undefined\"\n      )\n        fragment += attr + '=\"' + attributes[attr] + '\" ';\n    }\n\n    fragment += \">\" + child + \"</\" + name + \">\";\n\n    return fragment;\n  },\n\n  parseFragment: function (fragment) {\n    // create temporary holder\n    var well = document.createElement(\"svg\");\n\n    // act as a setter if svg is given\n    if (fragment) {\n      var container = this.g();\n\n      // dump raw svg\n      // do this to allow the browser to automatically create svg nodes?\n      well.innerHTML =\n        \"<svg>\" +\n        fragment\n          .replace(/\\n/, \"\")\n          .replace(/<(\\w+)([^<]+?)\\/>/g, \"<$1$2></$1>\") +\n        \"</svg>\";\n\n      // transplant nodes\n      for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\n        container.appendChild(well.firstChild.firstChild);\n\n      return container;\n    }\n  },\n\n  translate: function (node, x, y) {\n    node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n    return node;\n  },\n\n  scale: function (node, sx, sy) {\n    node.setAttribute(\"transform\", \"scale(\" + sx + \",\" + sy + \")\");\n    return node;\n  }\n};\n\nexport var TextMeasuringStrategy = {\n  // shapes\n  Svg: 0,\n  Canvas: 1,\n  OpenTypeJS: 2\n};\n\n/*\n * ChantContext\n */\nexport class ChantContext {\n  constructor(\n    textMeasuringStrategy = QuickSvg.hasDOMAccess()\n      ? TextMeasuringStrategy.Canvas\n      : TextMeasuringStrategy.OpenTypeJS\n  ) {\n    this.textMeasuringStrategy = textMeasuringStrategy;\n    this.defs = {};\n    this.makeDefs = [];\n    if (QuickSvg.hasDOMAccess()) {\n      this.defsNode = QuickSvg.createNode(\"defs\");\n    }\n\n    // font styles\n    this.textStyles = {};\n    this.textColor = \"#000\";\n    this.setFont(\"'Palatino Linotype', 'Book Antiqua', Palatino, serif\", 16);\n\n    this.rubricColor = \"#d00\";\n    this.specialCharProperties = {\n      \"font-family\": \"'Exsurge Characters'\",\n      fill: this.rubricColor,\n      class: 'rubric'\n    };\n    this.textBeforeSpecialChar = \"\";\n    this.textAfterSpecialChar = \".\";\n    this.specialCharMap = {\n      \"℣\": 'v',\n      \"℟\": 'r',\n      \"+\": \"+\",\n      \"*\": \"*\"\n    };\n    this.plusProperties = {};\n    this.asteriskProperties = {};\n    this.specialCharText = (char) => this.specialCharMap[char] || char;\n\n    this.fontStyleDictionary = {\n      b: { \"font-weight\": \"bold\" },\n      i: { \"font-style\": \"italic\" },\n      u: { \"text-decoration\": \"underline\" },\n      ul: { \"text-decoration\": \"underline\" },\n      c: { fill: this.rubricColor, class: 'rubric' },\n      sc: {\n        \"font-variant\": \"small-caps\",\n        \"font-variant-caps\": \"small-caps\",\n        \"font-feature-settings\": \"'smcp'\",\n        \"-webkit-font-feature-settings\": \"'smcp'\"\n      },\n      v: {}\n    };\n\n    this.markupSymbolDictionary = {\n      \"*\": \"b\",\n      \"_\": \"i\",\n      \"^\": \"c\",\n      \"%\": \"sc\"\n    };\n\n    this.textStyles.al.prefix = \"<i>\";\n\n    this.textStyles.translation.prefix = \"<i>\";\n\n    this.textStyles.dropCap.padding = 1; // minimum padding on either side of drop cap in staffIntervals\n\n    this.textStyles.annotation.padding = 1; // minimum padding on either side of annotation in staffIntervals\n\n    this.minLedgerSeparation = 2; // multiple of staffInterval\n    this.minSpaceAboveStaff = 2; // multiple of staffInterval\n    this.minSpaceBelowStaff = 1; // multiple of staffInterval\n    this.spaceBetweenSystems = 1.5; // multiple of staffInterval\n\n    // everything depends on the scale of the punctum\n    this.glyphPunctumWidth = Glyphs.PunctumQuadratum.bounds.width;\n    this.glyphPunctumHeight = Glyphs.PunctumQuadratum.bounds.height;\n\n    // max space to add between notations when justifying, in multiples of this.staffInterval\n    this.maxExtraSpaceInStaffIntervals = 0.5;\n\n    // for keeping track of the clef\n    this.activeClef = null;\n\n    this.neumeLineColor = \"#000\";\n    this.staffLineColor = \"#000\";\n    this.dividerLineColor = \"#000\";\n\n    this.defaultLanguage = language.latin;\n\n    // calculate the pixel ratio for drawing to a canvas\n    this.pixelRatio = window.devicePixelRatio || 1.0;\n\n    //this.canvasCtxt.scale(this.pixelRatio, this.pixelRatio);\n\n    if (textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n      this.svgTextMeasurer = QuickSvg.svg(0, 0);\n      this.svgTextMeasurer.setAttribute(\"id\", \"TextMeasurer\");\n      this.svgTextMeasurer.setAttribute(\"style\", \"position:absolute\");\n      document.body.insertBefore(\n        this.svgTextMeasurer,\n        document.body.firstChild\n      );\n    } else if (textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n      this.makeCanvasIfNeeded();\n    }\n\n    // for connecting neume syllables...\n    this.syllableConnector = \"-\";\n\n    // set whether to scale the def tags (scaleDefs = true) or the use tags.\n    this.scaleDefs = true;\n\n    // fixme: for now, we just set these using the glyph scales as noted above, presuming a\n    // staff line size of 0.5 in. Really what we should do is scale the punctum size based\n    // on the text metrics, right? 1 punctum ~ x height size?\n    this.setGlyphScaling(1.0 / 16.0);\n\n    // minimum space between puncta of different syllables, in multiples of this.intraNeumeSpacing\n    this.interSyllabicMultiplier = 2.5;\n\n    // space between an accidental and the following note, in multiples of this.intraNeumeSpacing\n    this.accidentalSpaceMultiplier = 2;\n\n    // space added between puncta of different words, in multiples of this.intraNeumeSpacing\n    this.interVerbalMultiplier = 1;\n\n    this.drawGuides = false;\n    this.drawDebuggingBounds = true;\n\n    // we keep track of where we are in processing notations, so that\n    // we can maintain the context for notations to know about.\n    //\n    // these are only gauranteed to be valid during the performLayout phase!\n    this.activeNotations = null;\n    this.currNotationIndex = -1;\n\n    this.minSyllablesLastLine = 0;\n    this.minNotesLastLine = 0;\n\n    // chant notation elements are normally separated by a minimum fixed amount of space\n    // on the staff line. It can happen, however, that two text elements are almost close\n    // enough to merge, only to be separated much more by the required hyphen (or other\n    // connecting string).\n    //\n    // This tolerance value allows a little bit of flexibility to merge two close lyrical\n    // elements, thus bringing the chant notation elements a bit closer than otherwise\n    // would be normally allowed.\n    //\n    // condensing tolerance is a percentage value (0.0-1.0, inclusive) that indicates\n    // how much the default spacing can shrink. E.g., a value of 0.20 allows the layout\n    // engine to separate two glyphs by only 80% of the normal inter-neume spacing value.\n    this.condensingTolerance = 0.3;\n\n    // if auto color is true, then exsurge tries to automatically colorize\n    // some elements of the chant (directives become rubric color, etc.)\n    this.autoColor = true;\n\n    this.useExtraTextOnly = true;\n\n    this.noteIdPrefix = 'note-';\n\n    this.insertFontsInDoc();\n  }\n\n  getFontForProperties(properties = {}, fontFamily) {\n    let key = getFontFilenameForProperties(properties),\n      keyWithFontFamily = getFontFilenameForProperties(properties, fontFamily);\n    return (\n      this.fontDictionary &&\n      (this.fontDictionary[keyWithFontFamily] ||\n        this.fontDictionary[fontFamily] ||\n        this.fontDictionary.Regular)\n    );\n  }\n\n  setFont(font, size = 16, baseStyle = {}, opentypeFontDictionary) {\n    for (let [key, textType] of Object.entries(TextTypes)) {\n      let textStyle = (this.textStyles[key] = this.textStyles[key] || {});\n      textStyle.size = textType.defaultSize\n        ? textType.defaultSize(size, this)\n        : textType.size(this);\n      textStyle.font = font;\n      textStyle.color = this.textColor || \"#000\";\n    }\n\n    this.baseTextStyle = baseStyle;\n\n    if (opentypeFontDictionary) {\n      this.textMeasuringStrategy = TextMeasuringStrategy.OpenTypeJS;\n      this.fontDictionary = opentypeFontDictionary;\n    }\n  }\n\n  setRubricColor(color) {\n    this.rubricColor = color;\n    this.specialCharProperties.fill = color;\n    this.fontStyleDictionary.c.fill = color;\n  }\n\n  setScaleDefs(scaleDefs) {\n    scaleDefs = !!scaleDefs;\n    if (this.scaleDefs !== scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.setGlyphScaling(this.glyphScaling);\n    }\n  }\n\n  createStyleCss() {\n    var style = \"\";\n    for (let [key, textType] of Object.entries(TextTypes)) {\n      var cssClass = textType.cssClass,\n        { color, font, size } = this.textStyles[key];\n      style += `svg.Exsurge .${cssClass}{fill:${color};font-family:${font};font-size:${size}px;font-kerning:normal}`;\n    }\n    return style;\n  }\n\n  createStyleNode() {\n    var node = QuickSvg.createNode(\"style\", {});\n    node.textContent = this.createStyleCss();\n    return node;\n  }\n\n  createStyleTree() {\n    return { name: \"style\", props: {}, children: [this.createStyleCss()] };\n  }\n\n  createStyle() {\n    return \"<style>\" + this.createStyleCss() + \"</style>\";\n  }\n\n  updateHyphenWidth() {\n    // measure the size of a hyphen for the lyrics\n    var hyphen = new Lyric(\n      this,\n      this.syllableConnector,\n      LyricType.SingleSyllable\n    );\n    var multiplier =\n      this.minLyricWordSpacing /\n        (this.hyphenWidth || this.minLyricWordSpacing) || 1;\n    this.hyphenWidth = hyphen.bounds.width;\n\n    this.minLyricWordSpacing = multiplier * this.hyphenWidth;\n  }\n\n  setStaffHeight(staffHeight) {\n    this.setGlyphScaling(staffHeight / 600);\n  }\n\n  setGlyphScaling(glyphScaling) {\n    this.glyphScaling = glyphScaling;\n\n    this.staffInterval = this.glyphPunctumWidth * this.glyphScaling;\n\n    // setup the line weights for the various elements.\n    this.staffLineWeight = Math.ceil((5 * this.staffInterval) / 8) / 5;\n    this.neumeLineWeight = this.staffLineWeight; // the weight of connecting lines in the glyphs.\n    this.dividerLineWeight = this.neumeLineWeight; // of quarter bar, half bar, etc.\n    this.episemaLineWeight = this.neumeLineWeight * 1.25; // of horizontal episemata\n\n    this.intraNeumeSpacing = this.staffInterval / 2.0;\n\n    while (this.defsNode && this.defsNode.firstChild)\n      this.defsNode.removeChild(this.defsNode.firstChild);\n    for (var i = 0; i < this.makeDefs.length; ++i) {\n      this.makeDefs[i]();\n    }\n\n    this.updateHyphenWidth();\n  }\n\n  calculateHeightFromStaffPosition(staffPosition) {\n    return -staffPosition * this.staffInterval;\n  }\n\n  insertFontsInDoc() {\n    if (!canAccessDOM) return;\n\n    var styleElement = document.getElementById(\"exsurge-fonts\");\n\n    if (styleElement === null) {\n      // create it since it doesn't exist yet.\n      styleElement = document.createElement(\"style\");\n      styleElement.id = \"exsurge-fonts\";\n\n      // styleElement.appendChild(document.createTextNode(\"@font-face{font-family: 'Exsurge Characters';font-weight: normal;font-style: normal;src: url(\" + __exsurgeCharactersFont + \") format('opentype');}\"));\n\n      document.head.appendChild(styleElement);\n    }\n  }\n\n  // returns the next neume starting at this.currNotationIndex, or null\n  // if there isn't a neume after this one...\n  findNextNeume() {\n    if (typeof this.currNotationIndex === \"undefined\")\n      throw \"findNextNeume() called without a valid currNotationIndex set\";\n\n    for (var i = this.currNotationIndex + 1; i < this.notations.length; i++) {\n      var notation = this.notations[i];\n\n      if (notation.isNeume && !notation.hasNoWidth) return notation;\n    }\n\n    return null;\n  }\n\n  makeCanvasIfNeeded() {\n    if (!this.canvas) {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvasCtxt = this.canvas.getContext(\"2d\");\n    }\n  }\n\n  setCanvasSize(width, height, scale = 1) {\n    this.makeCanvasIfNeeded();\n\n    this.canvas.style.width = width * scale + \"px\";\n    this.canvas.style.height = height * scale + \"px\";\n    scale *= this.pixelRatio;\n    this.canvas.width = width * scale;\n    this.canvas.height = height * scale;\n\n    this.canvasCtxt.setTransform(scale, 0, 0, scale, 0, 0);\n  }\n}\n\n/*\n * ChantLayoutElement\n */\nexport class ChantLayoutElement {\n  constructor() {\n    this.bounds = new Rect();\n    this.origin = new Point(0, 0);\n\n    this.selected = false;\n    this.highlighted = false;\n  }\n\n  // draws the element on an html5 canvas\n  draw(ctxt) {\n    throw \"ChantLayout Elements must implement draw(ctxt)\";\n  }\n\n  // returns svg element\n  createSvgNode(ctxt) {\n    throw \"ChantLayout Elements must implement createSvgNode(ctxt)\";\n  }\n\n  // returns svg code for the element, used for printing support\n  createSvgFragment(ctxt) {\n    throw \"ChantLayout Elements must implement createSvgFragment(ctxt)\";\n  }\n}\n\nexport class DividerLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, staffPosition0, staffPosition1, divider) {\n    super();\n\n    this.divider = divider;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n    var y1 = ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\n    if (y0 > y1) {\n      var temp = y0;\n      y0 = y1;\n      y1 = temp;\n    }\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.dividerLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = this.bounds.width / 2;\n    this.origin.y = y0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.dividerLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.dividerLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    let props = {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.dividerLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.dividerLineColor,\n      class: \"dividerLine\"\n    };\n    if (this.divider) {\n      if (this.divider.selected) props.class += \" selected\";\n      props[\"source-index\"] = this.divider.sourceIndex;\n      props[\"element-index\"] = this.divider.elementIndex;\n      props.source = this.divider;\n    }\n    return props;\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class NeumeLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note0, note1, hanging) {\n    super();\n\n    var staffPosition0 = note0.staffPosition;\n    var staffPosition1 = note1.staffPosition;\n\n    // note0 should be the upper one for our calculations here\n    if (staffPosition0 < staffPosition1) {\n      var temp = staffPosition0;\n      staffPosition0 = staffPosition1;\n      staffPosition1 = temp;\n    }\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n    var y1 = 0;\n\n    if (hanging) {\n      // if the difference between the notes is only one, and the upper\n      // note is on a line, and the lower note is within the four staff lines,\n      // then our hanging line goes past the lower note by a whole\n      // staff interval\n      if (\n        staffPosition0 - staffPosition1 === 1 &&\n        Math.abs(staffPosition0) % 2 === 1 &&\n        staffPosition1 > -3\n      )\n        staffPosition1--;\n\n      y1 += (ctxt.glyphPunctumHeight * ctxt.glyphScaling) / 2.2;\n    }\n\n    y1 += ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class VirgaLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note) {\n    super();\n\n    var staffPosition = note.staffPosition;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition);\n    var y1;\n\n    if (Math.abs(staffPosition % 2) === 0) y1 = y0 + ctxt.staffInterval * 1.8;\n    else y1 = y0 + ctxt.staffInterval * 2.7;\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class LineaVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note) {\n    super();\n\n    var staffPosition = note.staffPosition;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition) - note.origin.y;\n    var y1 = y0 + note.bounds.height;\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight * 5 + note.bounds.width;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = ctxt.neumeLineWeight * 2.5;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n    canvasCtxt.fillRect(\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt, x) {\n    return {\n      x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"g\", null, [\n      this.bounds.x,\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight\n    ].map(x => QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt, x))));\n  }\n\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"g\", {}, ...[\n      this.bounds.x,\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight\n    ].map(x => QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt, x))));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"g\", null, [\n      this.bounds.x,\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight\n    ].map(x => QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt, x))).join(''));\n  }\n}\n\nexport class GlyphVisualizer extends ChantLayoutElement {\n  constructor(ctxt, glyphCode) {\n    super();\n\n    this.glyph = null;\n\n    this.setGlyph(ctxt, glyphCode);\n  }\n\n  setGlyph(ctxt, glyphCode) {\n    if (this.glyphCode !== glyphCode) {\n      if (\n        typeof glyphCode === \"undefined\" ||\n        glyphCode === null ||\n        glyphCode === \"\"\n      )\n        glyphCode = this.glyphCode = GlyphCode.None;\n      else this.glyphCode = glyphCode;\n\n      let glyph = this.glyph = Glyphs[glyphCode];\n\n      // if this glyph hasn't been used yet, then load it up in the defs section for sharing\n      if (!ctxt.defs.hasOwnProperty(glyphCode)) {\n        var getDefProps = () => {\n          var options = {\n            id: glyphCode,\n            class: \"glyph\"\n          };\n          if (ctxt.scaleDefs === true) {\n            options.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n          }\n          return options;\n        };\n        var makeDef = () => {\n          let options = getDefProps();\n          // create the ref\n          ctxt.defs[glyphCode] = QuickSvg.createFragment(\n            \"g\",\n            options,\n            QuickSvg.svgFragmentForGlyph(glyph)\n          );\n\n          if (ctxt.defsNode)\n            ctxt.defsNode.appendChild(\n              QuickSvg.createNode(\n                \"g\",\n                options,\n                QuickSvg.nodesForGlyph(glyph)\n              )\n            );\n        };\n        makeDef.makeSvgTree = () => {\n          return QuickSvg.createSvgTree(\n            \"g\",\n            getDefProps(),\n            ...QuickSvg.nodesForGlyph(glyph, \"createSvgTree\")\n          );\n        };\n        makeDef.glyphCode = glyphCode;\n        makeDef();\n        ctxt.makeDefs.push(makeDef);\n      }\n\n      this.align = this.glyph.align;\n    }\n\n    this.origin.x = this.glyph.origin.x * ctxt.glyphScaling;\n    this.origin.y = this.glyph.origin.y * ctxt.glyphScaling;\n\n    this.bounds.x = 0;\n    this.bounds.y = -this.origin.y;\n    this.bounds.width = this.glyph.bounds.width * ctxt.glyphScaling;\n    this.bounds.height = this.glyph.bounds.height * ctxt.glyphScaling;\n  }\n\n  setStaffPosition(ctxt, staffPosition) {\n    this.bounds.y =\n      ctxt.calculateHeightFromStaffPosition(staffPosition) - this.origin.y;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    var x = this.bounds.x + this.origin.x;\n    var y = this.bounds.y + this.origin.y;\n    canvasCtxt.translate(x, y);\n    canvasCtxt.scale(ctxt.glyphScaling, ctxt.glyphScaling);\n\n    for (var i = 0; i < this.glyph.paths.length; i++) {\n      var path = this.glyph.paths[i];\n      canvasCtxt.fillStyle =\n        path.type === \"negative\" ? \"#fff\" : ctxt.neumeLineColor;\n      canvasCtxt.fill(new Path2D(path.data));\n    }\n\n    canvasCtxt.scale(1.0 / ctxt.glyphScaling, 1.0 / ctxt.glyphScaling);\n    canvasCtxt.translate(-x, -y);\n  }\n\n  getSvgAttributes(ctxt, source) {\n    let className = \"\";\n    if (/^Porrectus\\d$/.test(this.glyphCode)) {\n      let notes = source.neume.notes,\n        noteIndex = notes.indexOf(source),\n        nextNote = notes[noteIndex + 1];\n      className = source.selected\n        ? nextNote.selected\n          ? \"selected\"\n          : \"selectedA\"\n        : nextNote.selected\n        ? \"selectedB\"\n        : \"\";\n    } else {\n      let isSelected =\n        source && (source.selected || (source.model && source.model.selected));\n      className = isSelected ? \"selected\" : \"\";\n    }\n    var result = {\n      \"xlink:href\": \"#\" + this.glyphCode,\n      class: className\n    };\n    if (source) {\n      result[\"source-index\"] = source.sourceIndex;\n      result[\"element-index\"] = source.elementIndex;\n      if ('noteIndex' in source) {\n        result.class += ' note';\n        result.id = ctxt.noteIdPrefix + (source.noteIndex + 1);\n        if (source.neume) {\n          const glyphCode = source.glyphVisualizer.glyphCode;\n          if (/^Porrectus/.test(glyphCode)) {\n            result.class += ' porrectus porrectus-start';\n          } else if (glyphCode === 'None') {\n            result.class += ' porrectus porrectus-end';\n          }\n        }\n      }\n    }\n    if (ctxt.scaleDefs === true) {\n      result.x = this.bounds.x + this.origin.x;\n      result.y = this.bounds.y + this.origin.y;\n    } else {\n      result.x = (this.bounds.x + this.origin.x) / ctxt.glyphScaling;\n      result.y = (this.bounds.y + this.origin.y) / ctxt.glyphScaling;\n      result.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n    }\n    return result;\n  }\n\n  createSvgNode(ctxt, source) {\n    var attributes = this.getSvgAttributes(ctxt, source);\n    attributes.source = source;\n    return QuickSvg.createNode(\"use\", attributes);\n  }\n  createSvgTree(ctxt, source) {\n    var attributes = this.getSvgAttributes(ctxt, source);\n    if (source) attributes.source = source;\n    return QuickSvg.createSvgTree(\"use\", attributes);\n  }\n\n  createSvgFragment(ctxt, source) {\n    return QuickSvg.createFragment(\"use\", this.getSvgAttributes(ctxt, source));\n  }\n}\n\nexport class RoundBraceVisualizer extends ChantLayoutElement {\n  constructor(ctxt, x1, x2, y, isAbove) {\n    super();\n\n    if (x1 > x2) {\n      // swap the xs\n      var temp = x1;\n      x1 = x2;\n      x2 = temp;\n    }\n\n    this.isAbove = isAbove;\n    this.braceHeight = (3 * ctxt.staffInterval) / 2;\n\n    this.bounds = new Rect(\n      x1,\n      isAbove ? y - this.braceHeight : y,\n      x2 - x1,\n      this.braceHeight\n    );\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  getSvgPathProps(ctxt) {\n    return {\n      d: this.generatePathString(),\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.staffLineWeight + \"px\",\n      fill: \"none\",\n      class: \"brace\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createNode(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        [node, this.accent.createSvgNode(ctxt)]\n      );\n    } else return node;\n  }\n  createSvgTree(ctxt) {\n    var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createSvgTree(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        node,\n        this.accent.createSvgTree(ctxt)\n      );\n    } else return node;\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      fragment += this.accent.createSvgFragment(ctxt);\n\n      return QuickSvg.createFragment(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        fragment\n      );\n    } else return fragment;\n  }\n\n  // returns svg path d string\n  generatePathString() {\n    var x1 = this.bounds.x;\n    var x2 = this.bounds.right();\n    var width = this.bounds.width;\n    var y, dx, dy;\n\n    dx = width / 6;\n    dy = this.bounds.height;\n    if (this.isAbove) {\n      y = this.bounds.bottom();\n      dy = -dy;\n    } else {\n      y = this.bounds.y;\n    }\n\n    //Calculate Control Points of path,\n    var cx1 = x1 + dx;\n    var cy = y + dy;\n    var cx2 = x2 - dx;\n\n    // two decimal points should be enough, but if we need more precision, we can\n    // up it here.\n    var dp = 2;\n    return (\n      \"M \" +\n      x1.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" C \" +\n      cx1.toFixed(dp) +\n      \" \" +\n      cy.toFixed(dp) +\n      \" \" +\n      cx2.toFixed(dp) +\n      \" \" +\n      cy.toFixed(dp) +\n      \" \" +\n      x2.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp)\n    );\n  }\n}\n\nexport class CurlyBraceVisualizer extends ChantLayoutElement {\n  constructor(ctxt, x1, x2, y, isAbove = true, addAcuteAccent = false) {\n    super();\n\n    if (x1 > x2) {\n      // swap the xs\n      var temp = x1;\n      x1 = x2;\n      x2 = temp;\n    }\n\n    this.isAbove = isAbove;\n    this.braceHeight = ctxt.staffInterval / 2;\n\n    // y is the actual vertical start of the brace (left hand side)\n    // thus for a brace over notes, bounds.y is the bottom of brace,\n    // but for a brace under the notes, y is simply the y passed in.\n    if (isAbove) y -= this.braceHeight;\n\n    var bounds = new Rect(x1, y, x2 - x1, this.braceHeight);\n\n    if (addAcuteAccent && isAbove) {\n      this.accent = new GlyphVisualizer(ctxt, GlyphCode.AcuteAccent);\n      this.accent.bounds.x += bounds.x + (x2 - x1) / 2;\n      this.accent.bounds.y += bounds.y - ctxt.staffInterval / 4;\n\n      bounds.union(this.accent.bounds);\n    }\n\n    this.bounds = bounds;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  getSvgPathProps(ctxt) {\n    return {\n      d: this.generatePathString(),\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.staffLineWeight + \"px\",\n      fill: \"none\",\n      class: \"brace\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      return QuickSvg.createNode(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        [node, this.accent.createSvgNode(ctxt)]\n      );\n    } else return node;\n  }\n  createSvgTree(ctxt) {\n    var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createSvgTree(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        node,\n        this.accent.createSvgTree(ctxt)\n      );\n    } else return node;\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      fragment += this.accent.createSvgFragment(ctxt);\n\n      return QuickSvg.createFragment(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        fragment\n      );\n    } else return fragment;\n  }\n\n  // code below inspired by: https://gist.github.com/alexhornbake\n  // optimized for braces that are only drawn horizontally.\n  // returns svg path d string\n  generatePathString() {\n    var q = 0.6; // .5 is normal, higher q = more expressive bracket\n\n    var x1 = this.bounds.x;\n    var x2 = this.bounds.right();\n    var width = this.bounds.width;\n    var y, h;\n\n    if (this.isAbove) {\n      y = this.bounds.bottom();\n      h = -this.braceHeight;\n    } else {\n      y = this.bounds.y;\n      h = this.braceHeight;\n    }\n\n    // calculate Control Points of path\n    var qy1 = y + q * h;\n    var qx2 = x1 + 0.25 * width;\n    var qy2 = y + (1 - q) * h;\n    var tx1 = x1 + 0.5 * width;\n    var ty1 = y + h;\n    var qy3 = y + q * h;\n    var qx4 = x1 + 0.75 * width;\n    var qy4 = y + (1 - q) * h;\n\n    // two decimal points should be enough, but if we need more precision, we can\n    // up it here.\n    var dp = 2;\n    return (\n      \"M \" +\n      x1.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" Q \" +\n      x1.toFixed(dp) +\n      \" \" +\n      qy1.toFixed(dp) +\n      \" \" +\n      qx2.toFixed(dp) +\n      \" \" +\n      qy2.toFixed(dp) +\n      \" T \" +\n      tx1.toFixed(dp) +\n      \" \" +\n      ty1.toFixed(dp) +\n      \" M \" +\n      x2.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" Q \" +\n      x2.toFixed(dp) +\n      \" \" +\n      qy3.toFixed(dp) +\n      \" \" +\n      qx4.toFixed(dp) +\n      \" \" +\n      qy4.toFixed(dp) +\n      \" T \" +\n      tx1.toFixed(dp) +\n      \" \" +\n      ty1.toFixed(dp)\n    );\n  }\n}\n\nexport class TextSpan {\n  constructor(text, properties, activeTags, index = 0) {\n    if (typeof properties === \"undefined\" || properties === null)\n      properties = {};\n\n    this.text = text;\n    this.properties = properties;\n    this.activeTags = activeTags || [];\n    this.index = index;\n  }\n\n  clone() {\n    return new TextSpan(\n      this.text,\n      this.properties,\n      this.activeTags,\n      this.index\n    );\n  }\n}\n\nfunction MarkupStackFrame(tagName, startIndex, properties = {}, symbol) {\n  this.tagName = tagName;\n  this.startIndex = startIndex;\n  this.properties = properties;\n  if (symbol) this.symbol = symbol;\n}\n\nMarkupStackFrame.createStackFrame = function (ctxt, tagName, startIndex, extraProperties = {}, symbol = '') {\n  return new MarkupStackFrame(\n    tagName,\n    startIndex,\n    Object.assign({}, ctxt.fontStyleDictionary[tagName], extraProperties),\n    symbol\n  );\n};\n\n// for escaping html strings before they go into the svgs\n// adapted from http://stackoverflow.com/a/12034334/5720160\nvar __subsForTspans = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\"\n};\n\nexport class TextElement extends ChantLayoutElement {\n  constructor(\n    ctxt,\n    text,\n    fontFamily,\n    fontSize,\n    textAnchor,\n    sourceIndex,\n    sourceGabc\n  ) {\n    super();\n\n    // set these to some sane values for now...\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    this.fontFamily = fontFamily;\n    this.fontSize = fontSize;\n    this.textAnchor = textAnchor;\n    this.sourceIndex = sourceIndex;\n    this.sourceGabc = sourceGabc;\n    this.dominantBaseline = \"baseline\"; // default placement\n\n    this.generateSpansFromText(ctxt, text);\n\n    this.recalculateMetrics(ctxt);\n  }\n\n  getFromScore(score) {\n    return this.textType.getFromScore(score, this);\n  }\n\n  generateSpansFromText(ctxt, text) {\n    text = text.replace(/\\s+/g, \" \");\n    this.text = \"\";\n    this.spans = [];\n\n    // save ourselves a lot of grief for a very common text:\n    if (text === \"*\" || text === \"+\" || text === \"†\") {\n      let properties =\n        text === \"*\"\n          ? ctxt.asteriskProperties\n          : text === \"+\"\n          ? ctxt.plusProperties\n          : null;\n      text = ctxt.specialCharText(text) || text;\n      this.spans.push(new TextSpan(text, properties));\n      return;\n    }\n\n    var markupStack = [];\n    var spanStartIndex = 0;\n    var newLineInNextSpan = 0;\n\n    var filterFrames = (frame, symbol) => frame.Symbol === symbol;\n\n    var closeSpan = (spanText, index, extraProperties) => {\n      if (spanText === \"\" && !this.dropCap) return;\n\n      this.text += spanText;\n\n      var properties = {};\n      for (var i = 0; i < markupStack.length; i++)\n        Object.assign(properties, markupStack[i].properties);\n\n      if (extraProperties) Object.assign(properties, extraProperties);\n      if (newLineInNextSpan) {\n        properties.newLine = newLineInNextSpan;\n        newLineInNextSpan = 0;\n      }\n\n      this.spans.push(\n        new TextSpan(\n          spanText,\n          properties,\n          markupStack.map((frame) => frame.tagName),\n          index\n        )\n      );\n    };\n\n    var markupRegex = /(<br\\/?>)|<v>([\\s\\S]*?)(?:<\\/v>|$)|(\\*)(?=\\s*\\*|[^*]*(?:$|<v>))|(\\+)|<sp>(?:(~)|(')?([ao]e|[æœaeiouy])|([arv])\\/)<\\/sp>|([arv])\\/\\.|([℣℟])\\.?|(?:([*_^%])|<(\\/)?([bciuv]|ul|sc|font)(?:\\s+(?:family=\"([^\"]+)\"|fill=\"([^\"]+)\"|class=\"([^\"]+)\"))*>)(?=(?:(.+?)(?:\\11|<\\/\\13>))?)/gi;\n    var vTagRegex = /(\\\\grecross)|\\{greextra\\}\\{([^}]*)\\}/g;\n    var match = null;\n    var openedAsterisk = false;\n    var closeCurrentSpan = () =>\n      closeSpan(text.substring(spanStartIndex, match.index), spanStartIndex);\n    while ((match = markupRegex.exec(text))) {\n      var [\n        ,\n        newLine,\n        vTag,\n        asterisk,\n        plus,\n        tilde,\n        accent,\n        vowelLigature,\n        specialChar,\n        specialChar2,\n        specialChar3,\n        markupSymbol,\n        closingTag,\n        tagName,\n        family,\n        fill,\n        cssClass,\n        enclosedText\n      ] = match;\n      specialChar = specialChar || specialChar2 || specialChar3;\n      // non-matching symbols first\n      if (newLine) {\n        // close the current span, if any:\n        if (match.index > spanStartIndex) {\n          closeCurrentSpan();\n        }\n        // add the newline span:\n        newLineInNextSpan++;\n      } else if (vTag) {\n        closeCurrentSpan();\n        let vMatch;\n        let lastIndex = 0;\n        let iOffset = 0;\n        while ((vMatch = vTagRegex.exec(vTag))) {\n          if (lastIndex < vMatch.index) {\n            closeSpan(vTag.slice(lastIndex, vMatch.index), match.index + lastIndex + iOffset);\n            iOffset = 3; // length of '<v>'\n          }\n          let [, grecross, greextra] = vMatch;\n          if (grecross) {\n            // grecross is just the command for the Cross:\n            // set up greextra so it will get handled with it below:\n            greextra = 'Cross';\n          }    \n          const char = greextraGlyphs[greextra];\n          if (char) {\n            closeSpan(char, match.index + vMatch.index + iOffset, { 'font-family': 'greextra' })\n          }\n          lastIndex = vTagRegex.lastIndex;\n          iOffset = 3; // length of '<v>'\n        }\n        if (lastIndex < vTag.length) {\n          closeSpan(vTag.slice(lastIndex), match.index + lastIndex + iOffset);\n        }\n      } else if (asterisk) {\n        closeCurrentSpan();\n        // first check if it is just a symbol to close:\n        if (\n          markupStack.length > 0 &&\n          markupStack[markupStack.length - 1].symbol === asterisk\n        ) {\n          // close asterisk tag\n          markupStack.pop();\n        } else {\n          // add special asterisk:\n          closeSpan(ctxt.specialCharText(asterisk) || '*', match.index, ctxt.asteriskProperties);\n        }\n      } else if (plus) {\n        closeCurrentSpan();\n        closeSpan(ctxt.specialCharText(plus) || '+', match.index, ctxt.plusProperties);\n      } else if (tilde) {\n        closeCurrentSpan();\n        closeSpan('∼', match.index);\n      } else if (vowelLigature) {\n        let vowel = makeLigature(vowelLigature);\n        if (accent) vowel = addAccent(vowel);\n        closeCurrentSpan();\n        closeSpan(vowel, match.index);\n      } else if (specialChar) {\n        closeCurrentSpan();\n        closeSpan(\n          ctxt.textBeforeSpecialChar +\n            ctxt.specialCharText(specialChar) +\n            ctxt.textAfterSpecialChar,\n          match.index,\n          ctxt.specialCharProperties\n        );\n      } else {\n        // otherwise we're dealing with matching markup delimeters\n        if (markupSymbol === \"*\") {\n          // we are only strict with the asterisk, because there are cases when it needs to be displayed rather than count as a markup symbol\n          if (enclosedText && /[^\\s*]/.test(enclosedText)) {\n            openedAsterisk = true;\n          } else if (openedAsterisk) {\n            openedAsterisk = false;\n          } else {\n            // actually use the asterisk, since it doesn't have a matching closing asterisk\n            continue;\n          }\n        }\n        if (markupSymbol) {\n          tagName = ctxt.markupSymbolDictionary[markupSymbol];\n          if (\n            markupStack.length > 0 &&\n            markupStack[markupStack.length - 1].tagName === tagName &&\n            markupStack[markupStack.length - 1].symbol === markupSymbol\n          ) {\n            closingTag = true;\n          }\n        }\n        if (\n          markupStack.length > 0 &&\n          markupStack[markupStack.length - 1].tagName === tagName\n        ) {\n          if (closingTag) {\n            // group close\n            closeCurrentSpan();\n            markupStack.pop();\n          }\n        } else if (markupStack.filter(filterFrames).length > 0) {\n          // trying to open a recursive group (or forgot to close a previous group)\n          // in either case, we just unwind to the previous stack frame\n          spanStartIndex = markupStack[markupStack.length - 1].startIndex;\n          markupStack.pop();\n          continue;\n        } else {\n          closeCurrentSpan();\n          if (closingTag) {\n            // out of order group close:\n            let index = markupStack.findIndex(\n              (frame) => frame.tagName === tagName\n            );\n            if (index >= 0) {\n              markupStack.splice(index, 1);\n            }\n          } else {\n            // group open\n            const extraProperties = {};\n            if (family) extraProperties['font-family'] = family;\n            if (fill) extraProperties.fill = fill;\n            if (cssClass) extraProperties.class = cssClass;\n            markupStack.push(\n              MarkupStackFrame.createStackFrame(ctxt, tagName, match.index, extraProperties, markupSymbol)\n            );\n          }\n        }\n      }\n\n      // advance the start index past the current markup\n      spanStartIndex = match.index + match[0].length;\n    }\n\n    // if we finished matches, and there is still some text left,\n    // or if we haven't generated any spans yet, create one final run\n    if (spanStartIndex < text.length || this.spans.length === 0)\n      closeSpan(text.slice(spanStartIndex), spanStartIndex);\n  }\n\n  getCanvasFontForProperties(ctxt, properties = {}) {\n    var font = \"\";\n    if (properties[\"font-style\"] === \"italic\") font += \"italic \";\n    if (properties[\"font-variant\"] === \"small-caps\") font += \"small-caps \";\n    if (properties[\"font-weight\"] === \"bold\") font += \"bold \";\n    let fontSize = parseFloat(properties[\"font-size\"]) || this.fontSize(ctxt);\n    if (/%$/.test(properties[\"font-size\"])) {\n      fontSize *= this.fontSize(ctxt) / 100;\n    }\n    font += `${fontSize * (this.resize || 1)}px `;\n    font += properties[\"font-family\"] || this.fontFamily(ctxt);\n    return font;\n  }\n\n  measureSubstringBBox(ctxt, length) {\n    return this.measureSubstring(ctxt, length, true);\n  }\n\n  // if length is undefined and this.rightAligned === true, then offsets will be marked for each newLine span\n  measureSubstring(ctxt, length, returnBBox = false) {\n    if (length === 0) return 0;\n    if (!length) length = Infinity;\n    if (length < 0) {\n      var lines = -length;\n      length = Infinity;\n    }\n    var canvasCtxt = ctxt.canvasCtxt;\n    var width = 0;\n    var widths = [];\n    var newLineSpans = [this.spans[0]];\n    var subStringLength = 0;\n    var numLines = 1;\n    var fontSize = this.fontSize(ctxt) * (this.resize || 1);\n    var bbox = new Rect(0, 0, 0, 0);\n    for (var i = 0; i < this.spans.length; i++) {\n      var span = this.spans[i],\n        myText = span.text.slice(0, length - subStringLength);\n      if (span.properties.newLine) {\n        numLines += parseInt(span.properties.newLine) || 1;\n        if (!lines && this.rightAligned === true && length === Infinity) {\n          newLineSpans[newLineSpans.length - 1].properties.xOffset =\n            this.firstLineMaxWidth - width;\n          newLineSpans.push(span);\n        } else if (--lines === 0) break;\n        widths.push(width);\n        width = 0;\n      }\n      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n        canvasCtxt.font = this.getCanvasFontForProperties(\n          ctxt,\n          span.properties\n        );\n        let metrics = canvasCtxt.measureText(\n          myText,\n          width,\n          fontSize * (numLines - 1)\n        );\n        if (\"actualBoundingBoxAscent\" in metrics) {\n          let left = metrics.actualBoundingBoxLeft;\n          bbox.union(\n            new Rect(\n              width - left,\n              fontSize * (numLines - 1) - metrics.actualBoundingBoxAscent,\n              metrics.width + left,\n              metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent\n            )\n          );\n          if (this instanceof DropCap) {\n            width += Math.max(0, left);\n          }\n        } else {\n          bbox.union(\n            new Rect(width, fontSize * (numLines - 2), metrics.width, fontSize)\n          );\n        }\n        width += metrics.width;\n      } else if (\n        ctxt.textMeasuringStrategy === TextMeasuringStrategy.OpenTypeJS &&\n        ctxt.fontDictionary\n      ) {\n        // get the bounding box for the substring, placing it at x = width, y = fontSize * (numLines - 1)\n        let font = ctxt.getFontForProperties(\n          span.properties,\n          span.properties[\"font-family\"] || this.fontFamily(ctxt)\n        );\n        let options = { features: { liga: true } };\n        if (span.properties[\"font-variant\"] === \"small-caps\") {\n          options.features.smcp = true;\n        }\n        let spanFontSize = parseFloat(span.properties[\"font-size\"]) || fontSize;\n        if (/%$/.test(span.properties[\"font-size\"])) {\n          spanFontSize *= fontSize / 100;\n        }\n        let subBbox = font\n          .getPath(\n            myText,\n            width,\n            fontSize * (numLines - 1),\n            spanFontSize,\n            options\n          )\n          .getBoundingBox();\n        let subWidth = font.getAdvanceWidth(myText, spanFontSize, options);\n\n        bbox.union(\n          new Rect(\n            width + subBbox.x1,\n            subBbox.y1,\n            subWidth - subBbox.x1,\n            subBbox.y2 - subBbox.y1\n          )\n        );\n        width += subWidth;\n        if (this instanceof DropCap) {\n          width -= subBbox.x1;\n        }\n      }\n      subStringLength += myText.length;\n      if (subStringLength === length) break;\n    }\n    if (\n      !lines &&\n      width &&\n      newLineSpans.length &&\n      this.rightAligned === true &&\n      length === Infinity\n    ) {\n      newLineSpans[newLineSpans.length - 1].properties.xOffset =\n        this.firstLineMaxWidth - width;\n    }\n    width = Math.max(width, ...widths);\n    if (returnBBox === true) {\n      let height = bbox.height;\n      let y = bbox.y,\n        x = bbox.x;\n      return { width, height, x, y };\n    } else {\n      return width;\n    }\n  }\n\n  recalculateMetrics(ctxt, resetNewLines = true) {\n    if (resetNewLines) {\n      delete this.maxWidth;\n      delete this.firstLineMaxWidth;\n      delete this.rightAligned;\n      delete this.resize;\n      delete this.numLines;\n      // replace newlines with spaces\n      this.spans.forEach((span) => {\n        delete span.properties.xOffset;\n        if (span.properties.newLine === true) {\n          delete span.properties.newLine;\n          span.text = \" \" + span.text;\n        }\n      });\n    }\n\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n\n    this.origin.x = 0;\n\n    if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n      while (ctxt.svgTextMeasurer.firstChild)\n        ctxt.svgTextMeasurer.removeChild(ctxt.svgTextMeasurer.firstChild);\n      ctxt.svgTextMeasurer.appendChild(this.createSvgNode(ctxt));\n      ctxt.svgTextMeasurer.appendChild(ctxt.createStyleNode());\n\n      var bbox = ctxt.svgTextMeasurer.firstChild.getBBox();\n      this.bounds.width = bbox.width;\n      this.bounds.height = bbox.height;\n      this.origin.y = -bbox.y; // offset to baseline from top\n      this.origin.x = -bbox.x;\n    } else {\n      let bbox = this.measureSubstringBBox(ctxt);\n      this.bounds.width = bbox.width;\n      this.bounds.height = bbox.height;\n      this.origin.y = -bbox.y;\n      this.origin.x = -bbox.x;\n    }\n    this.numLines = this.spans.reduce(\n      (result, span) =>\n        result +\n        (span.properties.newLine ? parseInt(span.properties.newLine) || 1 : 0),\n      1\n    );\n  }\n\n  setMaxWidth(ctxt, maxWidth, firstLineMaxWidth = maxWidth) {\n    if (this.spans.filter((s) => s.properties.newLine === true).length) {\n      // first get rid of any new lines set from a previous maxWidth\n      this.recalculateMetrics(ctxt);\n    }\n    if (this.bounds.width > maxWidth) {\n      this.maxWidth = maxWidth;\n      var percentage = maxWidth / this.bounds.width;\n      if (this instanceof Lyric && percentage >= 0.85) {\n        this.resize = percentage;\n      } else {\n        if (firstLineMaxWidth < 0) firstLineMaxWidth = maxWidth;\n        this.firstLineMaxWidth = firstLineMaxWidth;\n        var lastWidth = 0,\n          lastMatch = null,\n          regex = /\\s+|$/g,\n          max = firstLineMaxWidth,\n          match;\n        while (\n          (match = regex.exec(this.text)) &&\n          (!lastMatch || match.index > lastMatch.index)\n        ) {\n          var width = this.measureSubstring(ctxt, match.index);\n          if (width > max && lastMatch) {\n            var spanIndex = 0,\n              length = 0;\n            while (length < lastMatch.index && spanIndex < this.spans.length) {\n              let span = this.spans[spanIndex++];\n              length += span.text.length + (span.properties.newLine ? 1 : 0);\n            }\n            if (length > lastMatch.index) {\n              let span = this.spans[--spanIndex];\n              length -= span.text.length;\n            }\n            var splitSpan = this.spans[spanIndex],\n              textLeft = splitSpan.text.slice(0, lastMatch.index - length),\n              textRight = splitSpan.text.slice(\n                lastMatch.index + lastMatch[0].length - length\n              ),\n              newSpans = [];\n            this.rightAligned =\n              max === firstLineMaxWidth && firstLineMaxWidth !== maxWidth;\n            if (textLeft)\n              newSpans.push(\n                new TextSpan(\n                  textLeft,\n                  splitSpan.properties,\n                  splitSpan.activeTags\n                )\n              );\n            if (textRight) {\n              newSpans.push(\n                new TextSpan(\n                  textRight,\n                  Object.assign({}, splitSpan.properties, { newLine: true }),\n                  splitSpan.activeTags\n                )\n              );\n            } else if (this.spans[spanIndex + 1]) {\n              this.spans[spanIndex + 1].properties.newLine = true;\n            }\n            this.spans.splice(spanIndex, 1, ...newSpans);\n            this.needsLayout = true;\n            max = maxWidth;\n            if (\n              match.index === this.text.length ||\n              this.measureSubstring(ctxt) <= maxWidth\n            )\n              break;\n            width = 0;\n            match = lastMatch = null;\n          }\n          lastWidth = width;\n          lastMatch = match;\n        }\n      }\n      this.recalculateMetrics(ctxt, false);\n    }\n  }\n\n  getCssClasses() {\n    return (this.textType && this.textType.cssClass) || \"\";\n  }\n\n  getExtraStyleProperties(ctxt) {\n    return ctxt.baseTextStyle || {};\n  }\n\n  static escapeForTspan(string) {\n    return String(string).replace(/[&<>]/g, function (s) {\n      return __subsForTspans[s];\n    });\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    if (this.textAnchor === \"middle\") canvasCtxt.textAlign = \"center\";\n    else canvasCtxt.textAlign = \"start\";\n\n    var translateWidth = 0,\n      translateHeight = 0;\n    for (var i = 0; i < this.spans.length; i++) {\n      var span = this.spans[i];\n      var xOffset = span.properties.xOffset || 0;\n      if (span.properties.newLine) {\n        count = parseInt(span.properties.newLine) || 1;\n        canvasCtxt.translate(\n          translateWidth + xOffset,\n          this.fontSize(ctxt) * count\n        );\n        translateWidth = -xOffset;\n        translateHeight -= this.fontSize(ctxt);\n      } else if (xOffset) {\n        canvasCtxt.translate(translateWidth + xOffset, 0);\n        translateWidth = -xOffset;\n      }\n      var properties = Object.assign(\n        {},\n        this.getExtraStyleProperties(ctxt),\n        span.properties\n      );\n      canvasCtxt.font = this.getCanvasFontForProperties(ctxt, properties);\n      canvasCtxt.fillStyle = properties.fill || \"#000\";\n      canvasCtxt.fillText(\n        span.text,\n        this.bounds.x,\n        this.bounds.y,\n        span.properties.textLength || undefined\n      );\n      var metrics = canvasCtxt.measureText(\n        span.text,\n        this.bounds.x,\n        this.bounds.y\n      );\n      translateWidth -= metrics.width;\n      canvasCtxt.translate(metrics.width, 0);\n    }\n    canvasCtxt.translate(translateWidth, translateHeight);\n  }\n\n  getSvgProps() {\n    return {\n      \"source-index\": this.sourceIndex,\n      x: this.bounds.x,\n      y: this.bounds.y,\n      class: this.getCssClasses().trim(),\n      \"text-anchor\": this.textAnchor\n      //'dominant-baseline': this.dominantBaseline, // hanging baseline doesn't work in Safari\n    };\n  }\n\n  getSpanOptions(span, ctxt, useStyleObject = false) {\n    var options = {\n      \"source-index\": span.index,\n      class: span.properties.class,\n      style: useStyleObject\n        ? Object.assign({}, span.properties)\n        : getCssForProperties(span.properties)\n    };\n\n    if (span.properties.newLine) {\n      var xOffset = span.properties.xOffset || 0;\n      options.dy = 1.1 * (parseInt(span.properties.newLine) || 1) + \"em\";\n      options.x = this.bounds.x + xOffset;\n    } else if (span.properties.xOffset) {\n      options.x = this.bounds.x + span.properties.xOffset;\n    }\n    if (span.properties.textLength) {\n      options.textLength = span.properties.textLength;\n      options.lengthAdjust = \"spacingAndGlyphs\";\n      options.y = this.bounds.y;\n    }\n    if (this.resize) {\n      options[\"font-size\"] =\n        span.properties[\"font-size\"] || this.fontSize(ctxt) * this.resize;\n    }\n    // if (ctxt.setFontFamilyAttributes) {\n    //   options[\"font-family\"] =\n    //     span.properties[\"font-family\"] ||\n    //     getFontFilenameForProperties(span.properties, this.fontFamily(ctxt));\n    //   let properties = Object.assign({}, span.properties);\n    //   delete properties[\"font-weight\"];\n    //   delete properties[\"font-style\"];\n    //   options[\"style\"] = getCssForProperties(properties);\n    // } else {\n    //   options[\"style\"] = getCssForProperties(span.properties);\n    // }\n\n    return options;\n  }\n\n  createSvgNode(ctxt) {\n    var spans = [];\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt);\n\n      spans.push(QuickSvg.createNode(\"tspan\", options, span.text));\n    }\n\n    let options = this.getSvgProps();\n    const extraStyleProperties = this.getExtraStyleProperties(ctxt);\n    options.style = getCssForProperties(extraStyleProperties);\n    if (extraStyleProperties.class) {\n      options.class = extraStyleProperties.class + ' ' + options.class;\n    }\n    options.source = this;\n\n    return (this.svgNode = QuickSvg.createNode(\"text\", options, spans));\n  }\n  createSvgTree(ctxt) {\n    var spans = [];\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt, true);\n\n      spans.push(QuickSvg.createSvgTree(\"tspan\", options, span.text));\n    }\n\n    let options = this.getSvgProps();\n    options.style = this.getExtraStyleProperties(ctxt);\n    if (options.style.class) {\n      options.class = options.style.class + ' ' + options.class;\n    }\n    options.source = this;\n\n    return QuickSvg.createSvgTree(\"text\", options, ...spans);\n  }\n\n  createSvgFragment(ctxt) {\n    var spans = \"\";\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt);\n\n      spans += QuickSvg.createFragment(\n        \"tspan\",\n        options,\n        TextElement.escapeForTspan(span.text)\n      );\n    }\n\n    let options = this.getSvgProps();\n    const extraStyleProperties = this.getExtraStyleProperties(ctxt)\n    options.style = getCssForProperties(extraStyleProperties);\n    if (extraStyleProperties.class) {\n      options.class = extraStyleProperties.class + ' ' + options.class;\n    }\n    if (ctxt.setFontFamilyAttributes) {\n      options[\"font-size\"] = this.fontSize(ctxt);\n    }\n\n    return QuickSvg.createFragment(\"text\", options, spans);\n  }\n}\n\nexport var LyricType = {\n  SingleSyllable: 0,\n  BeginningSyllable: 1,\n  MiddleSyllable: 2,\n  EndingSyllable: 3,\n\n  Directive: 4 // for asterisks, \"ij.\" elements, or other performance notes.\n};\n\nexport var LyricArray = {\n  getLeft: function (lyricArray) {\n    if (lyricArray.length === 0) return NaN;\n\n    var x = Number.MAX_VALUE;\n    for (var i = 0; i < lyricArray.length; i++) {\n      if (lyricArray[i])\n        x = Math.min(\n          x,\n          lyricArray[i].notation.bounds.x + lyricArray[i].bounds.x\n        );\n    }\n\n    return x;\n  },\n\n  getRight: function (lyricArray, presumeConnectorNeeded) {\n    if (lyricArray.length === 0) return NaN;\n\n    var x = Number.MIN_VALUE;\n    for (var i = 0; i < lyricArray.length; i++) {\n      let l = lyricArray[i];\n      if (l)\n        x = Math.max(\n          x,\n          l.notation.bounds.x +\n            l.bounds.x +\n            l.bounds.width +\n            (presumeConnectorNeeded && l.allowsConnector() && !l.needsConnector\n              ? l.getConnectorWidth()\n              : 0)\n        );\n    }\n\n    return x;\n  },\n\n  hasOnlyOneLyric: function (lyricArray) {\n    return lyricArray.filter((l) => l.originalText).length === 1;\n  },\n\n  indexOfLyric: function (lyricArray) {\n    return lyricArray.indexOf(lyricArray.filter((l) => l.originalText)[0]);\n  },\n\n  mergeIn: function (lyricArray, newLyrics) {\n    for (var i = 0; i < newLyrics.length; ++i) {\n      if (newLyrics[i].originalText || !lyricArray[i])\n        lyricArray[i] = newLyrics[i];\n    }\n  },\n\n  mergeInArray: function (lyricArray, notations) {\n    for (var i = 0; i < notations.length; ++i) {\n      this.mergeIn(lyricArray, notations[i].lyrics);\n    }\n  },\n\n  setNotation: function (lyricArray, notation) {\n    notation.lyrics = lyricArray;\n    for (var i = 0; i < lyricArray.length; ++i) {\n      lyricArray[i].notation = notation;\n    }\n  }\n};\n\nexport class Lyric extends TextElement {\n  constructor(ctxt, text, lyricType, notation, notations, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.lyric.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.lyric.font,\n      (ctxt) => ctxt.textStyles.lyric.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.lyric;\n\n    // save the original text in case we need to later use the lyric\n    // in a dropcap...\n    this.originalText = text;\n\n    this.notation = notation;\n    this.notations = notations;\n\n    if (\n      typeof lyricType === \"undefined\" ||\n      lyricType === null ||\n      lyricType === \"\"\n    )\n      this.lyricType = LyricType.SingleSyllable;\n    else this.lyricType = lyricType;\n\n    // Lyrics keep track of how to center them on notation elements.\n    // centerTextIndex is the index in this.text where the centering starts,\n    // centerLength is how many characters comprise the center point.\n    // performLayout will do the processing\n    this.centerStartIndex = -1;\n    this.centerLength = text.length;\n\n    this.needsConnector = false;\n\n    // Lyrics can have their own language defined, which affects the alignment\n    // of the text with the notation element\n    this.language = null;\n\n    if (this.allowsConnector)\n      this.connectorSpan = new TextSpan(ctxt.syllableConnector);\n  }\n\n  allowsConnector() {\n    return (\n      this.lyricType === LyricType.BeginningSyllable ||\n      this.lyricType === LyricType.MiddleSyllable\n    );\n  }\n\n  setForceConnector(force) {\n    this.forceConnector = force && this.allowsConnector();\n  }\n\n  setNeedsConnector(needs, width) {\n    if (needs === true || this.forceConnector) {\n      this.needsConnector = true;\n      if (typeof width !== \"undefined\") {\n        this.setConnectorWidth(width);\n      } else {\n        this.bounds.width =\n          this.widthWithoutConnector + this.getConnectorWidth();\n      }\n\n      if (\n        this.spans.length > 0 &&\n        this.spans[this.spans.length - 1] !== this.connectorSpan\n      )\n        this.spans.push(this.connectorSpan);\n    } else {\n      this.connectorWidth = 0;\n      this.needsConnector = false;\n      this.bounds.width = this.widthWithoutConnector;\n\n      var span = this.spans.pop();\n      if (span && span !== this.connectorSpan) this.spans.push(span);\n    }\n  }\n\n  setConnectorWidth(width) {\n    this.connectorWidth = width;\n    this.connectorSpan.properties = Object.assign(\n      {},\n      this.connectorSpan.properties,\n      { textLength: width }\n    );\n    if (this.needsConnector)\n      this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n  }\n\n  getConnectorWidth() {\n    return this.connectorWidth || this.defaultConnectorWidth;\n  }\n\n  getLeft() {\n    return this.notation.bounds.x + this.bounds.x;\n  }\n\n  getRight() {\n    return this.notation.bounds.x + this.bounds.x + this.bounds.width;\n  }\n\n  recalculateMetrics(ctxt, resetNewLines = true) {\n    this.setNeedsConnector();\n\n    super.recalculateMetrics(ctxt, resetNewLines);\n\n    this.widthWithoutConnector = this.bounds.width;\n\n    this.connectorWidth = 0;\n    this.defaultConnectorWidth = ctxt.hyphenWidth;\n\n    var activeLanguage = this.language || ctxt.defaultLanguage;\n\n    // calculate the point where the text lines up to the staff notation\n    // and offset the rect that much. By default we just center the text,\n    // but the logic below allows for smarter lyric alignment based\n    // on manual override or language control.\n    var offset = this.widthWithoutConnector / 2,\n      x1,\n      x2,\n      vowelSegmentWidth = this.widthWithoutConnector;\n\n    // some simple checks for sanity, and disable manual centering if the numbers are bad\n    if (\n      this.centerStartIndex >= 0 &&\n      (this.centerStartIndex >= this.text.length ||\n        this.centerLength < 0 ||\n        this.centerStartIndex + this.centerLength > this.text.length)\n    )\n      this.centerStartIndex = -1;\n\n    if (this.text.length === 0) {\n      // if we have no text to work with, then there's nothing to do!\n      // Unless it's a drop cap, in which case we center the connector:\n      if (this.dropCap && this.originalText) {\n        offset = ctxt.hyphenWidth / 2;\n        vowelSegmentWidth = ctxt.hyphenWidth;\n      }\n    } else if (this.centerStartIndex >= 0) {\n      // if we have manually overriden the centering logic for this lyric,\n      // then always use that.\n      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n        // svgTextMeasurer still has the current lyric in it...\n        x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n          0,\n          this.centerStartIndex\n        );\n        x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n          0,\n          this.centerStartIndex + this.centerLength\n        );\n      } else {\n        x1 = this.measureSubstring(ctxt, this.centerStartIndex);\n        x2 = this.measureSubstring(\n          ctxt,\n          this.centerStartIndex + this.centerLength\n        );\n      }\n      offset = (x1 + x2) / 2;\n      vowelSegmentWidth = x2 - x1;\n    } else {\n      // if it's a directive with no manual centering override, then\n      // just center the text.\n      if (this.lyricType !== LyricType.Directive) {\n        // only consider text content after the last space (if any)\n        var startIndex = this.text.lastIndexOf(\" \") + 1;\n\n        // unless there are no text characters following the space:\n        if (\n          startIndex > 0 &&\n          !this.text\n            .slice(startIndex)\n            .match(/[a-záéíóúýäëïöüÿàèìòùỳāēīōūȳăĕĭŏŭ]/i)\n        ) {\n          startIndex = 0;\n        }\n\n        // Non-directive elements are lined up to the chant notation based on vowel segments,\n        var result = activeLanguage.findVowelSegment(this.text, startIndex);\n\n        if (result.found !== true) {\n          var match = this.text.slice(startIndex).match(/[a-z]+/i);\n          if (match) {\n            result.startIndex = startIndex + match.index;\n            result.length = match[0].length;\n          } else {\n            result.startIndex = startIndex;\n            result.length = this.text.length - startIndex;\n          }\n        }\n        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n          // svgTextMeasurer still has the current lyric in it...\n          x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n            0,\n            result.startIndex\n          );\n          x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n            0,\n            result.startIndex + result.length\n          );\n        } else {\n          x1 = this.measureSubstring(ctxt, result.startIndex);\n          x2 = this.measureSubstring(ctxt, result.startIndex + result.length);\n        }\n        offset = (x1 + x2) / 2;\n        vowelSegmentWidth = x2 - x1;\n      }\n    }\n\n    this.vowelSegmentWidth = vowelSegmentWidth;\n\n    this.bounds.x = -offset;\n    this.bounds.y = 0;\n\n    this.origin.x = offset;\n  }\n\n  generateDropCap(ctxt) {\n    if (this.dropCap) return this.dropCap;\n    // disallow special characters:\n    if (this.spans[0].properties['font-family'] === ctxt.specialCharProperties['font-family']) {\n      return null;\n    }\n    let dropCapSpan = this.spans[0].clone();\n    dropCapSpan.text = dropCapSpan.text.slice(0, 1).toUpperCase();\n    let dropCapLowerCase = dropCapSpan.text.toLowerCase();\n    // disallow any characters that do not change from .toUpperCase():\n    if (dropCapSpan.text === dropCapLowerCase) return null;\n\n    if (dropCapSpan.activeTags.indexOf(\"sc\") >= 0)\n      dropCapSpan.text = dropCapLowerCase;\n\n    var dropCap = (this.dropCap = new DropCap(ctxt, \"\", this.sourceIndex));\n    dropCap.spans = [dropCapSpan];\n    let dropCapSourceGabcLength = this.sourceGabc.match(\n      /^(?:<\\/?[^>]>)*.?(?:<\\/[^>]>)*/\n    )[0].length;\n    dropCap.sourceGabc = this.sourceGabc.slice(0, dropCapSourceGabcLength);\n    this.sourceIndex += dropCap.sourceGabc.length;\n    this.sourceGabc = this.sourceGabc.slice(dropCapSourceGabcLength);\n\n    this.spans[0].text = this.spans[0].text.slice(1);\n    this.text = this.text.slice(1);\n    this.centerStartIndex--; // lost a letter, so adjust centering accordingly\n\n    return dropCap;\n  }\n\n  getCssClasses() {\n    var classes = this.lyricType === LyricType.Directive ? \"directive \" : \"\";\n\n    return classes + super.getCssClasses();\n  }\n\n  getExtraStyleProperties(ctxt) {\n    var props = super.getExtraStyleProperties(ctxt);\n\n    if (this.lyricType === LyricType.Directive && ctxt.autoColor === true)\n      props = Object.assign({}, props, { fill: ctxt.rubricColor });\n\n    return props;\n  }\n}\n\nexport class ChoralSign extends TextElement {\n  constructor(ctxt, text, note, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.choralSign.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.choralSign.font,\n      TextTypes.choralSign.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.positionHint = MarkingPositionHint.Default;\n    this.note = note;\n    this.textType = TextTypes.choralSign;\n  }\n\n  recalculateMetrics(ctxt) {\n    super.recalculateMetrics(ctxt);\n  }\n\n  performLayout(ctxt) {\n    this.recalculateMetrics(ctxt);\n    this.bounds.x =\n      this.note.bounds.x +\n      Math.max(0, (ctxt.staffInterval - this.bounds.width) / 2); // center on the note itself\n\n    let offset, staffPosition;\n    if (this.positionHint === MarkingPositionHint.Below) {\n      offset = -1;\n      staffPosition = this.note.staffPosition + 2 * offset;\n      staffPosition += staffPosition % 2 === 0 ? 0.3 : 1;\n    } else {\n      offset = 1;\n      staffPosition = this.note.staffPosition + 2 * offset;\n      staffPosition += staffPosition % 2 === 0 ? 0.3 : -0.4;\n    }\n    // if (staffPosition % 2 === 0) staffPosition += offset;\n    this.bounds.y =\n      ctxt.calculateHeightFromStaffPosition(staffPosition) + this.origin.y;\n  }\n}\n\nexport class AboveLinesText extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, notation, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.al.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.al.font,\n      (ctxt) => ctxt.textStyles.al.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.notation = notation;\n    this.textType = TextTypes.al;\n\n    this.padding = ctxt.staffInterval / 2;\n  }\n}\n\nexport class TranslationText extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, notation, sourceIndex) {\n    var gabcSource = text;\n    var anchor = \"start\";\n    if (text === \"/\") {\n      text = \"\";\n      anchor = \"end\";\n    } else {\n      text = (ctxt.textStyles.translation.prefix || \"\") + text;\n    }\n    super(\n      ctxt,\n      text,\n      (ctxt) => ctxt.textStyles.translation.font,\n      (ctxt) => ctxt.textStyles.translation.size,\n      anchor,\n      sourceIndex,\n      gabcSource\n    );\n    this.notation = notation;\n    this.textType = TextTypes.translation;\n\n    this.padding = ctxt.staffInterval / 2;\n  }\n}\n\nexport class DropCap extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.dropCap.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.dropCap.font,\n      (ctxt) => ctxt.textStyles.dropCap.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.dropCap;\n\n    this.padding = ctxt.staffInterval * ctxt.textStyles.dropCap.padding;\n  }\n}\n\nexport class TitleTextElement extends TextElement {\n  constructor(\n    ctxt,\n    text,\n    fontFamily,\n    fontSize,\n    textAnchor,\n    sourceIndex,\n    sourceGabc\n  ) {\n    super(\n      ctxt,\n      text,\n      fontFamily,\n      fontSize,\n      textAnchor,\n      sourceIndex,\n      sourceGabc\n    );\n  }\n}\n\nexport class Supertitle extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.supertitle.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.supertitle.font,\n      (ctxt) => ctxt.textStyles.supertitle.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.supertitle;\n\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.supertitle.padding) || 1) * ctxt.textStyles.supertitle.size / 3\n    );\n  }\n}\n\nexport class Title extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.title.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.title.font,\n      (ctxt) => ctxt.textStyles.title.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.title;\n\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.title.padding) || 1) * ctxt.textStyles.title.size / 3\n    );\n  }\n}\n\nexport class Subtitle extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.subtitle.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.subtitle.font,\n      (ctxt) => ctxt.textStyles.subtitle.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.subtitle;\n\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.subtitle.padding) || 1) * ctxt.textStyles.subtitle.size / 3\n    );\n  }\n}\n\nexport class TextLeftRight extends TitleTextElement {\n  constructor(ctxt, text, type, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.leftRight.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.leftRight.font,\n      (ctxt) => ctxt.textStyles.leftRight.size,\n      type === \"textLeft\" ? \"start\" : \"end\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.leftRight;\n    this.extraClass = type === \"textLeft\" ? \"textLeft\" : \"textRight\";\n    this.headerKey = type === \"textLeft\" ? \"text-left\" : \"text-right\";\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.leftRight.padding) || 1) * ctxt.textStyles.leftRight.size / 5\n    );\n  }\n\n  getCssClasses() {\n    return this.extraClass + \" \" + super.getCssClasses();\n  }\n}\n\nexport class Annotation extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text) {\n    super(\n      ctxt,\n      (ctxt.textStyles.annotation.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.annotation.font,\n      (ctxt) => ctxt.textStyles.annotation.size,\n      \"middle\"\n    );\n    this.textType = TextTypes.annotation;\n    this.padding = ctxt.staffInterval * ctxt.textStyles.annotation.padding;\n    this.dominantBaseline = \"hanging\"; // so that annotations can be aligned at the top.\n  }\n}\n\nexport class Annotations extends ChantLayoutElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, ...texts) {\n    super();\n\n    this.annotations = texts.map(function (text) {\n      return new Annotation(ctxt, text);\n    });\n    this.padding = Math.max.apply(\n      null,\n      this.annotations.map(function (annotation) {\n        return annotation.padding;\n      })\n    );\n  }\n\n  updateBounds(multiplier) {\n    if (!multiplier) multiplier = 1;\n    for (var i = 0; i < this.annotations.length; ++i) {\n      var annotation = this.annotations[i];\n      annotation.bounds.x += this.bounds.x * multiplier;\n      annotation.bounds.y += this.bounds.y * multiplier;\n    }\n  }\n\n  recalculateMetrics(ctxt) {\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    for (var i = 0; i < this.annotations.length; ++i) {\n      var annotation = this.annotations[i];\n      annotation.recalculateMetrics(ctxt);\n      this.bounds.width = Math.max(this.bounds.width, annotation.bounds.width);\n      annotation.bounds.y += this.bounds.height;\n      this.bounds.height += annotation.bounds.height;\n      this.origin.y = this.origin.y || annotation.origin.y;\n    }\n  }\n\n  draw(ctxt) {\n    this.updateBounds();\n    this.annotations.forEach(function (annotation) {\n      annotation.draw(ctxt);\n    });\n    this.updateBounds(-1);\n  }\n\n  createSvgNode(ctxt) {\n    this.updateBounds();\n    var result = this.annotations.map(function (annotation) {\n      return annotation.createSvgNode(ctxt);\n    });\n    this.updateBounds(-1);\n    return result;\n  }\n  createSvgTree(ctxt) {\n    this.updateBounds();\n    var result = this.annotations.map(function (annotation) {\n      return annotation.createSvgTree(ctxt);\n    });\n    this.updateBounds(-1);\n    return { children: result };\n  }\n\n  createSvgFragment(ctxt) {\n    this.updateBounds();\n    var result = this.annotations\n      .map(function (annotation) {\n        return annotation.createSvgFragment(ctxt);\n      })\n      .join(\"\");\n    this.updateBounds(-1);\n    return result;\n  }\n}\n\nexport class ChantNotationElement extends ChantLayoutElement {\n  constructor() {\n    super();\n\n    //double\n    this.leadingSpace = 0.0;\n    this.trailingSpace = DefaultTrailingSpace;\n    this.keepWithNext = false;\n    this.needsLayout = true;\n\n    this.lyrics = [];\n\n    this.score = null; // the ChantScore\n    this.line = null; // the ChantLine\n\n    this.visualizers = [];\n  }\n\n  hasLyrics() {\n    return this.lyrics.length !== 0;\n  }\n\n  getAllLyricsLeft() {\n    if (this.lyrics.length === 0) return this.bounds.right();\n\n    var x = Number.MAX_VALUE;\n    for (var i = 0; i < this.lyrics.length; i++) {\n      if (this.lyrics[i]) x = Math.min(x, this.lyrics[i].bounds.x);\n    }\n\n    return this.bounds.x + x;\n  }\n\n  getAllLyricsRight() {\n    if (this.lyrics.length === 0) return this.bounds.x;\n\n    var x = Number.MIN_VALUE;\n    for (var i = 0; i < this.lyrics.length; i++) {\n      if (this.lyrics[i])\n        x = Math.max(x, this.lyrics[i].bounds.x + this.lyrics[i].bounds.width);\n    }\n\n    return this.bounds.x + x;\n  }\n\n  // used by subclasses while building up the chant notations.\n  addVisualizer(chantLayoutElement) {\n    if (!chantLayoutElement.ignoreBounds) {\n      if (this.bounds.isEmpty())\n        this.bounds = chantLayoutElement.bounds.clone();\n      else this.bounds.union(chantLayoutElement.bounds);\n    }\n\n    this.visualizers.push(chantLayoutElement);\n  }\n\n  // same as addVisualizer, except the element is unshifted to the front\n  // of the visualizer array rather than the end. This way, some\n  // visualizers can be placed behind the others...ledger lines for example.\n  prependVisualizer(chantLayoutElement) {\n    if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();\n    else this.bounds.union(chantLayoutElement.bounds);\n\n    this.visualizers.unshift(chantLayoutElement);\n  }\n\n  // chant notation elements are given an opportunity to perform their layout via this function.\n  // subclasses should call this function first in overrides of this function.\n  // on completion, exsurge presumes that the bounds, the origin, and the fragment objects are\n  // all valid and prepared for higher level layout.\n  performLayout(ctxt) {\n    if (typeof this.trailingSpace === \"function\")\n      this.calculatedTrailingSpace = this.trailingSpace(ctxt);\n    else this.calculatedTrailingSpace = this.trailingSpace;\n\n    // reset the bounds and the staff notations before doing a layout\n    this.visualizers = [];\n    this.bounds = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n\n    for (var i = 0; i < this.lyrics.length; i++)\n      this.lyrics[i].recalculateMetrics(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        this.alText[i].recalculateMetrics(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        this.translationText[i].recalculateMetrics(ctxt);\n  }\n\n  // some subclasses have internal dependencies on other notations (for example,\n  // a custos can depend on a later neume which it uses to set its height).\n  // subclasses can override this function so that when the notations are\n  // altered, the subclass can correctly invalidate (and later restore) its own\n  // depedencies\n  resetDependencies() {}\n\n  // a helper function for subclasses to call after they are done performing layout...\n  finishLayout(ctxt) {\n    this.bounds.x = 0;\n\n    let language =\n      (this.lyrics[0] && this.lyrics[0].language) || ctxt.defaultLanguage;\n    // center the neume itself over the syllable, or just the first punctum\n    // if the neume is wider than the syllable + the width of a punctum, we always revert to centering just over the punctum\n    let calculateLyricX = language.centerNeume\n      ? (lyric) =>\n          (lyric.bounds.x =\n            this.bounds.width + ctxt.staffInterval < lyric.vowelSegmentWidth\n              ? this.bounds.width / 2 - lyric.origin.x\n              : this.origin.x - lyric.origin.x)\n      : (lyric) => (lyric.bounds.x = this.origin.x - lyric.origin.x);\n    this.lyrics.forEach(calculateLyricX);\n\n    this.needsLayout = false;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n    canvasCtxt.translate(this.bounds.x, 0);\n\n    for (var i = 0; i < this.visualizers.length; i++)\n      this.visualizers[i].draw(ctxt);\n\n    for (i = 0; i < this.lyrics.length; i++) this.lyrics[i].draw(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        this.translationText[i].draw(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++) this.alText[i].draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, 0);\n  }\n\n  getInnerSvgNodes(ctxt, functionName = \"createSvgNode\") {\n    var inner = [];\n\n    for (i = 0; i < this.lyrics.length; i++)\n      inner.push(this.lyrics[i][functionName](ctxt));\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        inner.push(this.translationText[i][functionName](ctxt));\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        inner.push(this.alText[i][functionName](ctxt));\n\n    if (this.visualizers.length) {\n      let visualizers = [];\n      for (var i = 0; i < this.visualizers.length; i++)\n        visualizers.push(this.visualizers[i][functionName](ctxt, this));\n\n      if (functionName === \"createSvgTree\") {\n        inner.push(\n          QuickSvg.createSvgTree(\"g\", { class: \"Notations\" }, ...visualizers)\n        );\n      } else {\n        inner.push(\n          QuickSvg.createNode(\"g\", { class: \"Notations\" }, visualizers)\n        );\n      }\n    }\n    return inner;\n  }\n\n  getSvgProps() {\n    return {\n      // this.constructor.name will not be the same after being mangled by UglifyJS\n      class: \"ChantNotationElement \" + this.constructor.name,\n      transform: \"translate(\" + this.bounds.x + \",\" + 0 + \")\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var inner = this.getInnerSvgNodes(ctxt, \"createSvgNode\");\n    var svgProps = this.getSvgProps();\n    svgProps.source = this;\n    return QuickSvg.createNode(\"g\", svgProps, inner);\n  }\n  createSvgTree(ctxt) {\n    var inner = this.getInnerSvgNodes(ctxt, \"createSvgTree\");\n    var svgProps = this.getSvgProps();\n    svgProps.source = this;\n    return QuickSvg.createSvgTree(\"g\", svgProps, ...inner);\n  }\n\n  createSvgFragment(ctxt) {\n    var inner = \"\";\n\n    for (i = 0; i < this.lyrics.length; i++)\n      inner += this.lyrics[i].createSvgFragment(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        inner += this.translationText[i].createSvgFragment(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        inner += this.alText[i].createSvgFragment(ctxt);\n\n    for (var i = 0; i < this.visualizers.length; i++)\n      inner += this.visualizers[i].createSvgFragment(ctxt, this);\n\n    return QuickSvg.createFragment(\"g\", this.getSvgProps(), inner);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Drawing.js","export const addAccent = (vowel) =>\n  ({\n    \"Æ\": \"Ǽ\",\n    \"Œ\": \"Œ́\",\n    \"A\": \"Á\",\n    \"E\": \"É\",\n    \"I\": \"Í\",\n    \"O\": \"Ó\",\n    \"U\": \"Ú\",\n    \"Y\": \"Ý\",\n    \"æ\": \"ǽ\",\n    \"œ\": \"œ́\",\n    \"a\": \"á\",\n    \"e\": \"é\",\n    \"i\": \"í\",\n    \"o\": \"ó\",\n    \"u\": \"ú\",\n    \"y\": \"ý\"\n  }[vowel] || vowel);\n\n\n\n// WEBPACK FOOTER //\n// ./src/addAccent.js","export const makeLigature = (vowels) =>\n  ({\n    AE: \"Æ\",\n    Ae: \"Æ\",\n    ae: \"æ\",\n    OE: \"Œ\",\n    Oe: \"Œ\",\n    oe: \"œ\"\n  }[vowels] || vowels);\n\n\n\n// WEBPACK FOOTER //\n// ./src/makeLigature.js","export const greextraGlyphs = {\n  MedicaeaFlat: \"\",\n  HufnagelCustosUpShort: \"\",\n  HufnagelCustosUpLong: \"\",\n  HufnagelCustosUpMedium: \"\",\n  HufnagelCustosDownShort: \"\",\n  HufnagelCustosDownLong: \"\",\n  HufnagelCustosDownMedium: \"\",\n  MedicaeaCustosUpShort: \"\",\n  MedicaeaCustosUpLong: \"\",\n  MedicaeaCustosUpMedium: \"\",\n  MedicaeaCustosDownShort: \"\",\n  MedicaeaCustosDownLong: \"\",\n  MedicaeaCustosDownMedium: \"\",\n  MensuralCustosUpShort: \"\",\n  MensuralCustosUpLong: \"\",\n  MensuralCustosUpMedium: \"\",\n  MensuralCustosDownShort: \"\",\n  MensuralCustosDownLong: \"\",\n  MensuralCustosDownMedium: \"\",\n  MensuralFlat: \"\",\n  HufnagelFlat: \"\",\n  MedicaeaCClef: \"\",\n  MedicaeaCClefChange: \"\",\n  MedicaeaFClef: \"\",\n  MedicaeaFClefChange: \"\",\n  HufnagelCClef: \"\",\n  HufnagelCClefChange: \"\",\n  HufnagelFClef: \"\",\n  HufnagelFClefChange: \"\",\n  HugnagelCFClef: \"\",\n  HufnagelCFClefChange: \"\",\n  MensuralFlatHole: \"\",\n  HufnagelFlatHole: \"\",\n  MedicaeaFlatHole: \"\",\n  StarSix: \"\",\n  Dagger: \"\",\n  \"Bar.alt\": \"\",\n  StarHeight: \"\",\n  Cross: \"\",\n  \"RBar.alt\": \"\",\n  \"VBar.alt\": \"\",\n  Drawing1: \"\",\n  Drawing2: \"\",\n  RWithBarGoth: \"\",\n  VWithBarGoth: \"\",\n  Line1: \"\",\n  Line2: \"\",\n  Line3: \"\",\n  Line4: \"\",\n  Line5: \"\",\n  \"Cross.alt\": \"\",\n  ABarCaption: \"\",\n  RBarCaption: \"\",\n  VBarCaption: \"\",\n  ABarCaptionSC: \"\",\n  RBarCaptionSC: \"\",\n  VBarCaptionSC: \"\",\n  ABar: \"\",\n  RBar: \"\",\n  VBar: \"\",\n  ABarSC: \"\",\n  RBarSC: \"\",\n  VBarSC: \"\",\n  ABarSmall: \"\",\n  RBarSmall: \"\",\n  VBarSmall: \"\",\n  ABarSmallSC: \"\",\n  RBarSmallSC: \"\",\n  VBarSmallSC: \"\",\n  \"RBar.alt2\": \"\",\n  \"VBar.alt2\": \"\",\n  ABarCaptionSlant: \"\",\n  RBarCaptionSlant: \"\",\n  VBarCaptionSlant: \"\",\n  ABarSlant: \"\",\n  RBarSlant: \"\",\n  VBarSlant: \"\",\n  ABarSmallSlant: \"\",\n  RBarSmallSlant: \"\",\n  VBarSmallSlant: \"\"\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/greextraGlyphs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { ChantLine } from \"./Exsurge.Chant.ChantLine.js\";\nimport { InsertionCursor } from \"./Exsurge.Chant.Signs.js\";\nimport { Pitch, Rect, Step } from \"./Exsurge.Core.js\";\nimport {\n  Annotation, ChantLayoutElement,\n  ChantNotationElement,\n  GlyphCode,\n  GlyphVisualizer, QuickSvg, TextLeftRight,\n  TextSpan\n} from \"./Exsurge.Drawing.js\";\nimport { Gabc } from \"./Exsurge.Gabc.js\";\nimport { Titles } from \"./Exsurge.Titles.js\";\n\nexport var LiquescentType = {\n  None: 0,\n\n  // flags that can be combined, though of course it\n  // it doesn't make sense to combine some!\n  Large: 1 << 0,\n  Small: 1 << 1,\n  Ascending: 1 << 2,\n  Descending: 1 << 3,\n  InitioDebilis: 1 << 4,\n\n  // handy liquescent types\n  LargeAscending: (1 << 0) | (1 << 2),\n  LargeDescending: (1 << 0) | (1 << 3),\n  SmallAscending: (1 << 1) | (1 << 2),\n  SmallDescending: (1 << 1) | (1 << 3)\n};\n\nexport var NoteShape = {\n  // shapes\n  Default: 0,\n  Virga: 1,\n  Inclinatum: 2,\n  Quilisma: 3,\n  Stropha: 4,\n  Oriscus: 5\n};\n\nexport var NoteShapeModifiers = {\n  // flags which modify the shape\n  // not all of them apply to every shape of course\n  None: 0,\n  Ascending: 1 << 0,\n  Descending: 1 << 1,\n  Cavum: 1 << 2,\n  Stemmed: 1 << 3,\n  Linea: 1 << 4,\n  Reverse: 1 << 5\n};\n\n/**\n * @class\n */\nexport class Note extends ChantLayoutElement {\n  /**\n   * @para {Pitch} pitch\n   */\n  constructor(pitch) {\n    super();\n\n    if (typeof pitch !== \"undefined\") this.pitch = pitch;\n    else this.pitch = null;\n\n    this.glyphVisualizer = null;\n\n    // The staffPosition on a note is an integer that indicates the vertical position on the staff.\n    // 0 is the center space on the staff (equivalent to gabc 'g'). Positive numbers go up\n    // the staff, and negative numbers go down, i.e., 1 is gabc 'h', 2 is gabc 'i', -1 is gabc 'f', etc.\n    this.staffPosition = 0;\n    this.liquescent = LiquescentType.None;\n    this.shape = NoteShape.Default;\n    this.shapeModifiers = NoteShapeModifiers.None;\n\n    // notes keep track of the neume they belong to in order to facilitate layout\n    // this.neume gets set when a note is added to a neume via Neume.addNote()\n    this.neume = null;\n\n    // various markings that can exist on a note, organized by type\n    // for faster access and simpler code logic\n    this.episemata = [];\n    this.morae = []; // silly to have an array of these, but gabc allows multiple morae per note!\n\n    // these are set on the note when they are needed, otherwise, they're undefined\n    // this.ictus\n    // this.accuteAccent\n    // this.braceStart\n    // this.braceEnd\n  }\n\n  setGlyph(ctxt, glyphCode) {\n    if (this.glyphVisualizer) this.glyphVisualizer.setGlyph(ctxt, glyphCode);\n    else this.glyphVisualizer = new GlyphVisualizer(ctxt, glyphCode);\n\n    this.glyphVisualizer.setStaffPosition(ctxt, this.staffPosition);\n\n    // assign glyphvisualizer metrics to this note\n    this.bounds.x = this.glyphVisualizer.bounds.x;\n    this.bounds.y = this.glyphVisualizer.bounds.y;\n    this.bounds.width = this.glyphVisualizer.bounds.width;\n    this.bounds.height = this.glyphVisualizer.bounds.height;\n\n    this.origin.x = this.glyphVisualizer.origin.x;\n    this.origin.y = this.glyphVisualizer.origin.y;\n  }\n\n  // a utility function for modifiers\n  shapeModifierMatches(shapeModifier) {\n    if (shapeModifier === NoteShapeModifiers.None)\n      return this.shapeModifier === NoteShapeModifiers.None;\n    else return this.shapeModifier & (shapeModifier !== 0);\n  }\n\n  draw(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n\n    this.glyphVisualizer.draw(ctxt);\n  }\n\n  createSvgNode(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    this.svgNode = this.glyphVisualizer.createSvgNode(ctxt, this);\n    return this.svgNode;\n  }\n  createSvgTree(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    return this.glyphVisualizer.createSvgTree(ctxt, this);\n  }\n\n  createSvgFragment(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    return this.glyphVisualizer.createSvgFragment(ctxt, this);\n  }\n}\n\nexport class Clef extends ChantNotationElement {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super();\n\n    this.isClef = true;\n    this.staffPosition = staffPosition;\n    this.octave = octave;\n    this.defaultAccidental = defaultAccidental;\n    this.activeAccidental = defaultAccidental;\n    this.keepWithNext = true;\n  }\n\n  resetAccidentals() {\n    this.activeAccidental = this.defaultAccidental;\n  }\n\n  pitchToStaffPosition(pitch) {}\n\n  performLayout(ctxt) {\n    ctxt.activeClef = this;\n\n    if (this.defaultAccidental) this.defaultAccidental.performLayout(ctxt);\n\n    super.performLayout(ctxt);\n  }\n\n  finishLayout(ctxt) {\n    // if we have a default accidental, then add a glyph for it now\n    if (this.defaultAccidental) {\n      var accidentalGlyph = this.defaultAccidental.createGlyphVisualizer(ctxt);\n      accidentalGlyph.bounds.x +=\n        this.visualizers[0].bounds.right() + ctxt.intraNeumeSpacing;\n      this.addVisualizer(accidentalGlyph);\n    }\n\n    super.finishLayout(ctxt);\n  }\n\n  static default() {\n    return __defaultDoClef;\n  }\n\n  clone() {\n    if (this.model) return this.model.clone();\n    let clone = new this.constructor(\n      this.staffPosition,\n      this.octave,\n      this.defaultAccidental\n    );\n    clone.sourceGabc = this.sourceGabc;\n    clone.sourceIndex = this.sourceIndex;\n    clone.elementIndex = this.elementIndex;\n    clone.model = this;\n    return clone;\n  }\n}\n\nexport class DoClef extends Clef {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super(staffPosition, octave, defaultAccidental);\n\n    this.leadingSpace = 0.0;\n  }\n\n  pitchToStaffPosition(pitch) {\n    return (\n      (pitch.octave - this.octave) * 7 +\n      this.staffPosition +\n      Pitch.stepToStaffOffset(pitch.step) -\n      Pitch.stepToStaffOffset(Step.Do)\n    );\n  }\n\n  staffPositionToPitch(staffPosition) {\n    var offset = staffPosition - this.staffPosition;\n    var octaveOffset = Math.floor(offset / 7);\n\n    var step = Pitch.staffOffsetToStep(offset);\n\n    if (\n      this.activeAccidental &&\n      this.activeAccidental.staffPosition === staffPosition\n    )\n      step += this.activeAccidental.accidentalType;\n\n    return new Pitch(step, this.octave + octaveOffset);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.DoClef);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\nvar __defaultDoClef = new DoClef(3, 2);\n\nexport class FaClef extends Clef {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super(staffPosition, octave, defaultAccidental);\n\n    this.octave = octave;\n\n    this.leadingSpace = 0;\n  }\n\n  pitchToStaffPosition(pitch) {\n    return (\n      (pitch.octave - this.octave) * 7 +\n      this.staffPosition +\n      Pitch.stepToStaffOffset(pitch.step) -\n      Pitch.stepToStaffOffset(Step.Fa)\n    );\n  }\n\n  staffPositionToPitch(staffPosition) {\n    var offset = staffPosition - this.staffPosition + 3; // + 3 because it's a fa clef (3 == offset from Do)\n    var octaveOffset = Math.floor(offset / 7);\n\n    var step = Pitch.staffOffsetToStep(offset);\n\n    if (\n      this.activeAccidental &&\n      this.activeAccidental.staffPosition === staffPosition\n    )\n      step += this.activeAccidental.accidentalType;\n\n    return new Pitch(step, this.octave + octaveOffset);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.FaClef);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TextOnly\n */\nexport class TextOnly extends ChantNotationElement {\n  constructor(sourceIndex, sourceLength) {\n    super();\n    this.sourceIndex = sourceIndex;\n    this.sourceLength = sourceLength;\n    this.sourceGabc = \"\";\n    this.trailingSpace = 0;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // add an empty glyph as a placeholder\n    this.addVisualizer(new GlyphVisualizer(ctxt, GlyphCode.None));\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    this.finishLayout(ctxt);\n  }\n}\n\nexport class ChantLineBreak extends ChantNotationElement {\n  constructor(justify) {\n    super();\n    this.calculatedTrailingSpace = this.trailingSpace = 0;\n    this.justify = justify;\n  }\n\n  performLayout(ctxt) {\n    // reset the bounds before doing a layout\n    this.bounds = new Rect(0, 0, 0, 0);\n  }\n\n  clone() {\n    var lb = new ChantLineBreak();\n    lb.justify = this.justify;\n\n    return lb;\n  }\n}\n\n// a chant mapping is a lightweight format independent way of\n// tracking how a chant language (e.g., gabc) has been\n// mapped to exsurge notations.\nexport class ChantMapping {\n  // source can be any object type. in the case of gabc, source is a text\n  // string that maps to a gabc word (e.g.: \"no(g)bis(fg)\").\n  // notations is an array of ChantNotationElements\n  constructor(source, notations, sourceIndex) {\n    this.source = source;\n    this.notations = notations;\n    this.sourceIndex = sourceIndex;\n  }\n}\n\nconst __connectorSpan = new TextSpan(\" • \"),\n  __mergeAnnotationWithTextLeft = (...annotationSpans) =>\n    annotationSpans.reduce((result, spans) => {\n      if (result && result.length) {\n        if (spans && spans.length) return result.concat(__connectorSpan, spans);\n        else return result;\n      } else if (spans && spans.length) {\n        return spans;\n      }\n      return [];\n    });\n\n/*\n * Score, document\n */\nexport class ChantScore {\n  // mappings is an array of ChantMappings.\n  constructor(ctxt, mappings = [], useDropCap) {\n    this.mappings = mappings;\n\n    this.lines = [];\n    this.notes = [];\n    if (ctxt) this.titles = new Titles(ctxt, this);\n\n    this.startingClef = null;\n\n    this.useDropCap = useDropCap;\n    this.dropCap = null;\n\n    this.annotation = null;\n\n    this.compiled = false;\n\n    this.autoColoring = true;\n    this.needsLayout = true;\n\n    // valid after chant lines are created...\n    this.bounds = new Rect();\n\n    this.mergeAnnotationWithTextLeft = __mergeAnnotationWithTextLeft;\n\n    if (ctxt) this.updateNotations(ctxt);\n  }\n\n  /**\n   * Make a copy of the score, only including the specified lines\n   * @param  {number} startLine starting index\n   * @param  {number} endLine   ending index\n   * @return {ChantScore}           the partial score\n   */\n  copyLines(startLine, endLine) {\n    let result = new ChantScore();\n    result.lines = this.lines.slice(startLine, endLine);\n    result.bounds = this.bounds.clone();\n    let lastLine = result.lines.slice(-1)[0];\n    result.bounds.height = lastLine.bounds.bottom() - lastLine.origin.y;\n    if (startLine === 0) {\n      result.titles = this.titles;\n      result.dropCap = this.dropCap;\n      result.annotation = this.annotation;\n    }\n    return result;\n  }\n\n  updateSelection(selection) {\n    this.selection = selection;\n    const elementSelection = (selection && selection.element) || {\n      indices: []\n    };\n    const selectedIndices = elementSelection.indices;\n    let insertion = elementSelection.insertion;\n    if (\n      !insertion &&\n      selectedIndices.length === 1 &&\n      this.notes[selectedIndices[0]] instanceof TextOnly\n    ) {\n      // if there is only one selection, and its a text only, it should display as an insertion cursor:\n      insertion = { afterElementIndex: selectedIndices[0] };\n    }\n    // update the selected elements so that they can be given a .selected class when rendered\n    for (let i = 0; i < this.notes.length; ++i) {\n      let element = this.notes[i];\n      element.selected = selectedIndices.includes(i);\n    }\n    (\n      this.startingClef.model || this.startingClef\n    ).selected = selectedIndices.includes(-1);\n    for (let i = 0; i < this.lines.length; ++i) {\n      this.lines[i].insertionCursor = null;\n    }\n    // update the insertion cursor, so it can be drawn on the correct system\n    this.insertionElement = null;\n    let insertionLine = null;\n    if (insertion) {\n      if (typeof insertion.chantLine === \"number\") {\n        insertionLine = this.lines[insertion.chantLine];\n        this.insertionElement = insertionLine.startingClef;\n        insertionLine.insertionCursor = new InsertionCursor();\n      } else if (typeof insertion.afterElementIndex === \"number\") {\n        this.insertionElement = this.notes[insertion.afterElementIndex];\n        if (!this.insertionElement) {\n          insertionLine = this.lines[0];\n          this.insertionElement = insertionLine.startingClef;\n        } else if (this.insertionElement.neume) {\n          this.insertionElement = this.insertionElement.neume;\n        }\n        if (!insertionLine) {\n          insertionLine = this.insertionElement.line || this.lines[this.lines.length - 1];\n        }\n        insertionLine.insertionCursor = new InsertionCursor();\n      }\n    }\n  }\n\n  updateNotations(ctxt) {\n    var i, j, mapping, notation;\n\n    // flatten all mappings into one array for N(0) access to notations\n    this.notations = [];\n    this.notes = [];\n    this.hasLyrics = false;\n    this.hasAboveLinesText = false;\n    this.hasTranslations = false;\n    const elementSelection = (this.selection && this.selection.element) || {\n      indices: []\n    };\n    const selectedIndices = elementSelection.indices;\n    let nonNoteElementCount = 0;\n\n    // find the starting clef...\n    // start with a default clef in case the notations don't provide one.\n    this.startingClef = null;\n\n    for (i = 0; i < this.mappings.length; i++) {\n      mapping = this.mappings[i];\n      for (j = 0; j < mapping.notations.length; j++) {\n        notation = mapping.notations[j];\n        notation.score = this;\n        notation.mapping = mapping;\n\n        if (!this.startingClef) {\n          if (notation.isNeume) {\n            this.startingClef = Clef.default();\n          } else if (notation.isClef) {\n            this.startingClef = notation;\n            continue;\n          }\n        }\n\n        notation.notationIndex = this.notations.push(notation) - 1;\n        if (!this.hasLyrics && notation.hasLyrics()) this.hasLyrics = true;\n        if (!this.hasAboveLinesText && notation.alText)\n          this.hasAboveLinesText = true;\n        if (!this.hasTranslations && notation.translationText)\n          this.hasTranslations = true;\n\n        // Update this.notes and find element indices:\n        let elements = notation.notes || [notation];\n        for (let element of elements) {\n          let elementIndex = (element.elementIndex =\n            this.notes.push(element) - 1);\n          if (element instanceof Note) {\n            element.noteIndex = elementIndex - nonNoteElementCount;\n          } else {\n            ++nonNoteElementCount;\n          }\n          \n          element.selected = selectedIndices.includes(elementIndex);\n        }\n      }\n    }\n\n    // if we've reached this far and we *still* don't have a clef, then there aren't even\n    // any neumes in the score. still, set the default clef just for good measure\n    if (!this.startingClef) this.startingClef = Clef.default();\n    this.startingClef.elementIndex = -1;\n\n    // update drop cap\n    if (this.useDropCap) this.recreateDropCap(ctxt);\n    else this.dropCap = null;\n\n    this.needsLayout = true;\n  }\n\n  recreateDropCap(ctxt) {\n    this.dropCap = null;\n\n    // find the first notation with lyrics to use\n    for (var i = 0; i < this.notations.length; i++) {\n      if (\n        this.notations[i].hasLyrics() &&\n        this.notations[i].lyrics[0] !== null &&\n        this.notations[i].lyrics[0].spans &&\n        this.notations[i].lyrics[0].spans.length\n      ) {\n        let notation = this.notations[i],\n          lyrics = notation.lyrics[0];\n        if (this.useDropCap) {\n          this.dropCap = lyrics.generateDropCap(ctxt);\n        } else {\n          lyrics.dropCap = null;\n          lyrics.generateSpansFromText(ctxt, lyrics.originalText);\n        }\n        notation.needsLayout = true;\n        return;\n      }\n    }\n  }\n\n  /**\n   * Shared layout initialization method for performLayout() and performLayoutAsync()\n   * @param  {ChantContext} ctxt\n   */\n  initializeLayout(ctxt) {\n    // setup the context\n    ctxt.activeClef = this.startingClef;\n    ctxt.notations = this.notations;\n    ctxt.currNotationIndex = 0;\n\n    if (this.dropCap) this.dropCap.recalculateMetrics(ctxt);\n\n    if (this.annotation) this.annotation.recalculateMetrics(ctxt);\n  }\n\n  // this is the the synchronous version of performLayout that\n  // process everything without yielding to any other workers/threads.\n  // good for server side processing or very small chant pieces.\n  performLayout(ctxt, force) {\n    if (!force && this.needsLayout === false) return; // nothing to do here!\n\n    ctxt.updateHyphenWidth();\n\n    this.initializeLayout(ctxt);\n\n    for (let i = 0; i < this.notations.length; i++) {\n      let notation = this.notations[i];\n      if (force || notation.needsLayout) {\n        ctxt.currNotationIndex = i;\n        notation.performLayout(ctxt);\n      }\n    }\n\n    this.needsLayout = false;\n  }\n\n  // for web applications, probably performLayoutAsync would be more\n  // apppropriate that the above performLayout, since it will process\n  // the notations without locking up the UI thread.\n  performLayoutAsync(ctxt, finishedCallback) {\n    if (this.needsLayout === false) {\n      if (finishedCallback) setTimeout(() => finishedCallback(), 0);\n\n      return; // nothing to do here!\n    }\n\n    if (ctxt.onFontLoaded) {\n      ctxt.onFontLoaded.push(() =>\n        this.performLayoutAsync(ctxt, finishedCallback)\n      );\n      return;\n    }\n\n    // check for sane value of hyphen width:\n    ctxt.updateHyphenWidth();\n    if (\n      !ctxt.hyphenWidth ||\n      ctxt.hyphenWidth / ctxt.textStyles.lyric.size > 0.6\n    ) {\n      setTimeout(() => {\n        this.performLayoutAsync(ctxt, finishedCallback);\n      }, 100);\n      return;\n    }\n\n    this.initializeLayout(ctxt);\n\n    setTimeout(() => this.layoutElementsAsync(ctxt, 0, finishedCallback), 0);\n  }\n\n  layoutElementsAsync(ctxt, index, finishedCallback) {\n    if (index >= this.notations.length) {\n      this.needsLayout = false;\n\n      if (finishedCallback) setTimeout(() => finishedCallback(), 0);\n\n      return;\n    }\n\n    if (index === 0) ctxt.activeClef = this.startingClef;\n\n    var timeout = new Date().getTime() + 50; // process for fifty milliseconds\n    do {\n      var notation = this.notations[index];\n      if (notation.needsLayout) {\n        ctxt.currNotationIndex = index;\n        notation.performLayout(ctxt);\n      }\n\n      index++;\n    } while (index < this.notations.length && new Date().getTime() < timeout);\n\n    // schedule the next block of processing\n    setTimeout(\n      () => this.layoutElementsAsync(ctxt, index, finishedCallback),\n      0\n    );\n  }\n\n  layoutChantLines(ctxt, width, finishedCallback) {\n    this.lines = [];\n\n    if (this.mergeAnnotationWithTextLeft && this.annotation && !this.dropCap) {\n      let annotation = this.annotation,\n        annotationSpans = annotation.annotations\n          ? annotation.annotations.map((annotation) => annotation.spans)\n          : [annotation.spans];\n      this.overrideTextLeft = new TextLeftRight(ctxt, \"\", \"textLeft\");\n      if (ctxt.mapAnnotationSpansToTextLeft) {\n        annotationSpans = annotationSpans.map(ctxt.mapAnnotationSpansToTextLeft);\n      }\n      this.overrideTextLeft.spans = this.mergeAnnotationWithTextLeft(\n        ...annotationSpans,\n        this.titles.textLeft && this.titles.textLeft.spans\n      );\n    } else {\n      this.overrideTextLeft = null;\n    }\n\n    var y = width > 0 ? this.titles.layoutTitles(ctxt, width) : 0;\n    var currIndex = 0;\n\n    ctxt.activeClef = this.startingClef;\n\n    var spaceBetweenSystems = ctxt.staffInterval * ctxt.spaceBetweenSystems;\n\n    do {\n      var line = new ChantLine(this);\n\n      line.buildFromChantNotationIndex(ctxt, currIndex, width);\n      currIndex = line.notationsStartIndex + line.numNotationsOnLine;\n      line.performLayout(ctxt);\n      line.elementIndex = this.lines.length;\n      this.lines.push(line);\n\n      line.bounds.y = -line.bounds.y + y;\n      y += line.bounds.height + spaceBetweenSystems;\n    } while (currIndex < this.notations.length);\n\n    var lastLine = this.lines[this.lines.length - 1];\n\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n    this.bounds.width = lastLine.bounds.width;\n    this.bounds.height = y - spaceBetweenSystems;\n\n    this.pages = [this];\n\n    if (this.selection) {\n      this.updateSelection(this.selection);\n    }\n\n    if (finishedCallback) finishedCallback(this);\n  }\n\n  paginate(height) {\n    if (!height) return;\n    this.pages = [];\n    let pageHeightOffset = 0,\n      startLineIndex = 0;\n    for (let i = 1; i < this.lines.length; ++i) {\n      let line = this.lines[i];\n      let pageHeight = line.bounds.bottom() - pageHeightOffset - line.origin.y;\n\n      if (pageHeight > height) {\n        // this line will be the first on the new page\n        this.pages.push(this.copyLines(startLineIndex, i));\n        startLineIndex = i;\n        pageHeightOffset = line.bounds.y - line.origin.y;\n        line.bounds.y = line.origin.y;\n      } else {\n        // not a new page yet...update the bounds:\n        line.bounds.y -= pageHeightOffset;\n      }\n    }\n    this.pages.push(this.copyLines(startLineIndex, this.lines.length));\n  }\n\n  draw(ctxt, scale = 1) {\n    ctxt.setCanvasSize(this.bounds.width, this.bounds.height, scale);\n\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.clearRect(0, 0, ctxt.canvas.width, ctxt.canvas.height);\n\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    if (this.titles) this.titles.draw(ctxt);\n\n    for (var i = 0; i < this.lines.length; i++) this.lines[i].draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getSvgProps(ctxt, zoom) {\n    let width =\n        typeof zoom === \"number\"\n          ? zoom * this.bounds.width\n          : zoom\n          ? undefined\n          : this.bounds.width,\n      height = zoom ? undefined : this.bounds.height;\n\n    return {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      version: \"1.1\",\n      class: \"Exsurge ChantScore\" + (ctxt.editable ? \" EditableChantScore\" : \"\"),\n      width,\n      height,\n      viewBox: [0, 0, this.bounds.width, this.bounds.height].join(\" \")\n    };\n  }\n\n  createSvgNode(ctxt) {\n    // create defs section\n    var node = [ctxt.defsNode.cloneNode(true)];\n    node[0].appendChild(ctxt.createStyleNode());\n\n    if (this.titles) node.push(this.titles.createSvgNode(ctxt));\n\n    for (var i = 0; i < this.lines.length; i++)\n      node.push(this.lines[i].createSvgNode(ctxt));\n\n    node = QuickSvg.createNode(\"g\", {}, node);\n\n    node = QuickSvg.createNode(\"svg\", this.getSvgProps(ctxt), node);\n\n    node.source = this;\n    this.svg = node;\n\n    return node;\n  }\n\n  createSvgTree(ctxt, zoom) {\n    // create defs section\n    var node = [\n      QuickSvg.createSvgTree(\n        \"defs\",\n        {},\n        ...ctxt.makeDefs.map((makeDef) => makeDef.makeSvgTree()),\n        ctxt.createStyleTree()\n      )\n    ];\n\n    if (this.titles) node.push(this.titles.createSvgTree(ctxt));\n\n    for (var i = 0; i < this.lines.length; i++)\n      node.push(this.lines[i].createSvgTree(ctxt));\n\n    node = QuickSvg.createSvgTree(\"g\", {}, ...node);\n    let svgProps = this.getSvgProps(ctxt, zoom);\n    svgProps.source = this;\n    node = QuickSvg.createSvgTree(\"svg\", svgProps, node);\n\n    return node;\n  }\n\n  createSvg(ctxt) {\n    var fragment = \"\";\n\n    // create defs section\n    for (var def in ctxt.defs)\n      if (ctxt.defs.hasOwnProperty(def)) fragment += ctxt.defs[def];\n    fragment += ctxt.createStyle();\n\n    fragment = QuickSvg.createFragment(\"defs\", {}, fragment);\n\n    if (this.titles) fragment += this.titles.createSvgFragment(ctxt);\n\n    for (var i = 0; i < this.lines.length; i++)\n      fragment += this.lines[i].createSvgFragment(ctxt);\n\n    fragment = QuickSvg.createFragment(\"g\", {}, fragment);\n\n    fragment = QuickSvg.createFragment(\"svg\", this.getSvgProps(ctxt), fragment);\n\n    return fragment;\n  }\n\n  createSvgNodeForEachLine(ctxt) {\n    var node = [];\n\n    var top = 0;\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineFragment = [\n        ctxt.defsNode.cloneNode(true),\n        this.lines[i].createSvgNode(ctxt, top)\n      ];\n      lineFragment[0].appendChild(ctxt.createStyleNode());\n      var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n      lineFragment = QuickSvg.createNode(\"g\", {}, lineFragment);\n      lineFragment = QuickSvg.createNode(\n        \"svg\",\n        {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          version: \"1.1\",\n          class: \"Exsurge ChantScore\",\n          width: this.bounds.width,\n          height: height,\n          viewBox: [0, 0, this.bounds.width, height].join(\" \")\n        },\n        lineFragment\n      );\n      node.push(lineFragment);\n      top += height;\n    }\n    return node;\n  }\n\n  createSvgForEachLine(ctxt) {\n    var fragment = \"\",\n      fragmentDefs = \"\";\n\n    // create defs section\n    for (var def in ctxt.defs)\n      if (ctxt.defs.hasOwnProperty(def)) fragmentDefs += ctxt.defs[def];\n    fragmentDefs += ctxt.createStyle();\n\n    fragmentDefs = QuickSvg.createFragment(\"defs\", {}, fragmentDefs);\n    var top = 0;\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineFragment =\n        fragmentDefs + this.lines[i].createSvgFragment(ctxt, top);\n      var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n      lineFragment = QuickSvg.createFragment(\"g\", {}, lineFragment);\n      lineFragment = QuickSvg.createFragment(\n        \"svg\",\n        {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          version: \"1.1\",\n          \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n          class: \"Exsurge ChantScore\",\n          width: this.bounds.width,\n          height: height\n        },\n        lineFragment\n      );\n      fragment += lineFragment;\n      top += height;\n    }\n    return fragment;\n  }\n\n  unserializeFromJson(data, ctxt) {\n    this.autoColoring = data[\"auto-coloring\"];\n\n    if (data.annotation !== null && data.annotation !== \"\") {\n      // create the annotation\n      this.annotation = new Annotation(ctxt, data.annotation);\n    } else this.annotation = null;\n\n    var createDropCap = data[\"drop-cap\"] === \"auto\" ? true : false;\n\n    Gabc.parseChantNotations(data.notations, this, createDropCap);\n  }\n\n  serializeToJson() {\n    var data = {};\n\n    data[\"type\"] = \"score\";\n    data[\"auto-coloring\"] = true;\n\n    if (this.annotation !== null)\n      data.annotation = this.annotation.unsanitizedText;\n    else data.annotation = \"\";\n\n    return data;\n  }\n}\n\nexport class ChantDocument {\n  constructor() {\n    var defaults = {\n      layout: {\n        units: \"mm\",\n        \"default-font\": {\n          \"font-family\": \"Crimson\",\n          \"font-size\": 14\n        },\n        page: {\n          width: 8.5,\n          height: 11,\n          \"margin-left\": 0,\n          \"margin-top\": 0,\n          \"margin-right\": 0,\n          \"margin-bottom\": 0\n        }\n      },\n      scores: []\n    };\n\n    // default layout\n    this.copyLayout(this, defaults);\n\n    this.scores = defaults.scores;\n  }\n\n  copyLayout(to, from) {\n    to.layout = {\n      units: from.layout.units,\n      \"default-font\": {\n        \"font-family\": from.layout[\"default-font\"][\"font-family\"],\n        \"font-size\": from.layout[\"default-font\"][\"font-size\"]\n      },\n      page: {\n        width: from.layout.page.width,\n        height: from.layout.page.height,\n        \"margin-left\": from.layout.page[\"margin-left\"],\n        \"margin-top\": from.layout.page[\"margin-top\"],\n        \"margin-right\": from.layout.page[\"margin-right\"],\n        \"margin-bottom\": from.layout.page[\"margin-bottom\"]\n      }\n    };\n  }\n\n  unserializeFromJson(data) {\n    this.copyLayout(this, data);\n\n    this.scores = [];\n\n    // read in the scores\n    for (var i = 0; i < data.scores.length; i++) {\n      var score = new ChantScore();\n\n      score.unserializeFromJson(data.scores[i]);\n      this.scores.push(score);\n    }\n  }\n\n  serializeToJson() {\n    var data = {};\n\n    this.copyLayout(data, this);\n\n    data.scores = [];\n\n    // save scores...\n    for (var i = 0; i < this.scores.length; i++)\n      data.scores.push(this.scores[i].serializeToJson());\n\n    return data;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { ChantLineBreak, NoteShape, TextOnly } from \"./Exsurge.Chant.js\";\nimport {\n  BraceAttachment, BracePoint, BraceShape, HorizontalEpisemaAlignment\n} from \"./Exsurge.Chant.Markings.js\";\nimport {\n  Custos,\n  DoubleBar,\n  FullBar\n} from \"./Exsurge.Chant.Signs.js\";\nimport { Point, Rect } from \"./Exsurge.Core.js\";\nimport {\n  ChantLayoutElement, CurlyBraceVisualizer, GlyphCode, Lyric,\n  LyricArray,\n  LyricType, MarkingPositionHint, QuickSvg, RoundBraceVisualizer\n} from \"./Exsurge.Drawing.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\n\n// a chant line represents one staff line on the page. ChantLines are created by the score\n// and laid out by the page\nexport class ChantLine extends ChantLayoutElement {\n  constructor(score) {\n    super();\n\n    this.score = score;\n\n    this.notationsStartIndex = 0;\n    this.numNotationsOnLine = 0;\n    this.notationBounds = null; // Rect\n\n    this.staffLeft = 0;\n    this.staffRight = 0;\n\n    this.startingClef = null; // necessary for the layout process\n    this.custos = null;\n\n    this.justify = true;\n\n    // these are markings that exist at the chant line level rather than at the neume level.\n    this.ledgerLines = [];\n    this.braces = [];\n\n    this.nextLine = null;\n    this.previousLine = null; // for layout assistance\n\n    this.lyricLineHeight = 0; // height of each text line\n    this.lyricLineBaseline = 0; // offsets from the top of the text line to the baseline\n    this.numLyricLines = 0; // maximum count of lyrics on the same syllable\n\n    // fixme: make these configurable values from the score\n    this.spaceAfterNotations = 0; // the space between the notation bounds and the first text track\n    this.spaceBetweenTextTracks = 0; // spacing between each text track\n\n    this.lastLyrics = [];\n  }\n\n  performLayout(ctxt) {\n    // start off with a rectangle that holds at least the four staff lines\n    this.notationBounds = new Rect(\n      this.staffLeft,\n      -(ctxt.staffLineWeight / 2 + 3 + ctxt.minSpaceAboveStaff) *\n        ctxt.staffInterval,\n      this.staffRight - this.staffLeft,\n      (ctxt.staffLineWeight + 6 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval\n    );\n\n    // run through all the elements of the line and calculate the bounds of the notations,\n    // as well as the bounds of each text track we will use\n    var i;\n    var notations = this.score.notations;\n    var lastNeumeIndex =\n      this.extraTextOnlyIndex === null\n        ? this.notationsStartIndex + this.numNotationsOnLine\n        : this.extraTextOnlyIndex;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    var notation = null;\n\n    this.notationBounds.union(this.startingClef.bounds);\n\n    // reset the lyric line offsets before we [re]calculate them now\n    this.lyricLineHeight = ctxt.textStyles.lyric.size * 1.1;\n    this.lyricLineBaseline = 0;\n    this.numLyricLines = 0;\n\n    this.altLineHeight = 0;\n    this.altLineBaseline = 0;\n    this.numAltLines = 0;\n\n    this.translationLineHeight = ctxt.textStyles.translation.size * 1.1;\n    this.translationLineBaseline = 0;\n    this.numTranslationLines = 0;\n\n    for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n      notation = notations[i];\n\n      this.notationBounds.union(notation.bounds);\n\n      // keep track of lyric line offsets\n      if (notation.lyrics.length && notation.lyrics[0].text) {\n        // if (notation.lyrics[0].bounds.height > this.lyricLineHeight)\n        //   this.lyricLineHeight = notation.lyrics[0].bounds.height;\n        if (notation.lyrics[0].origin.y > this.lyricLineBaseline)\n          this.lyricLineBaseline = notation.lyrics[0].origin.y;\n        if (notation.lyrics.length > this.numLyricLines)\n          this.numLyricLines = notation.lyrics.length;\n      }\n\n      if (notation.alText && this.numAltLines < notation.alText.length) {\n        if (notation.alText[0].bounds.height > this.altLineHeight)\n          this.altLineHeight = notation.alText[0].bounds.height;\n        if (notation.alText[0].origin.y > this.altLineBaseline)\n          this.altLineBaseline = notation.alText[0].origin.y;\n        if (notation.alText.length > this.numAltLines)\n          this.numAltLines = notation.alText.length;\n      }\n\n      if (\n        notation.translationText &&\n        notation.translationText[0] &&\n        notation.translationText[0].text\n      ) {\n        // if (\n        //   notation.translationText[0].bounds.height > this.translationLineHeight\n        // )\n        //   this.translationLineHeight =\n        //     notation.translationText[0].bounds.height;\n        if (notation.translationText[0].origin.y > this.translationLineBaseline)\n          this.translationLineBaseline = notation.translationText[0].origin.y;\n        if (notation.translationText.length > this.numTranslationLines)\n          this.numTranslationLines = notation.translationText.length;\n      }\n    }\n\n    if (this.custos) this.notationBounds.union(this.custos.bounds);\n\n    // add any braces to the notationBounds as well\n    for (i = 0; i < this.braces.length; i++)\n      this.notationBounds.union(this.braces[i].bounds);\n\n    // finalize the lyrics placement\n    var notationBoundsOffset =\n      this.notationBounds.bottom() +\n      ctxt.minSpaceBelowStaff * ctxt.staffInterval;\n    this.lyricLineBaseline += notationBoundsOffset;\n    this.translationLineBaseline += notationBoundsOffset;\n    this.altLineBaseline +=\n      this.notationBounds.y - this.altLineHeight - ctxt.staffInterval * 0.5;\n\n    for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n      notation = notations[i];\n      var offset = 0;\n      for (var j = 0; j < notation.lyrics.length; j++) {\n        notation.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n        offset += this.lyricLineHeight;\n      }\n\n      if (notation.translationText) {\n        for (j = 0; j < notation.translationText.length; j++) {\n          notation.translationText[j].bounds.y =\n            offset + this.translationLineBaseline;\n          offset += this.translationLineHeight;\n        }\n      }\n\n      if (notation.alText) {\n        offset = 0;\n        for (j = 0; j < notation.alText.length; j++) {\n          notation.alText[j].bounds.y = offset + this.altLineBaseline;\n          offset -= ctxt.textStyles.al.size * 1.1;\n        }\n      }\n    }\n\n    this.extraTextOnlyHeight = 0;\n    // handle placement of extra TextOnly elements:\n    if (ctxt.useExtraTextOnly) {\n      var extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n      if (this.extraTextOnlyIndex === null) {\n        // even if extraTextOnlyIndex is null, there might be extra lines on the last lyric if it is TextOnly:\n        let lastNotation = notations[lastNeumeIndex - 1] || {};\n        if (lastNotation.constructor === ChantLineBreak)\n          lastNotation = notations[lastNeumeIndex - 2];\n        if (\n          lastNotation.constructor === TextOnly &&\n          lastNotation.lyrics.length === 1 &&\n          lastNotation.lyrics[0].bounds.height > this.lyricLineHeight\n        ) {\n          this.extraTextOnlyHeight = this.lyricLineHeight;\n        }\n      } else {\n        let lastLyrics = null;\n        let xOffset = 0;\n        offset = (this.numLyricLines - 1) * this.lyricLineHeight;\n        offset += this.numTranslationLines * this.translationLineHeight;\n        let extraLines = 0;\n        for (i = this.extraTextOnlyIndex; i < lastIndex; i++) {\n          notation = notations[i];\n          if (!notation.lyrics[extraTextOnlyLyricIndex]) continue;\n          lastLyrics = notation.lyrics[extraTextOnlyLyricIndex];\n          if (lastLyrics.lineWidth) {\n            xOffset = this.staffRight - lastLyrics.lineWidth;\n            offset += this.lyricLineHeight;\n            extraLines++;\n          }\n          extraLines += lastLyrics.numLines - 1;\n          lastLyrics.bounds.y = offset + this.lyricLineBaseline;\n          notation.bounds.x += xOffset;\n        }\n        this.extraTextOnlyHeight = this.lyricLineHeight * extraLines;\n      }\n    }\n\n    if (this.startingClef.hasLyrics()) {\n      offset = 0;\n      for (j = 0; j < this.startingClef.lyrics.length; j++) {\n        this.startingClef.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n        offset += this.lyricLineHeight;\n      }\n    }\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.annotation !== null) {\n        // annotations use dominant-baseline to align text to the top\n        this.score.annotation.bounds.x = this.staffLeft / 2;\n        this.score.annotation.bounds.y = -ctxt.staffInterval * 3;\n        if (this.score.dropCap !== null) {\n          var lowestPossibleAnnotationY =\n            this.lyricLineBaseline -\n            this.score.annotation.bounds.height -\n            ctxt.staffInterval * ctxt.textStyles.annotation.padding -\n            this.score.dropCap.origin.y;\n          // if the annotation would overlap with the drop cap, move the annotation higher.\n          // otherwise, center the annotation in the vertical space between the top of the drop cap and the top of the staff.\n          if (lowestPossibleAnnotationY < this.score.annotation.bounds.y) {\n            this.score.annotation.bounds.y = lowestPossibleAnnotationY;\n          } else {\n            this.score.annotation.bounds.y =\n              (this.score.annotation.bounds.y + lowestPossibleAnnotationY) / 2;\n          }\n          if (this.score.annotation.bounds.y < this.notationBounds.y) {\n            this.notationBounds.y = this.score.annotation.bounds.y;\n            this.notationBounds.height +=\n              this.notationBounds.y - this.score.annotation.bounds.y;\n          }\n        }\n        this.score.annotation.bounds.y += this.score.annotation.origin.y;\n      }\n\n      if (this.score.dropCap !== null) {\n        // drop caps and annotations are drawn from their center, so aligning them\n        // horizontally is as easy as this.staffLeft / 2\n        this.score.dropCap.bounds.x = this.staffLeft / 2;\n        this.score.dropCap.bounds.y =\n          this.lyricLineBaseline - this.score.dropCap.origin.y;\n        this.notationBounds.union(this.score.dropCap.bounds);\n        this.score.dropCap.bounds.y = this.lyricLineBaseline;\n      }\n    }\n\n    if (this.numLyricLines > 0) {\n      // add up the lyric line heights to get the total height of the chant line\n      var lyricAndTextRect = new Rect(\n        0,\n        notationBoundsOffset,\n        0,\n        this.lyricLineHeight * this.numLyricLines +\n          this.extraTextOnlyHeight +\n          this.translationLineHeight * this.numTranslationLines\n      );\n      this.notationBounds.union(lyricAndTextRect);\n    }\n    if (this.numAltLines > 0) {\n      var altLineTextRect = new Rect(\n        0,\n        this.notationBounds.y -\n          this.altLineHeight -\n          0.5 * ctxt.staffInterval -\n          ctxt.textStyles.al.size * 1.1 * (this.numAltLines - 1),\n        0,\n        ctxt.textStyles.al.size * 1.1 * this.numAltLines\n      );\n      this.notationBounds.union(altLineTextRect);\n    }\n    // Ensure that there is at least minSpaceBelowStaff below the lowest staff line:\n    this.notationBounds.union(\n      new Rect(\n        0,\n        0,\n        0,\n        (3 + ctxt.staffLineWeight / 2 + ctxt.minSpaceBelowStaff) *\n          ctxt.staffInterval\n      )\n    );\n    var totalHeight = this.notationBounds.height;\n\n    this.bounds.x = 0;\n    this.bounds.y = this.notationBounds.y;\n    this.bounds.width = this.notationBounds.right();\n    this.bounds.height = totalHeight;\n\n    // the origin of the chant line's coordinate space is at the center line of the left extremity of the staff\n    this.origin = new Point(this.staffLeft, -this.notationBounds.y);\n  }\n\n  // TODO: remove if not necsessary\n  layoutInsertionCursor(ctxt) {\n    if (this.insertionCursor) {\n      // we have either a Notation to draw the cursor after, or the ChantLine itself when the cursor is the first thing on the line\n      this.insertionCursor.performLayout(ctxt);\n      this.insertionCursor.bounds.x =\n        this.score.insertionElement.bounds.right() +\n        ((this.score.insertionElement.trailingSpace &&\n          this.score.insertionElement.calculatedTrailingSpace) ||\n          0) /\n          2 -\n        this.insertionCursor.origin.x;\n    }\n    return this.insertionCursor;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    // draw the staff lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight,\n      y;\n    canvasCtxt.lineWidth = ctxt.staffLineWeight;\n    canvasCtxt.strokeStyle = ctxt.staffLineColor;\n\n    for (i = -3; i <= 3; i += 2) {\n      y = ctxt.staffInterval * i;\n\n      canvasCtxt.beginPath();\n      canvasCtxt.moveTo(x1, y);\n      canvasCtxt.lineTo(x2, y);\n      canvasCtxt.stroke();\n    }\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      this.insertionCursor.draw(ctxt);\n    }\n\n    // draw the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      canvasCtxt.beginPath();\n      canvasCtxt.moveTo(ledgerLine.x1, y);\n      canvasCtxt.lineTo(ledgerLine.x2, y);\n      canvasCtxt.stroke();\n    }\n\n    // fixme: draw the braces\n\n    // draw the dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null) this.score.dropCap.draw(ctxt);\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        this.score.annotation.draw(ctxt);\n    }\n\n    // draw the notations\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      notations[i].draw(ctxt);\n\n    this.startingClef.draw(ctxt);\n\n    if (this.custos) this.custos.draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getInnerNodes(\n    ctxt,\n    top = 0,\n    functionNames = { quickSvg: \"createNode\", elements: \"createSvgNode\" }\n  ) {\n    var inner = [];\n\n    // add the chant lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight;\n\n    if (ctxt.editable) {\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"rect\", {\n          key: \"insertion\",\n          x: x1,\n          y: ctxt.staffInterval * -3,\n          width: x2 - x1,\n          height: ctxt.staffInterval * 6,\n          fill: \"none\"\n        })\n      );\n    }\n\n    // create the staff lines\n    for (i = -3; i <= 3; i += 2) {\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"line\", {\n          key: i,\n          x1: x1,\n          y1: ctxt.staffInterval * i,\n          x2: x2,\n          y2: ctxt.staffInterval * i,\n          stroke: ctxt.staffLineColor,\n          \"stroke-width\": ctxt.staffLineWeight,\n          class: \"staffLine\"\n        })\n      );\n    }\n\n    inner = [\n      QuickSvg[functionNames.quickSvg](\"g\", { class: \"staffLines\" }, inner)\n    ];\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      inner.push(this.insertionCursor[functionNames.elements](ctxt));\n    }\n\n    // create the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"line\", {\n          x1: ledgerLine.x1,\n          y1: y,\n          x2: ledgerLine.x2,\n          y2: y,\n          stroke: ctxt.staffLineColor,\n          \"stroke-width\": ctxt.staffLineWeight,\n          class: \"ledgerLine\"\n        })\n      );\n    }\n\n    // add any braces\n    for (i = 0; i < this.braces.length; i++)\n      inner.push(this.braces[i][functionNames.elements](ctxt));\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null)\n        inner.push(this.score.dropCap[functionNames.elements](ctxt));\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        inner = inner.concat(\n          this.score.annotation[functionNames.elements](ctxt)\n        );\n    }\n\n    inner.push(this.startingClef[functionNames.elements](ctxt));\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // add all of the notations\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      inner.push(notations[i][functionNames.elements](ctxt));\n\n    if (this.custos) inner.push(this.custos[functionNames.elements](ctxt));\n    return inner;\n  }\n\n  createSvgNode(ctxt, top = 0) {\n    let inner = this.getInnerNodes(ctxt, top, {\n      quickSvg: \"createNode\",\n      elements: \"createSvgNode\"\n    });\n\n    return QuickSvg.createNode(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex,\n        source: this\n      },\n      inner\n    );\n  }\n\n  createSvgTree(ctxt, top = 0) {\n    let inner = this.getInnerNodes(ctxt, top, {\n      quickSvg: \"createSvgTree\",\n      elements: \"createSvgTree\"\n    });\n\n    return QuickSvg.createSvgTree(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex\n      },\n      ...inner\n    );\n  }\n\n  createSvgFragment(ctxt, top = 0) {\n    var inner = \"\";\n\n    // add the chant lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight;\n\n    // create the staff lines\n    for (i = -3; i <= 3; i += 2) {\n      inner += QuickSvg.createFragment(\"line\", {\n        x1: x1,\n        y1: ctxt.staffInterval * i,\n        x2: x2,\n        y2: ctxt.staffInterval * i,\n        stroke: ctxt.staffLineColor,\n        \"stroke-width\": ctxt.staffLineWeight,\n        class: \"staffLine\"\n      });\n    }\n\n    inner = QuickSvg.createFragment(\"g\", { class: \"staffLines\" }, inner);\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      inner += this.insertionCursor.createSvgFragment(ctxt);\n    }\n\n    // create the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      inner += QuickSvg.createFragment(\"line\", {\n        x1: ledgerLine.x1,\n        y1: y,\n        x2: ledgerLine.x2,\n        y2: y,\n        stroke: ctxt.staffLineColor,\n        \"stroke-width\": ctxt.staffLineWeight,\n        class: \"ledgerLine\"\n      });\n    }\n\n    // add any braces\n    for (i = 0; i < this.braces.length; i++)\n      inner += this.braces[i].createSvgFragment(ctxt);\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null)\n        inner += this.score.dropCap.createSvgFragment(ctxt);\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        inner += this.score.annotation.createSvgFragment(ctxt);\n    }\n\n    inner += this.startingClef.createSvgFragment(ctxt);\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // add all of the notations\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      inner += notations[i].createSvgFragment(ctxt);\n\n    if (this.custos) inner += this.custos.createSvgFragment(ctxt);\n\n    return QuickSvg.createFragment(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex\n      },\n      inner\n    );\n  }\n\n  // code below based on code by: https://gist.github.com/alexhornbake\n  //\n  // optimized for braces that are only drawn horizontally.\n  // returns svg path string ready to insert into svg doc\n  generateCurlyBraceDrawable(ctxt, x1, x2, y, isAbove) {\n    var h;\n\n    if (isAbove) h = -ctxt.staffInterval / 2;\n    else h = ctxt.staffInterval / 2;\n\n    // and q factor, .5 is normal, higher q = more expressive bracket\n    var q = 0.6;\n\n    var len = x2 - x1;\n\n    //Calculate Control Points of path,\n    var qx1 = x1;\n    var qy1 = y + q * h;\n    var qx2 = x1 + 0.25 * len;\n    var qy2 = y + (1 - q) * h;\n    var tx1 = x1 + 0.5 * len;\n    var ty1 = y + h;\n    var qx3 = x2;\n    var qy3 = y + q * h;\n    var qx4 = x1 + 0.75 * len;\n    var qy4 = y + (1 - q) * h;\n    var d =\n      \"M \" +\n      x1 +\n      \" \" +\n      y +\n      \" Q \" +\n      qx1 +\n      \" \" +\n      qy1 +\n      \" \" +\n      qx2 +\n      \" \" +\n      qy2 +\n      \" T \" +\n      tx1 +\n      \" \" +\n      ty1 +\n      \" M \" +\n      x2 +\n      \" \" +\n      y +\n      \" Q \" +\n      qx3 +\n      \" \" +\n      qy3 +\n      \" \" +\n      qx4 +\n      \" \" +\n      qy4 +\n      \" T \" +\n      tx1 +\n      \" \" +\n      ty1;\n\n    return QuickSvg.createFragment(\"path\", {\n      d: d,\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.neumeLineWeight + \"px\",\n      fill: \"none\"\n    });\n  }\n\n  buildFromChantNotationIndex(ctxt, newElementStart, width) {\n    // todo: reset / clear the children we have in case they have data\n    var notations = this.score.notations,\n      beginningLyrics = null,\n      prev = null,\n      prevNeume = null,\n      prevLyrics = [];\n    var condensableSpaces = [];\n    this.notationsStartIndex = newElementStart;\n    this.numNotationsOnLine = 0;\n\n    this.staffLeft = 0;\n    this.paddingLeft = 0;\n\n    this.extraTextOnlyIndex = null;\n    this.extraTextOnlyLyricIndex = 0;\n\n    if (width > 0) this.staffRight = width;\n    else this.staffRight = Infinity; // no limit to staff size\n\n    // If this is the first chant line, then we have to make room for a\n    // drop cap and/or annotation, if present\n    if (this.notationsStartIndex === 0) {\n      var padding = 0;\n\n      if (this.score.dropCap !== null)\n        padding =\n          this.score.dropCap.bounds.width + this.score.dropCap.padding * 2;\n\n      if (\n        this.score.annotation !== null &&\n        (!this.score.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        padding = Math.max(\n          padding,\n          this.score.annotation.bounds.width + this.score.annotation.padding * 2\n        );\n\n      this.staffLeft += padding;\n      if (this.score.dropCap !== null)\n        this.paddingLeft = (padding - this.score.dropCap.bounds.width) / 2;\n    } else {\n      prev = notations[newElementStart - 1];\n      if (\n        prev.constructor === DoubleBar &&\n        prev.hasLyrics() &&\n        (prev.lyrics.length > 1 || !prev.lyrics[0].text.match(/^(i\\.?)+j\\.?/))\n      ) {\n        beginningLyrics = prev.lyrics.map(function(lyric) {\n          var newLyric = new Lyric(\n            ctxt,\n            lyric.originalText,\n            lyric.lyricType,\n            lyric.notation,\n            lyric.notations,\n            lyric.sourceIndex\n          );\n          newLyric.elidesToNext = lyric.elidesToNext;\n          // Hide the original lyric by setting its bounds.y to an extremely high number.\n          // If the chant is re-laid out, this value will be recalculated so that it won't stay hidden.\n          lyric.bounds.y = Number.MAX_SAFE_INTEGER;\n          return newLyric;\n        });\n        var minX = beginningLyrics\n          .map(function(l) {\n            return l.bounds.x;\n          })\n          .reduce(function(a, b) {\n            return a < b ? a : b;\n          });\n        beginningLyrics.forEach(function(l) {\n          l.bounds.x -= minX;\n        });\n      }\n    }\n\n    // set up the clef...\n    // if the first notation on the line is a starting clef, then we treat it a little differently...\n    // the clef becomes this line's starting clef and we skip over the clef in the notations array\n    if (notations.length && notations[newElementStart].isClef) {\n      ctxt.activeClef = notations[newElementStart];\n      newElementStart++;\n      this.notationsStartIndex++;\n    }\n\n    // make a copy for this line to use at the beginning\n    this.startingClef = ctxt.activeClef.clone();\n    this.startingClef.performLayout(ctxt);\n    this.startingClef.bounds.x = this.staffLeft;\n\n    var curr = this.startingClef;\n\n    if (beginningLyrics) {\n      LyricArray.setNotation(beginningLyrics, curr);\n    }\n\n    // estimate how much space we have available to us\n    var rightNotationBoundary =\n      this.staffRight - Glyphs.CustosLong.bounds.width * ctxt.glyphScaling; // possible custos on the line\n    var lastTranslationTextWithEndNeume = null;\n\n    // iterate through the notations, fittng what we can on this line\n    var i,\n      j,\n      lastNotationIndex = notations.length - 1;\n\n    if (curr.hasLyrics()) LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\n    // if we already have a start brace on the context, we must be continuing it from the previous system.\n    if (ctxt.lastStartBrace && !ctxt.lastStartBrace.note) {\n      ctxt.lastStartBrace.note = this.startingClef;\n    }\n    var lastLyricsBeforeTextOnly;\n    var textOnlyStartIndex;\n\n    for (i = newElementStart; i <= lastNotationIndex; i++) {\n      prev = curr;\n      if (curr.constructor !== TextOnly) prevNeume = curr;\n\n      curr = notations[i];\n\n      var actualRightBoundary;\n      if (\n        i === lastNotationIndex ||\n        curr.constructor === Custos ||\n        (prev.constructor === Custos && curr.isDivider) ||\n        (curr.constructor === ChantLineBreak &&\n          prevNeume.constructor === Custos)\n      ) {\n        // on the last notation of the score, we don't need a custos or trailing space, so we use staffRight as the\n        // right boundary.\n        // Also, if the current notation is a divider and the previous was a custos, we don't need extra space\n        // because if the following notation won't fit, we can switch the order and use the custos as the end-of-the-line custos\n        // Ditto in the case of the current element being a chant line break and the previous neume a custos, because that custos will become our end-of-line custos\n        actualRightBoundary = this.staffRight;\n      } else if (i === lastNotationIndex - 1) {\n        // on the penultimate notation, make sure there is at least enough room for whichever takes up less space,\n        // between the final notation and a custos:\n        actualRightBoundary = Math.max(\n          rightNotationBoundary,\n          this.staffRight - notations[lastNotationIndex].bounds.width\n        );\n      } else {\n        // Otherwise, we use rightNotationBoundary, which leaves room for a custos...\n        actualRightBoundary = rightNotationBoundary;\n      }\n\n      // First check if we're already beyond the rightNotationBoundary (due to condensing that hasn't yet happened) and have a good element to end with\n      // but if we have 2 or fewer elements, or if the current element is a line break or a custos, we'll go ahead and try for them anyway.\n      var forceBreak =\n        !curr.isDivider &&\n        curr.constructor !== ChantLineBreak &&\n        curr.constructor !== Custos &&\n        !(\n          curr.constructor === TextOnly &&\n          curr.hasLyrics() &&\n          /^(?:[*†]|i+j\\.?)$/.test(curr.lyrics[0].text)\n        ) &&\n        lastNotationIndex - i > 1 &&\n        !prevNeume.keepWithNext &&\n        prevNeume.bounds.right() >= rightNotationBoundary;\n\n      // also force a break if we've run into extra TextOnly elements, but the current notation is not a TextOnly and has lyrics\n      forceBreak =\n        forceBreak ||\n        (this.extraTextOnlyIndex !== null &&\n          curr.constructor !== TextOnly &&\n          curr.constructor !== ChantLineBreak &&\n          curr.constructor !== Custos &&\n          curr.hasLyrics());\n\n      if (curr instanceof TextOnly && prev === prevNeume) {\n        lastLyricsBeforeTextOnly = this.lastLyrics.slice();\n        textOnlyStartIndex = i;\n      }\n      if (\n        curr instanceof TextOnly &&\n        notations[textOnlyStartIndex] &&\n        !notations[textOnlyStartIndex].hasLyrics()\n      ) {\n        // we want textOnlyStartIndex to be the first TextOnly that actually has lyrics,\n        // so if the current \"textOnlyStart\" element does not have lyrics, and we have another textOnly\n        // that does have lyrics, we will use it instead\n        textOnlyStartIndex = i;\n      }\n\n      if (curr.hasLyrics() && curr.lyrics[0].needsLayout) {\n        curr.lyrics[0].recalculateMetrics(ctxt);\n      }\n\n      // try to fit the curr element on this line.\n      // if it doesn't fit, we finish up here.\n      var fitsOnLine =\n        !forceBreak &&\n        this.positionNotationElement(\n          ctxt,\n          this.lastLyrics,\n          prevNeume,\n          curr,\n          actualRightBoundary,\n          this.extraTextOnlyIndex ? [] : condensableSpaces // no spaces are condensable once we are on extra text only lyrics\n        );\n      var candidateForExtraTextOnlyLine =\n        ctxt.useExtraTextOnly &&\n        curr.constructor === TextOnly &&\n        LyricArray.hasOnlyOneLyric(curr.lyrics) &&\n        (fitsOnLine === false || this.extraTextOnlyIndex !== null);\n      var extraTextOnlyLyricIndex;\n      if (candidateForExtraTextOnlyLine && this.extraTextOnlyIndex === null) {\n        // check to make sure there is enough text to put on the text only line:\n        extraTextOnlyLyricIndex = LyricArray.indexOfLyric(curr.lyrics);\n        if (textOnlyStartIndex === i) {\n          var currentLyric = notations[i].lyrics[extraTextOnlyLyricIndex].text;\n          if (currentLyric.length <= 1) {\n            var nextNotation = notations[i + 1];\n            candidateForExtraTextOnlyLine =\n              nextNotation &&\n              nextNotation.constructor === TextOnly &&\n              nextNotation.lyrics[extraTextOnlyLyricIndex] &&\n              nextNotation.lyrics[extraTextOnlyLyricIndex].text.length > 0;\n          }\n        }\n      }\n      if (candidateForExtraTextOnlyLine) {\n        // a special case for TextOnly elements that don't fit on the line: since they don't have neumes associated with them, we can place this\n        // and any additional TextOnly elements just below the current lyric lines, but we can only do this if the TextOnly elements have only one\n        // line of lyrics associated with them.\n        var firstOnLine;\n        extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n        if (\n          this.extraTextOnlyIndex === null &&\n          notations[textOnlyStartIndex].lyrics.length\n        ) {\n          if (\n            textOnlyStartIndex === this.notationsStartIndex ||\n            !ctxt.startExtraTextOnlyFromFirst\n          ) {\n            textOnlyStartIndex = i;\n            let lastNotationWithLyrics = notations\n              .slice(this.notationsStartIndex, i)\n              .reverse()\n              .find(notation => notation.hasLyrics());\n            lastLyricsBeforeTextOnly =\n              (lastNotationWithLyrics &&\n                lastNotationWithLyrics.lyrics.slice()) ||\n              [];\n          }\n          // go back to the first in this string of consecutive TextOnly elements.\n          this.extraTextOnlyIndex = textOnlyStartIndex;\n          extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex = LyricArray.indexOfLyric(\n            curr.lyrics\n          );\n          this.lastLyricsBeforeTextOnly = lastLyricsBeforeTextOnly;\n          this.lastLyrics = [];\n          i = textOnlyStartIndex - 1;\n          this.numNotationsOnLine =\n            textOnlyStartIndex - this.notationsStartIndex;\n          continue;\n        }\n        delete curr.lyrics[extraTextOnlyLyricIndex].lineWidth;\n        if (!fitsOnLine || i === this.extraTextOnlyIndex) {\n          curr.bounds.x = curr.lyrics[extraTextOnlyLyricIndex].origin.x;\n          let lastLyricRight = ctxt.startExtraTextOnlyFromFirst\n            ? LyricArray.getRight(this.lastLyrics) +\n              (ctxt.minLyricWordSpacing || 0)\n            : 0;\n          curr.lyrics[extraTextOnlyLyricIndex].setMaxWidth(\n            ctxt,\n            this.staffRight,\n            this.staffRight - lastLyricRight\n          );\n          firstOnLine = curr;\n        }\n        if (firstOnLine)\n          firstOnLine.lyrics[extraTextOnlyLyricIndex].lineWidth = curr.lyrics[\n            extraTextOnlyLyricIndex\n          ].getRight();\n      } else if (fitsOnLine === false) {\n        const isTextOnlyBeforeDivider = (i) => {\n          const curr = notations[i];\n          if (curr.constructor !== TextOnly) return false;\n          const firstDivider = notations.slice(i + 1).findIndex(notation => notation.isDivider);\n          if (firstDivider < 0) return false;\n          return notations.slice(i + 1, i + 1 + firstDivider).every(notation => notation.constructor === TextOnly);\n        }\n        // first check for elements that cannot begin a system: dividers and custodes\n        while (\n          this.numNotationsOnLine > 1 &&\n          (curr.isDivider || curr.constructor === Custos || isTextOnlyBeforeDivider(i))\n        ) {\n          curr = notations[--i];\n          this.numNotationsOnLine--;\n          if (this.lastLyricsBeforeTextOnly && isTextOnlyBeforeDivider(i)) {\n            delete this.lastLyricsBeforeTextOnly;\n          }\n        }\n\n        if (lastTranslationTextWithEndNeume) {\n          // console.info(notations[i - 1], lastTranslationTextWithEndNeume);\n          // TODO?: need to go back to before the last translation text start:\n        }\n\n        // count syllables and notes\n        const notationsAfterBreak = notations.slice(i + 1);\n        let countSyllables = 0;\n        let countNotes = 0;\n        if (ctxt.minSyllablesLastLine && ctxt.minNotesLastLine) {\n          countSyllables = notationsAfterBreak.filter(notation => notation.hasLyrics()).length;\n          countNotes = notationsAfterBreak.flatMap(notation => notation.notes).filter(note => !!note).length;\n        }\n\n        // check if the prev elements want to be kept with this one\n        for (j = i - 1; j > this.notationsStartIndex; j--) {\n          var cne = notations[j];\n          curr = notations[j + 1];\n\n          // curr is the first notation on the next line\n          // cne is the last notation on this line\n          if (ctxt.minSyllablesLastLine && ctxt.minNotesLastLine) {\n            countSyllables += curr.hasLyrics() ? 1 : 0;\n            countNotes += (curr.notes || []).length;\n          }\n\n          if (cne.firstWithNoWidth) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          // don't let a line break occur in the middle of a translation\n          if (lastTranslationTextWithEndNeume) {\n            this.numNotationsOnLine--;\n            if (cne === lastTranslationTextWithEndNeume) {\n              lastTranslationTextWithEndNeume = null;\n            }\n            continue;\n          }\n\n          // force any notations starting with a quilisma or inclinatum (diamond) to be kept with the previous notation:\n          if (\n            curr &&\n            curr.notes &&\n            (curr.notes[0].shape === NoteShape.Quilisma ||\n              curr.notes[0].shape === NoteShape.Inclinatum)\n          ) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          if (countSyllables < ctxt.minSyllablesLastLine && countNotes < ctxt.minNotesLastLine) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          // if the line break is allowed (cne.allowLineBreakBeforeNext), keep this number of notations around so we can check during justification\n          // whether there would be too much space introduced between\n          if (cne.keepWithNext === true) {\n            if (cne.allowLineBreakBeforeNext && !this.maxNumNotationsOnLine)\n              this.maxNumNotationsOnLine = this.numNotationsOnLine;\n            this.numNotationsOnLine--;\n          } else break;\n        }\n        if (this.extraTextOnlyIndex && (this.notationsStartIndex + this.numNotationsOnLine) <= this.extraTextOnlyIndex) {\n          // we've cut back to before the extra text only index, so we have to remove it:\n          this.extraTextOnlyIndex = null;\n        }\n\n        // if for some reason not a single notation can fit on the line, we'd better put it on anyway, to avoid an infinite loop:\n        if (this.numNotationsOnLine === 0) this.numNotationsOnLine = 1;\n\n        // determine the neumes we can space apart, if we do end up justifying\n        curr = this.findNeumesToJustify(prevLyrics);\n\n        this.lastLyrics = prevLyrics;\n        if (this.maxNumNotationsOnLine) {\n          // Check whether we should squeeze some extra notations on the line to avoid too much space after justification:\n          // Check how much space we would have without the extra notations\n          var extraSpace = this.getWhitespaceOnRight(ctxt);\n          if (\n            extraSpace / this.toJustify.length >\n            ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals\n          ) {\n            LyricArray.mergeInArray(\n              prevLyrics,\n              notations.slice(\n                this.notationsStartIndex + this.numNotationsOnLine,\n                this.notationsStartIndex + this.maxNumNotationsOnLine\n              )\n            );\n            this.numNotationsOnLine = this.maxNumNotationsOnLine;\n            delete this.maxNumNotationsOnLine;\n          }\n        }\n\n        // if the next line begins with a fresh word, than there can be extra space between the last notation on this line and the custos:\n        let next = this.score.notations[\n          this.extraTextOnlyIndex === null\n            ? this.notationsStartIndex + this.numNotationsOnLine\n            : this.extraTextOnlyIndex\n        ];\n        if (\n          next &&\n          next.hasLyrics() &&\n          (next.lyrics[0].lyricType === LyricType.BeginningSyllable ||\n            next.lyrics[0].lyricType === LyricType.SingleSyllable)\n        ) {\n          this.toJustify.push(this.custos);\n        }\n\n        if (\n          j >= 1 &&\n          notations[j].isDivider &&\n          notations[j - 1].constructor === Custos\n        ) {\n          // reverse the order: put the divider first, and end the line with the custos.\n          prevLyrics = [];\n          for (i = j - 2; i >= this.notationsStartIndex; i--) {\n            if (notations[i].hasLyrics()) {\n              LyricArray.mergeIn(prevLyrics, notations[i].lyrics);\n              break;\n            }\n          }\n          // remove the custos and divider from the condensable spaces list, before adding the divider back, when repositioning it.\n          condensableSpaces.sum -= condensableSpaces.pop().condensable;\n          condensableSpaces.sum -= condensableSpaces.pop().condensable;\n          this.positionNotationElement(\n            ctxt,\n            prevLyrics,\n            notations[j - 2],\n            notations[j],\n            this.staffRight,\n            condensableSpaces\n          );\n          this.custos = notations[j - 1];\n          this.custos.bounds.x =\n            this.staffRight -\n            this.custos.bounds.width -\n            this.custos.leadingSpace;\n        }\n\n        // we are at the end of the line!\n        break;\n      }\n\n      if (curr.hasLyrics()) LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\n      if (\n        lastTranslationTextWithEndNeume &&\n        curr === lastTranslationTextWithEndNeume.translationText[0].endNeume\n      ) {\n        lastTranslationTextWithEndNeume = null;\n      } else if (\n        curr.translationText &&\n        curr.translationText.length &&\n        curr.translationText[0].endNeume\n      ) {\n        lastTranslationTextWithEndNeume = curr;\n      }\n\n      curr.line = this;\n      this.numNotationsOnLine++;\n\n      if (curr.isClef) ctxt.activeClef = curr;\n\n      // line breaks are a special case indicating to stop processing here\n      if (curr.constructor === ChantLineBreak && width > 0) {\n        this.justify =\n          curr.justify ||\n          this.extraTextOnlyIndex !== null ||\n          this.getWhitespaceOnRight(ctxt) < 0;\n        if (this.justify) this.findNeumesToJustify(prevLyrics);\n        break;\n      }\n\n      if (curr.constructor === Custos) {\n        this.custos = curr;\n      } else if (curr.isNeume) {\n        this.custos = null;\n      }\n    }\n\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine - 1;\n    var last = notations[lastIndex] || {};\n    while (\n      lastIndex > 0 &&\n      (last.constructor === ChantLineBreak ||\n        last.constructor === Custos ||\n        last.constructor === TextOnly)\n    ) {\n      last = notations[--lastIndex];\n    }\n    var isLastLine =\n      this.notationsStartIndex + this.numNotationsOnLine === notations.length;\n    if (\n      (this.justify && this.extraTextOnlyIndex !== null) ||\n      (width > 0 && isLastLine)\n    ) {\n      // this is the last chant line, or it has extra TextOnly elements at the end\n      if (!this.toJustify) this.findNeumesToJustify(prevLyrics);\n      this.justify =\n        (!isLastLine || last.isDivider) &&\n        this.getWhitespaceOnRight(ctxt) / (this.toJustify.length || 1) <=\n          ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals;\n    }\n\n    if (!this.custos) {\n      // create the automatic custos at the end of the line if there are neumes left in the notations\n      for (\n        i = this.notationsStartIndex + this.numNotationsOnLine;\n        i < notations.length;\n        i++\n      ) {\n        var notation = notations[i];\n\n        if (notation.isNeume) {\n          this.custos = new Custos(true);\n          ctxt.currNotationIndex = i - 1; // make sure the context knows where the custos is\n          this.custos.performLayout(ctxt);\n\n          if (this.justify) {\n            // Put the custos at the very end of the line\n            this.custos.bounds.x =\n              this.staffRight -\n              this.custos.bounds.width -\n              this.custos.leadingSpace;\n          } else {\n            this.custos.bounds.x =\n              prevNeume.bounds.right() + prevNeume.calculatedTrailingSpace;\n          }\n          // nothing more to see here...\n          break;\n        }\n      }\n    }\n\n    if (this.lastLyricsBeforeTextOnly) {\n      this.lastLyrics = this.lastLyricsBeforeTextOnly;\n      delete this.lastLyricsBeforeTextOnly;\n    }\n\n    // find the final lyric and mark it as connecting if needed.\n    if (width > 0) {\n      var whitespace = this.getWhitespaceOnRight();\n      var rightEdge = this.staffRight;\n      if (whitespace < 0) {\n        rightEdge -= whitespace;\n      }\n    }\n    i = 0;\n    while (this.lastLyrics && this.lastLyrics[i]) {\n      let lyrics = this.lastLyrics[i];\n      if (lyrics.allowsConnector()) {\n        lyrics.setNeedsConnector(true, 0);\n        if (width > 0 && ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n          whitespace = rightEdge - lyrics.getRight();\n          // shrink the hyphen if we are already out of whitespace or if we would be if we used a regular hyphen:\n          if (whitespace < 0) {\n            var minHyphenWidth = Math.max(\n              ctxt.hyphenWidth + whitespace,\n              this.lastLyrics.length > 1\n                ? ctxt.intraNeumeSpacing\n                : ctxt.minLyricWordSpacing\n            );\n            // we might not need to shift the syllable, but we do want to shrink the hyphen...\n            lyrics.setConnectorWidth(minHyphenWidth);\n          }\n        }\n      }\n      ++i;\n    }\n\n    // if the provided width is less than zero, then set the width of the line\n    // based on the last notation\n    if (width <= 0) {\n      this.staffRight = notations[\n        this.notationsStartIndex + this.numNotationsOnLine - 1\n      ].bounds.right();\n      this.justify = false;\n    }\n\n    // Justify the line if we need to\n    this.justifyElements(ctxt, this.justify, condensableSpaces);\n\n    this.centerDividers();\n\n    this.finishLayout(ctxt);\n  }\n\n  centerDividers() {\n    var lastIndex =\n        this.extraTextOnlyIndex === null\n          ? this.notationsStartIndex + this.numNotationsOnLine\n          : this.extraTextOnlyIndex,\n      curr;\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      curr = this.score.notations[i];\n\n      if (curr && curr.isDivider) {\n        var j = 1;\n        var prev = this.score.notations[i - 1];\n        var next =\n          i + 1 === lastIndex ? this.custos : this.score.notations[i + 1];\n        if (prev === next && next === this.custos) {\n          prev = this.score.notations[i - 2];\n          // force custos to right edge in this case, since it is a custos that exists\n          // regardless of line break, and would normally be before the double bar, but in this case it ends the line:\n          next.bounds.x = this.staffRight - next.bounds.width;\n        }\n        if (prev && next) {\n          //if (prev instanceof TextOnly || next instanceof TextOnly) continue;\n          var oldBoundsX = curr.bounds.x;\n          var barWidth = curr.bounds.width;\n          var leftPoint =\n              prev instanceof TextOnly && prev.hasLyrics()\n                ? prev.lyrics[0].getRight()\n                : prev.bounds.right(),\n            rightPoint =\n              next instanceof TextOnly && next.hasLyrics()\n                ? next.lyrics[0].getLeft()\n                : next.bounds.x;\n          if (prev instanceof TextOnly) {\n            let prev = this.score.notations.slice(this.notationsStartIndex, i).reverse().find(notation => !(notation instanceof TextOnly));\n            leftPoint = prev ? prev.bounds.right() : 0;\n          }\n          if (leftPoint) {\n            curr.bounds.x = (leftPoint + rightPoint - barWidth) / 2;\n          }\n          if (curr.hasLyrics()) {\n            var offset = oldBoundsX - curr.bounds.x;\n            for (j = curr.lyrics.length - 1; j >= 0; j--) {\n              curr.lyrics[j].bounds.x += offset;\n              curr.lyrics[j].needsLayout = true;\n            }\n          }\n        } else if (\n          i === lastIndex - 1 &&\n          this.justify &&\n          (curr.constructor === DoubleBar || curr.constructor === FullBar)\n        ) {\n          curr.bounds.x = this.staffRight - curr.bounds.width;\n        }\n      }\n    }\n  }\n\n  findNeumesToJustify(prevLyrics) {\n    this.toJustify = [];\n    var prev,\n      curr = null,\n      next = null,\n      nextOrCurr = null,\n      lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      prev = nextOrCurr;\n      curr = this.score.notations[i];\n      next = curr.isAccidental && this.score.notations[++i];\n      nextOrCurr = next || curr;\n      var hasLyrics = nextOrCurr.hasLyrics();\n\n      if (!curr || !prev) continue;\n\n      if (\n        this.extraTextOnlyIndex !== null &&\n        i >= this.extraTextOnlyIndex &&\n        curr.constructor === TextOnly\n      )\n        continue;\n\n      if (prev !== null) {\n        LyricArray.mergeIn(prevLyrics, prev.lyrics);\n        if (prev.keepWithNext === true) continue;\n      }\n\n      if (\n        !curr.isDivider &&\n        prevLyrics.length &&\n        prevLyrics[0].allowsConnector() &&\n        hasLyrics\n      )\n        continue;\n\n      if (nextOrCurr.constructor === ChantLineBreak) continue;\n\n      if (nextOrCurr === this.custos && !hasLyrics) continue;\n\n      if (i === 0 && this.score.useDropCap && hasLyrics) continue;\n\n      // otherwise, we can add space before this element\n      this.toJustify.push(curr);\n    }\n    if (nextOrCurr !== null) LyricArray.mergeIn(prevLyrics, nextOrCurr.lyrics);\n    return nextOrCurr;\n  }\n\n  getWhitespaceOnRight(ctxt) {\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    var last = notations[lastIndex - 1];\n    if (this.extraTextOnlyIndex !== null && last.constructor === TextOnly) {\n      lastIndex = this.extraTextOnlyIndex;\n      last = notations[lastIndex - 1];\n    }\n    var lastRightNeume = last\n      ? last.bounds.right() + last.calculatedTrailingSpace\n      : 0;\n    var lastLyrics = this.lastLyricsBeforeTextOnly || this.lastLyrics;\n    var lastRightLyric = lastLyrics.length\n      ? LyricArray.getRight(lastLyrics)\n      : 0;\n\n    if (this.custos) {\n      lastRightNeume += this.custos.bounds.width + this.custos.leadingSpace;\n      if (this.custos.hasLyrics()) {\n        lastRightLyric = LyricArray.getRight(this.custos.lyrics);\n      }\n    } else if (ctxt && lastIndex < notations.length) {\n      lastRightNeume += Glyphs.CustosLong.bounds.width * ctxt.glyphScaling;\n    }\n    return this.staffRight - Math.max(lastRightLyric, lastRightNeume);\n  }\n\n  justifyElements(ctxt, doJustify, condensableSpaces) {\n    var i;\n    var toJustify = this.toJustify || [];\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // if it wasn't an ideal line break, and the last note is further from the custos than it would have been from its next punctum,\n    // move the custos over.\n    // We do this first so that if it opens up any new whitespace, that gets accounted for when we do the justification\n    var lastNotation =\n      notations[this.notationsStartIndex + this.numNotationsOnLine - 1];\n    var extraSpaceBeforeCustos =\n      this.staffRight < Infinity &&\n      this.custos &&\n      lastNotation.keepWithNext &&\n      this.custos.bounds.x -\n        lastNotation.bounds.right() -\n        lastNotation.calculatedTrailingSpace;\n    if (extraSpaceBeforeCustos > 0) {\n      // first, shrink the hyphen(s) if applicable, to move the neumes closer to the custos:\n      i = 0;\n      while (this.lastLyrics && this.lastLyrics[i]) {\n        let lyrics = this.lastLyrics[i];\n        if (lyrics.allowsConnector()) {\n          var connectorWidth = lyrics.getConnectorWidth();\n          if (ctxt.minLyricWordSpacing < connectorWidth) {\n            var minHyphenWidth = Math.max(\n              connectorWidth - extraSpaceBeforeCustos,\n              this.lastLyrics.length > 1\n                ? ctxt.intraNeumeSpacing\n                : ctxt.minLyricWordSpacing\n            );\n            // we might not need to shift the syllable, but we do want to shrink the hyphen...\n            lyrics.setConnectorWidth(minHyphenWidth);\n          }\n        }\n        ++i;\n      }\n      this.custos.bounds.x =\n        lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n    }\n\n    // first step of justification is to determine how much space we have to use up\n    var extraSpace = this.getWhitespaceOnRight();\n\n    if (\n      Math.abs(extraSpace) < 0.5 ||\n      (extraSpace > 0 && ((doJustify && toJustify.length === 0) || !doJustify))\n    )\n      return;\n\n    this.condensableSpaces = condensableSpaces;\n\n    var curr, prev;\n    var offset = 0;\n    var increment = extraSpace / toJustify.length;\n    var multiplier = 0;\n    var toJustifyIndex = 0;\n    if (extraSpace < 0) {\n      toJustify = condensableSpaces.filter(s => s.condensable > 0);\n      multiplier = extraSpace / condensableSpaces.sum;\n      increment = 0;\n    }\n    var nextToJustify = toJustify[toJustifyIndex++];\n    var incrementOffsetAtNextChance = false;\n    for (i = this.notationsStartIndex; i < lastIndex; i++) {\n      prev = curr;\n      curr = notations[i];\n\n      if (\n        this.extraTextOnlyIndex !== null &&\n        i >= this.extraTextOnlyIndex &&\n        curr.constructor === TextOnly\n      ) {\n        continue;\n      }\n\n      if (!multiplier && curr === this.custos) {\n        if (curr.hasLyrics()) {\n          curr.bounds.x = Math.min(\n            curr.bounds.x +\n              (this.staffRight - LyricArray.getRight(curr.lyrics)),\n            this.staffRight - curr.bounds.width\n          );\n          offset += increment;\n        } else {\n          curr.bounds.x = Math.min(\n            curr.bounds.x + offset,\n            this.staffRight - curr.bounds.width\n          );\n        }\n        continue;\n      }\n\n      if (multiplier) {\n        if (nextToJustify && nextToJustify.notation === curr) {\n          offset += multiplier * nextToJustify.condensable;\n          nextToJustify = toJustify[toJustifyIndex++];\n        }\n      } else if (nextToJustify === curr) {\n        if (prev.hasNoWidth) {\n          incrementOffsetAtNextChance = true;\n        } else {\n          offset += increment;\n        }\n        nextToJustify = toJustify[toJustifyIndex++];\n      } else if (incrementOffsetAtNextChance && !prev.hasNoWidth) {\n        incrementOffsetAtNextChance = false;\n        offset += increment;\n      }\n\n      curr.bounds.x += offset;\n    }\n\n    if (extraSpaceBeforeCustos > 0) {\n      this.custos.bounds.x =\n        lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n    }\n  }\n\n  handleEndBrace(ctxt, note, i) {\n    var startBrace = ctxt.lastStartBrace;\n    if (!startBrace) return;\n    // calculate the y value of the brace by iterating over all notations\n    // under/over the brace.\n    var y;\n    var k = startBrace.notationIndex;\n    var notations = this.score.notations;\n    var dy = ctxt.intraNeumeSpacing / 2; // some safe space between brace and notes.\n    var startNote = startBrace.note;\n\n    if (startBrace.isAbove) {\n      y = Math.min(\n        ctxt.calculateHeightFromStaffPosition(4),\n        ...[startNote, note]\n          .concat(notations.slice(k, i + 1))\n          .map(n => n.bounds.y - dy)\n      );\n    } else {\n      y = Math.max(\n        ctxt.calculateHeightFromStaffPosition(-4),\n        ...[startNote, note]\n          .concat(notations.slice(k, i + 1))\n          .map(n => n.bounds.bottom() + dy)\n      );\n    }\n\n    var addAcuteAccent = false;\n\n    if (startBrace.shape === BraceShape.RoundBrace) {\n      this.braces.push(\n        new RoundBraceVisualizer(\n          ctxt,\n          startBrace.getAttachmentX(startNote),\n          note.braceEnd.getAttachmentX(note),\n          y,\n          startBrace.isAbove\n        )\n      );\n    } else {\n      if (startBrace.shape === BraceShape.AccentedCurlyBrace)\n        addAcuteAccent = true;\n\n      this.braces.push(\n        new CurlyBraceVisualizer(\n          ctxt,\n          startBrace.getAttachmentX(startNote),\n          note.braceEnd.getAttachmentX(note),\n          y,\n          startBrace.isAbove,\n          addAcuteAccent\n        )\n      );\n    }\n\n    delete ctxt.lastStartBrace;\n  }\n\n  finishLayout(ctxt) {\n    this.ledgerLines = []; // clear any existing ledger lines\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // an element needs to have a staffPosition property, as well as the standard\n    // bounds property. so it could be a note, or it could be a custos\n    // offsetX can be used to add to the position info for the element,\n    // useful in the case of notes.\n    var processElementForLedgerLine = (\n      element,\n      endElem = element,\n      staffPosition = element.staffPosition,\n      offsetX = element.neume ? element.neume.bounds.x : 0\n    ) => {\n      // do we need a ledger line for this note?\n\n      if (staffPosition >= 5 || staffPosition <= -5) {\n        var x1 = offsetX + element.bounds.x - ctxt.intraNeumeSpacing;\n        var x2 =\n          offsetX +\n          endElem.bounds.x +\n          endElem.bounds.width +\n          ctxt.intraNeumeSpacing;\n\n        // round the staffPosition to the nearest line\n        if (staffPosition > 0)\n          staffPosition = staffPosition - ((staffPosition - 1) % 2);\n        else staffPosition = staffPosition - ((staffPosition + 1) % 2);\n\n        // if we have a ledger line close by, then average out the distance between the two\n        var minLedgerSeparation = ctxt.staffInterval * ctxt.minLedgerSeparation;\n\n        if (\n          this.ledgerLines.length > 0 &&\n          this.ledgerLines[this.ledgerLines.length - 1].x2 +\n            minLedgerSeparation >=\n            x1\n        ) {\n          // average out the distance\n          var half =\n            (x1 - this.ledgerLines[this.ledgerLines.length - 1].x2) / 2;\n          this.ledgerLines[this.ledgerLines.length - 1].x2 += half;\n          x1 -= half;\n        }\n\n        // never let a ledger line extend past the staff width\n        if (x2 > this.staffRight) x2 = this.staffRight;\n\n        // finally, add the ledger line\n        this.ledgerLines.push({\n          x1: x1,\n          x2: x2,\n          staffPosition: staffPosition\n        });\n      }\n    };\n\n    var episemata = []; // keep track of episemata in case we can connect some\n    var startBrace = null;\n    var minY = Number.MAX_VALUE,\n      maxY = Number.MIN_VALUE; // for braces\n\n    var positionNonLyricText = (text, neume, rightX) => {\n      text.setMaxWidth(ctxt, this.staffRight);\n      //text.bounds.x = neume.hasLyrics()? Math.min(...neume.lyrics.map(l => l.bounds.x)) : 0;\n      text.bounds.x = 0;\n      if (rightX)\n        text.bounds.x = (text.bounds.x + rightX - text.bounds.width) / 2;\n      var beyondStaffRight =\n        neume.bounds.x + text.bounds.right() - this.staffRight;\n      if (beyondStaffRight > 0) {\n        text.bounds.x -= beyondStaffRight;\n      }\n      if (neume.bounds.x + text.bounds.x < 0) {\n        text.bounds.x = -neume.bounds.x;\n      }\n    };\n\n    // make a final pass over all of the notes to add any necessary\n    // ledger lines and to smooth out episemata\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      var neume = notations[i];\n\n      minY = Math.min(minY, neume.bounds.y);\n      maxY = Math.max(maxY, neume.bounds.bottom());\n\n      if (neume.constructor === Custos) {\n        processElementForLedgerLine(neume);\n        continue;\n      }\n\n      // if the AboveLinesText would extend beyond the right edge of the staff, right align it instead\n      if (neume.alText) {\n        for (var j = 0; j < neume.alText.length; j++) {\n          positionNonLyricText(neume.alText[j], neume);\n        }\n      }\n\n      // set up horizontal position of translations\n      if (neume.translationText) {\n        for (j = 0; j < neume.translationText.length; j++) {\n          var text = neume.translationText[j];\n          if (text.endNeume) {\n            var rightX = text.endNeume.hasLyrics()\n              ? text.endNeume.bounds.x +\n                Math.max(...text.endNeume.lyrics.map(l => l.bounds.right()))\n              : text.endNeume.bounds.right();\n            rightX -= neume.bounds.x;\n            positionNonLyricText(text, neume, rightX);\n          } else {\n            positionNonLyricText(text, neume);\n          }\n        }\n      }\n\n      // if it's not a neume then just skip here\n      if (!neume.isNeume) continue;\n\n      for (j = 0; j < neume.ledgerLines.length; j++) {\n        var ll = neume.ledgerLines[j];\n        processElementForLedgerLine(ll.element, ll.endElem, ll.staffPosition);\n      }\n\n      for (j = 0; j < neume.notes.length; j++) {\n        var k,\n          note = neume.notes[j];\n\n        // blend episemata as we're able\n        if (note.episemata.length === 0) episemata = [];\n        for (k = 0; k < note.episemata.length; k++) {\n          var episema = note.episemata[k];\n\n          var spaceBetweenEpisemata = 0;\n\n          // calculate the distance between the last episemata and this one...\n          // lots of code for a simple: currEpisemata.left - prevEpisemata.right\n          if (episemata.length > 0)\n            spaceBetweenEpisemata =\n              neume.bounds.x +\n              episema.bounds.x -\n              (episemata[episemata.length - 1].note.neume.bounds.x +\n                episemata[episemata.length - 1].bounds.right());\n\n          // we try to blend the episema if we're able.\n          if (\n            episemata.length === 0 ||\n            episemata[episemata.length - 1].positionHint !==\n              episema.positionHint ||\n            episemata[episemata.length - 1].terminating === true ||\n            episemata[episemata.length - 1].alignment ===\n              HorizontalEpisemaAlignment.Left ||\n            episemata[episemata.length - 1].alignment ===\n              HorizontalEpisemaAlignment.Center ||\n            episema.alignment === HorizontalEpisemaAlignment.Right ||\n            episema.alignment === HorizontalEpisemaAlignment.Center ||\n            (spaceBetweenEpisemata > ctxt.intraNeumeSpacing * 2 &&\n              note.glyphVisualizer.glyphCode !== GlyphCode.None)\n          ) {\n            // start a new set of episemata to potentially blend\n            episemata = [episema];\n          } else {\n            // blend all previous with this one\n            var newY;\n\n            if (episema.positionHint === MarkingPositionHint.Below)\n              newY = Math.max(\n                episema.bounds.y,\n                episemata[episemata.length - 1].bounds.y\n              );\n            else\n              newY = Math.min(\n                episema.bounds.y,\n                episemata[episemata.length - 1].bounds.y\n              );\n\n            if (episema.bounds.y !== newY) episema.bounds.y = newY;\n            else {\n              for (var l = 0; l < episemata.length; l++)\n                episemata[l].bounds.y = newY;\n            }\n\n            // extend the last episema to meet the new one\n            var newWidth =\n              neume.bounds.x +\n              episema.bounds.x -\n              (episemata[episemata.length - 1].note.neume.bounds.x +\n                episemata[episemata.length - 1].bounds.x);\n            if (newWidth < 0) {\n              newWidth *= -1;\n              episemata[episemata.length - 1].bounds.x -= newWidth;\n            }\n            episemata[episemata.length - 1].bounds.width = newWidth;\n\n            episemata.push(episema);\n          }\n        }\n\n        if (note.braceEnd) this.handleEndBrace(ctxt, note, i);\n\n        if (note.braceStart) {\n          ctxt.lastStartBrace = startBrace = note.braceStart;\n          startBrace.notationIndex = i;\n        }\n      }\n    }\n\n    // if we still have an active brace, that means it spands two chant lines!\n    if (startBrace !== null) {\n      if (this.custos) {\n        // if the next end brace is on the first note following the line break, simply use it with the custos\n        // Do the same if there is only an accidental between\n        // otherwise, make a new end brace to work for this one, and a new start brace for the next line.\n        var nextNotation = notations[lastIndex];\n        var nextNote = nextNotation.notes && nextNotation.notes[0];\n        var nextNotationButOne = notations[lastIndex + 1];\n        var nextNoteButOne =\n          nextNotationButOne &&\n          nextNotationButOne.notes &&\n          nextNotationButOne.notes[0];\n        var braceEnd =\n          (nextNote && nextNote.braceEnd) ||\n          (nextNotation.isAccidental &&\n            nextNoteButOne &&\n            nextNoteButOne.braceEnd);\n        if (braceEnd) {\n          this.custos.braceEnd = braceEnd;\n          this.handleEndBrace(ctxt, this.custos, i);\n        } else {\n          this.braceStart = startBrace;\n          this.custos.braceEnd = new BracePoint(\n            this.custos,\n            startBrace.isAbove,\n            startBrace.shape,\n            BraceAttachment.Right\n          );\n          this.handleEndBrace(ctxt, this.custos, i - 1);\n          ctxt.lastStartBrace = new BracePoint(\n            null,\n            startBrace.isAbove,\n            startBrace.shape,\n            BraceAttachment.Left\n          );\n          ctxt.lastStartBrace.notationIndex = i;\n        }\n      }\n    }\n\n    // don't forget to also include the final custos, which may need a ledger line too\n    if (this.custos) processElementForLedgerLine(this.custos);\n  }\n\n  // this is where the real core of positioning neumes takes place\n  // returns true if positioning was able to fit the neume before rightNotationBoundary.\n  // returns false if cannot fit before given right margin.\n  // fixme: if this returns false, shouldn't we set the connectors on prev to be activated?!\n  positionNotationElement(\n    ctxt,\n    prevLyrics,\n    prev,\n    curr,\n    rightNotationBoundary,\n    condensableSpaces = []\n  ) {\n    if (!condensableSpaces.hasOwnProperty(\"sum\")) condensableSpaces.sum = 0;\n    var i,\n      space = { notation: curr },\n      fixedX = false;\n\n    // To begin we just place the current notation right after the previous,\n    // irrespective of lyrics.\n    // But if the previous neume was part of a polyphonic \"no width\" group and the current is not, or is of a separate group,\n    // we force it to have the same x as the previous group.\n    if (\n      (!curr.hasNoWidth || curr.firstWithNoWidth === curr) &&\n      prev.firstWithNoWidth\n    ) {\n      curr.bounds.x = prev.firstWithNoWidth.bounds.x;\n      fixedX = true;\n    } else {\n      curr.bounds.x = prev.bounds.right();\n    }\n\n    if (\n      (curr.constructor === TextOnly && this.extraTextOnlyIndex === null) ||\n      (!curr.hasLyrics() && prev.calculatedTrailingSpace < 0)\n    ) {\n      // We transfer over the trailing space from the previous neume if the current neume is text only,\n      // so that the text only neume has a better chance at not needing a connector.\n      curr.calculatedTrailingSpace = prev.calculatedTrailingSpace;\n      if (curr.hasLyrics())\n        curr.calculatedTrailingSpace -= curr.lyrics[0].bounds.width;\n      if (curr.constructor === TextOnly && curr.lyrics.length === 1) {\n        curr.lyrics[0].setMaxWidth(\n          ctxt,\n          this.staffRight,\n          this.staffRight -\n            LyricArray.getRight(prevLyrics) -\n            ctxt.minLyricWordSpacing\n        );\n      }\n    } else if (!fixedX) {\n      curr.bounds.x += prev.calculatedTrailingSpace;\n    }\n\n    if (\n      curr.hasLyrics() &&\n      !prev.isDivider &&\n      !prev.isAccidental &&\n      this.numNotationsOnLine > 0 &&\n      (curr.lyrics[0].lyricType === LyricType.SingleSyllable ||\n        curr.lyrics[0].lyricType === LyricType.BeginningSyllable)\n    ) {\n      curr.bounds.x += ctxt.intraNeumeSpacing * ctxt.interVerbalMultiplier;\n    }\n    if (curr.hasNoWidth || fixedX) {\n      space.total = space.condensable = 0;\n    } else if (\n      this.extraTextOnlyIndex !== null &&\n      curr.constructor === TextOnly\n    ) {\n      curr.bounds.x = 0;\n      space.total = space.condensable = 0;\n    } else {\n      space.total = curr.bounds.x - prev.bounds.right();\n      space.condensable = space.total * ctxt.condensingTolerance;\n    }\n\n    // if the previous notation has no lyrics, then we simply make sure the\n    // current notation with lyrics is in the bounds of the line\n    if (prevLyrics.length === 0) {\n      var maxRight = curr.bounds.right() + curr.calculatedTrailingSpace;\n\n      // if the lyric left is negative, then offset the neume appropriately\n      for (i = 0; i < curr.lyrics.length; i++) {\n        let currLyric = curr.lyrics[i];\n        // we hope for the best!\n        // but always use a connector if the lyric has original text that was all used up for the drop cap.\n        let needsConnector =\n          currLyric.allowsConnector() &&\n          currLyric.dropCap &&\n          currLyric.originalText &&\n          !currLyric.text;\n        currLyric.setNeedsConnector(needsConnector);\n        let minLeft = this.staffLeft - this.paddingLeft;\n\n        if (currLyric.getLeft() < minLeft)\n          curr.bounds.x -= currLyric.getLeft() - minLeft;\n\n        space.condensable = Math.min(\n          space.condensable,\n          currLyric.getLeft() - minLeft\n        );\n        maxRight = Math.max(maxRight, currLyric.getRight());\n      }\n\n      if (\n        maxRight >\n        rightNotationBoundary + condensableSpaces.sum + space.condensable\n      )\n        return false;\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    } else {\n      if (curr.firstOfSyllable && prevLyrics.length && !curr.hasLyrics()) {\n        curr.bounds.x = Math.max(curr.bounds.x, prevLyrics[0].getRight());\n        space.total = curr.bounds.x - prev.bounds.right();\n        space.condensable = space.total * ctxt.condensingTolerance;\n      }\n    }\n\n    // if the curr notation has no lyrics, then simply check whether there is enough room\n    if (curr.hasLyrics() === false) {\n      if (\n        curr.bounds.right() + curr.calculatedTrailingSpace >\n        rightNotationBoundary + condensableSpaces.sum + space.condensable\n      )\n        return false;\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    }\n\n    // if we have multiple lyrics on the current or the previous notation,\n    // we will have to run several passes over each set of lyrics:\n\n    // on the first pass, we will check the absolute left-most placement of the new syllables\n    // we will make additional passes until everything is stable\n    do {\n      var hasShifted = false;\n      var atLeastOneWithoutConnector = false;\n      for (i = 0; i < curr.lyrics.length; i++) {\n        if (!curr.lyrics[i].originalText) continue;\n        var prevLyricRight = 0;\n        let condensableSpacesSincePrevLyric = [];\n        let condensableSpaceSincePrevLyric = null;\n        if (i < prevLyrics.length && prevLyrics[i]) {\n          prevLyricRight = prevLyrics[i].getRight();\n          let notationI = condensableSpaces\n            .map(s => s.notation)\n            .lastIndexOf(prevLyrics[i].notation);\n          if (notationI >= 0) {\n            condensableSpacesSincePrevLyric = condensableSpaces.slice(\n              notationI + 1\n            );\n            condensableSpacesSincePrevLyric.sum = condensableSpacesSincePrevLyric\n              .map(s => s.condensable)\n              .reduce((a, b) => a + b, 0);\n          } else {\n            condensableSpacesSincePrevLyric.sum = 0;\n          }\n        }\n\n        curr.lyrics[i].setNeedsConnector(false); // we hope for the best!\n        var currLyricLeft = curr.lyrics[i].getLeft();\n        if (!prevLyrics[i] || prevLyrics[i].allowsConnector() === false) {\n          // No connector needed, but include space between words if necessary!\n          let extraSpace = currLyricLeft - prevLyricRight - ctxt.minLyricWordSpacing;\n          if (extraSpace < 0) {\n            // push the current element over a bit.\n            let shift =\n              prevLyricRight + ctxt.minLyricWordSpacing - currLyricLeft;\n            curr.bounds.x += shift;\n            condensableSpaceSincePrevLyric = 0;\n            hasShifted = shift > 0.5;\n          } else {\n            condensableSpaceSincePrevLyric = extraSpace;\n          }\n        } else {\n          // we may need a connector yet...\n          if (\n            prevLyricRight + 0.1 >\n            currLyricLeft -\n              condensableSpacesSincePrevLyric.sum -\n              space.condensable\n          ) {\n            // in this case, the lyric elements actually overlap.\n            // so nope, no connector needed. instead, we just place the lyrics together\n            // fixme: for better text layout, we could actually use the kerning values\n            // between the prev and curr lyric elements!\n            let shift = prevLyricRight - currLyricLeft;\n            if (shift < -0.1) {\n              // in this case, the spacing needs to be condensed in the neumes since the last lyric...\n              let multiplier =\n                shift /\n                (condensableSpacesSincePrevLyric.sum + space.condensable);\n              let offset = 0;\n              condensableSpacesSincePrevLyric.forEach(s => {\n                offset += multiplier * s.condensable;\n                s.notation.bounds.x += offset;\n              });\n            }\n            curr.bounds.x += shift;\n            condensableSpaceSincePrevLyric = 0;\n            atLeastOneWithoutConnector = true;\n            hasShifted = shift > 0.5;\n          } else {\n            // bummer, looks like we couldn't merge the syllables together. Better add a connector...\n            if (ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n              var spaceBetweenSyls = currLyricLeft - prevLyricRight;\n              if (spaceBetweenSyls < ctxt.hyphenWidth) {\n                var minHyphenWidth =\n                  prevLyrics.length > 1\n                    ? ctxt.intraNeumeSpacing\n                    : ctxt.minLyricWordSpacing;\n                // we might not need to shift the syllable, but we do want to shrink the hyphen...\n                prevLyrics[i].setConnectorWidth(\n                  Math.max(minHyphenWidth, spaceBetweenSyls)\n                );\n              }\n            }\n            prevLyrics[i].setNeedsConnector(true);\n            prevLyricRight = prevLyrics[i].getRight();\n\n            if (prevLyricRight + 0.1 > currLyricLeft) {\n              let shift = prevLyricRight - currLyricLeft;\n              curr.bounds.x += shift;\n              condensableSpaceSincePrevLyric = 0;\n              hasShifted = shift > 0.5;\n            } else {\n              condensableSpaceSincePrevLyric = currLyricLeft - prevLyricRight;\n            }\n          }\n        }\n\n        if (condensableSpaceSincePrevLyric !== null) {\n          if (\n            condensableSpaceSincePrevLyric <\n            condensableSpacesSincePrevLyric.sum + space.condensable\n          ) {\n            // reduce condensable space so that lyrics retain at least the width of a space character between words:\n            let multiplier = condensableSpaceSincePrevLyric / (condensableSpacesSincePrevLyric.sum + space.condensable);\n            space.condensable *= multiplier;\n            if (condensableSpacesSincePrevLyric.sum) {\n              condensableSpacesSincePrevLyric.forEach(space => {\n                space.condensable *= multiplier;\n              });\n              condensableSpaces.sum = condensableSpaces\n                .map(s => s.condensable)\n                .reduce((a, b) => a + b, 0);\n            }\n          }\n        }\n      }\n    } while (\n      curr.lyrics.length > 1 &&\n      hasShifted &&\n      atLeastOneWithoutConnector\n    );\n\n    for (i = Math.min(curr.lyrics.length, prevLyrics.length) - 1; i >= 0; i--) {\n      let pLyrics = prevLyrics[i];\n      if (pLyrics.needsConnector && pLyrics.connectorWidth) {\n        currLyricLeft = curr.lyrics[i].getLeft();\n        prevLyricRight = pLyrics.getRight() - pLyrics.connectorWidth;\n        spaceBetweenSyls = currLyricLeft - prevLyricRight;\n        if (spaceBetweenSyls >= ctxt.hyphenWidth) spaceBetweenSyls = 0;\n        pLyrics.setConnectorWidth(spaceBetweenSyls);\n      }\n    }\n\n    if (\n      curr.bounds.right() + curr.calculatedTrailingSpace <\n        rightNotationBoundary + condensableSpaces.sum + space.condensable &&\n      LyricArray.getRight(curr.lyrics, true) <=\n        this.staffRight + condensableSpaces.sum + space.condensable\n    ) {\n      if (prev.isAccidental) {\n        // move the previous accidental up next to the current note:\n        let shift =\n          curr.bounds.x -\n          prev.bounds.width -\n          prev.calculatedTrailingSpace -\n          prev.bounds.x;\n        prev.bounds.x += shift;\n        if (Math.abs(shift) > 0.1) {\n          let lastCondensable = condensableSpaces[condensableSpaces.length - 1];\n          condensableSpaces.sum -= lastCondensable.condensable;\n          lastCondensable.condensable = 0;\n        }\n      }\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    }\n\n    // if we made it this far, then the element won't fit on this line.\n    return false;\n  }\n\n  /**\n   * Find the notation closest to x without going past it\n   * @param {number} x\n   */\n  bisectNotationAtX(x, useMidpoint = true) {\n    let minIndex = -1,\n      maxIndex = Math.min(this.numNotationsOnLine, Infinity),\n      curIndex = minIndex + ((maxIndex - minIndex) >> 1),\n      notations = this.score.notations.slice(\n        this.notationsStartIndex,\n        this.notationsStartIndex + this.numNotationsOnLine\n      );\n\n    while (minIndex < curIndex) {\n      let notation = notations[curIndex];\n      let notationX = notation.bounds.x;\n      if (notationX > x) {\n        maxIndex = curIndex;\n      } else {\n        minIndex = curIndex;\n      }\n      curIndex = minIndex + ((maxIndex - minIndex) >> 1);\n    }\n    let notation = notations[curIndex];\n    if (\n      useMidpoint &&\n      notation &&\n      notation.bounds.width === 0 &&\n      curIndex + 1 < notations.length\n    ) {\n      let nextNotation = notations[curIndex + 1],\n        closenessToLeft = x - notation.bounds.x,\n        closenessToRight = nextNotation.bounds.x - x;\n      if (nextNotation.bounds.width === 0 && closenessToRight < closenessToLeft)\n        ++curIndex;\n    }\n    return notations[curIndex];\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.ChantLine.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { NoteShape } from \"./Exsurge.Chant.js\";\nimport {\n  ChantLayoutElement,\n  GlyphCode,\n  GlyphVisualizer,\n  MarkingPositionHint,\n  QuickSvg\n} from \"./Exsurge.Drawing.js\";\n\nexport class Accent extends GlyphVisualizer {\n  constructor(ctxt, note, glyphCode = GlyphCode.AcuteAccent) {\n    super(ctxt, glyphCode);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Above;\n  }\n\n  performLayout(ctxt) {\n    this.bounds.x = this.note.bounds.x + this.bounds.width / 2; // center on the note itself\n\n    // this puts the acute accent either over the staff lines, or over the note if the\n    // note is above the staff lines\n    this.setStaffPosition(ctxt, Math.max(this.note.staffPosition + 1, 4));\n  }\n}\n\n// for positioning markings on notes\nexport var HorizontalEpisemaAlignment = {\n  Default: 0,\n  Left: 1,\n  Center: 2,\n  Right: 3\n};\n\n/*\n * HorizontalEpisema\n *\n * A horizontal episema marking is it's own visualizer (that is, it implements createSvgFragment)\n */\nexport class HorizontalEpisema extends ChantLayoutElement {\n  constructor(note) {\n    super();\n\n    this.note = note;\n\n    this.positionHint = MarkingPositionHint.Default;\n    this.terminating = false; // indicates if this episema should terminate itself or not\n    this.alignment = HorizontalEpisemaAlignment.Default;\n  }\n\n  performLayout(ctxt) {\n    // following logic helps to keep the episemata away from staff lines if they get too close\n\n    var y = 0,\n      step;\n    var minDistanceAway = ctxt.staffInterval * 0.25; // min distance from neume\n    var glyphCode = this.note.glyphVisualizer.glyphCode;\n    var ledgerLine = this.note.neume.ledgerLines[0] || {};\n    var punctumInclinatumShorten = false;\n\n    if (glyphCode === GlyphCode.PunctumInclinatum) {\n      let notes = this.note.neume.notes,\n        index = notes.indexOf(this.note),\n        prevNote = notes[index - 1];\n      if (\n        prevNote &&\n        prevNote.glyphVisualizer.glyphCode === GlyphCode.PunctumInclinatum &&\n        prevNote.staffPosition - this.note.staffPosition === 1\n      ) {\n        punctumInclinatumShorten = true;\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Below) {\n      y = this.note.bounds.bottom() + minDistanceAway; // the highest the line could be at\n      if (glyphCode === GlyphCode.None)\n        // correction for episema under the second note of a porrectus\n        y += ctxt.staffInterval / 2;\n      step = Math.ceil(y / ctxt.staffInterval);\n      // if there's enough space, center the episema between the punctum and the next staff line\n      if (step % 2 === 0) {\n        step = (step + 3 / 4 + (y - minDistanceAway) / ctxt.staffInterval) / 2;\n      } else {\n        // otherwise, find nearest acceptable third between staff lines (or staff line)\n        step = (Math.ceil((1.5 * y) / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\n        // if it's an odd step, that means we're on a staff line,\n        // so we shift to between the staff line\n        if (Math.abs(step) % 2 === 1) {\n          if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n            step += 2 / 3;\n          } else {\n            // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n            step += 1 / 3;\n          }\n        }\n      }\n    } else {\n      y = this.note.bounds.y - minDistanceAway; // the lowest the line could be at\n      step = Math.floor(y / ctxt.staffInterval);\n      // if there's enough space, center the episema between the punctum and the next staff line\n      if (step % 2 === 0) {\n        step = (step - 3 / 4 + (y + minDistanceAway) / ctxt.staffInterval) / 2;\n      } else {\n        // otherwise, find nearest acceptable third between staff lines (or staff line)\n        step = (Math.floor((1.5 * y) / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\n        // find nearest acceptable third between staff lines (or staff line)\n        if (Math.abs(step) % 2 === 1) {\n          // if it was a staff line, we need to adjust\n          if (Math.abs(step) < 4 || ledgerLine.staffPosition === -step) {\n            step -= 2 / 3;\n          } else {\n            // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n            step -= 1 / 3;\n          }\n        }\n      }\n    }\n\n    y = step * ctxt.staffInterval;\n\n    var width = this.note.bounds.width;\n    var x = this.note.bounds.x;\n\n    // The porrectus requires special handling of the note width,\n    // otherwise the width is just that of the note itself\n    if (\n      glyphCode === GlyphCode.Porrectus1 ||\n      glyphCode === GlyphCode.Porrectus2 ||\n      glyphCode === GlyphCode.Porrectus3 ||\n      glyphCode === GlyphCode.Porrectus4\n    )\n      width = ctxt.staffInterval;\n    else if (glyphCode === GlyphCode.None) {\n      width = ctxt.staffInterval;\n      x -= width;\n    } else if (punctumInclinatumShorten) {\n      width *= 2 / 3;\n      x += 0.5 * width;\n    } else if (glyphCode === GlyphCode.PunctumInclinatumLiquescent) {\n      width *= 2 / 3;\n      x += 0.25 * width;\n    }\n\n    // also, the position hint can affect the x/width of the episema\n    if (this.alignment === HorizontalEpisemaAlignment.Left) {\n      width *= 0.8;\n    } else if (this.alignment === HorizontalEpisemaAlignment.Center) {\n      x += width * 0.1;\n      width *= 0.8;\n    } else if (this.alignment === HorizontalEpisemaAlignment.Right) {\n      x += width * 0.2;\n      width *= 0.8;\n    }\n\n    this.bounds.x = x;\n    this.bounds.y = y - ctxt.episemaLineWeight / 2;\n    this.bounds.width = width;\n    this.bounds.height = ctxt.episemaLineWeight;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      this.bounds.width,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: this.bounds.width,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"horizontalEpisema\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\n/*\n * Ictus\n */\nexport class Ictus extends GlyphVisualizer {\n  constructor(ctxt, note) {\n    super(ctxt, GlyphCode.VerticalEpisemaAbove);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Default;\n  }\n\n  performLayout(ctxt) {\n    var glyphCode = this.note.glyphVisualizer.glyphCode;\n    // we have to place the ictus further from the note in some cases to avoid a collision with an episema on the same note:\n    var positionHint = this.positionHint || MarkingPositionHint.Below;\n    var staffPosition =\n      this.note.staffPosition +\n      (positionHint === MarkingPositionHint.Above ? 1 : -1);\n    var collisionWithEpisema =\n      this.note.episemata.length > 0 &&\n      (this.note.episemata[0].positionHint || MarkingPositionHint.Above) ===\n        positionHint;\n    var horizontalOffset;\n    var verticalOffset = 1;\n    var shortOffset = -0.2;\n    var extraOffset = 0;\n    var collisionWithStaffLine =\n      staffPosition % 2 &&\n      (Math.abs(staffPosition) < 4 ||\n        (this.note.neume.ledgerLines[0] || {}).staffPosition === staffPosition);\n\n    // The porrectus requires special handling of the note width,\n    // otherwise the width is just that of the note itself\n    if (\n      glyphCode === GlyphCode.Porrectus1 ||\n      glyphCode === GlyphCode.Porrectus2 ||\n      glyphCode === GlyphCode.Porrectus3 ||\n      glyphCode === GlyphCode.Porrectus4\n    )\n      horizontalOffset = ctxt.staffInterval / 2;\n    else if (glyphCode === GlyphCode.None) {\n      horizontalOffset = -ctxt.staffInterval / 2;\n    } else {\n      horizontalOffset = this.note.bounds.width / 2;\n      if (\n        glyphCode === GlyphCode.PunctumInclinatum &&\n        !collisionWithStaffLine &&\n        !collisionWithEpisema\n      ) {\n        extraOffset = 0.3;\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Above) {\n      glyphCode = GlyphCode.VerticalEpisemaAbove;\n      verticalOffset *= -1;\n    } else {\n      glyphCode = GlyphCode.VerticalEpisemaBelow;\n    }\n    if (collisionWithEpisema) {\n      extraOffset = 0.4;\n    }\n    verticalOffset *=\n      ctxt.staffInterval *\n      (extraOffset + (collisionWithStaffLine ? 0.3 : shortOffset));\n\n    this.setGlyph(ctxt, glyphCode);\n    this.setStaffPosition(ctxt, staffPosition);\n\n    this.bounds.x = this.note.bounds.x + horizontalOffset - this.origin.x;\n    this.bounds.y += verticalOffset;\n  }\n}\n\n/*\n * Mora\n */\nexport class Mora extends GlyphVisualizer {\n  constructor(ctxt, note) {\n    super(ctxt, GlyphCode.Mora);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Default;\n    this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n  }\n\n  performLayout(ctxt) {\n    this.setGlyph(ctxt, this.glyphCode);\n    this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n    var staffPosition = this.note.staffPosition;\n\n    this.setStaffPosition(ctxt, staffPosition);\n\n    var verticalOffset = 0;\n    // First, we need to find the next note in the neume.\n    var noteIndex = this.note.neume.notes.indexOf(this.note);\n    var nextNote;\n    if (noteIndex >= 0) {\n      ++noteIndex;\n      if (this.note.neume.notes.length > noteIndex) {\n        nextNote = this.note.neume.notes[noteIndex];\n        if (\n          nextNote.morae &&\n          nextNote.morae.length &&\n          this.note.neume.notes.length === noteIndex + 1\n        ) {\n          // this note is the second to last in its neume, and the last note also has a mora\n          this.horizontalOffset +=\n            nextNote.bounds.right() - this.note.bounds.right();\n        } else if (nextNote.bounds.right() > this.note.bounds.right()) {\n          // center the dot over the following note.\n          this.horizontalOffset =\n            (nextNote.bounds.right() -\n              this.note.bounds.right() -\n              this.bounds.right()) /\n            2;\n        } else {\n          nextNote = null;\n        }\n      } else if (this.note.neume.notes.length === noteIndex) {\n        // this note is the last in its neume:\n        if (this.note.neume.trailingSpace === 0) {\n          // if this was the last note in its neume, we only care about the next note if there is no trailing space at the end of this neume.\n          var notationIndex = this.note.neume.score.notations.indexOf(\n            this.note.neume\n          );\n          if (notationIndex >= 0) {\n            var nextNotation = this.note.neume.score.notations[\n              notationIndex + 1\n            ];\n            if (nextNotation && nextNotation.notes) {\n              nextNote = nextNotation.notes[0];\n            }\n          }\n        } else if (this.note.shape !== NoteShape.Inclinatum) {\n          this.note.neume.calculatedTrailingSpace += this.origin.x;\n        }\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Above) {\n      if (staffPosition % 2 === 0) verticalOffset -= ctxt.staffInterval * 1.75;\n      else verticalOffset -= ctxt.staffInterval * 0.75;\n    } else if (this.positionHint === MarkingPositionHint.Below) {\n      if (staffPosition % 2 === 0) verticalOffset += ctxt.staffInterval * 1.75;\n      else verticalOffset += ctxt.staffInterval * 0.75;\n    } else {\n      if (staffPosition % 2 === 0) {\n        // if the note is in a space and followed by a note on the line below, we often want to move the mora dot up slightly so that it is centered\n        // between the top of the note's space and the top of the following note.\n        if (nextNote && nextNote.staffPosition === staffPosition - 1) {\n          verticalOffset -= ctxt.staffInterval * 0.25;\n        }\n      } else {\n        verticalOffset -= ctxt.staffInterval * 0.75;\n      }\n    }\n    this.bounds.x = this.horizontalOffset + this.note.bounds.right();\n    this.bounds.y += verticalOffset;\n  }\n}\n\n// indicates the shape of the brace\nexport var BraceShape = {\n  RoundBrace: 0,\n  CurlyBrace: 1,\n  AccentedCurlyBrace: 2\n};\n\n// indicates how the brace is alignerd to the note to which it's connected\nexport var BraceAttachment = {\n  Left: 0,\n  Right: 1\n};\n\nexport class BracePoint extends ChantLayoutElement {\n  constructor(note, isAbove, shape, attachment) {\n    super();\n\n    this.note = note;\n    this.isAbove = isAbove;\n    this.shape = shape;\n    this.attachment = attachment;\n  }\n\n  getAttachmentX(note) {\n    if (!note) note = this.note;\n    if (this.attachment === BraceAttachment.Left)\n      return (note.neume ? note.neume.bounds.x : 0) + note.bounds.x;\n    else return (note.neume ? note.neume.bounds.x : 0) + note.bounds.right();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Markings.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { Step } from \"./Exsurge.Core.js\";\nimport {\n  ChantNotationElement, DividerLineVisualizer, GlyphCode,\n  GlyphVisualizer\n} from \"./Exsurge.Drawing.js\";\n\n/*\n *\n */\nexport class Custos extends ChantNotationElement {\n  // if auto is true, then the custos will automatically try to determine it's height based on\n  // subsequent notations\n  constructor(auto = false) {\n    super();\n    this.auto = auto;\n    this.staffPosition = 0; // default sane value\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    if (this.auto) {\n      var neume = ctxt.findNextNeume();\n\n      if (neume)\n        this.staffPosition = ctxt.activeClef.pitchToStaffPosition(\n          neume.notes[0].pitch\n        );\n\n      // in case there was a weird fa/do clef change, let's sanitize the staffPosition by making sure it is\n      // within reasonable bounds\n      while (this.staffPosition < -6) this.staffPosition += 7;\n\n      while (this.staffPosition > 6) this.staffPosition -= 7;\n    }\n\n    var glyph = new GlyphVisualizer(\n      ctxt,\n      Custos.getGlyphCode(this.staffPosition)\n    );\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n\n  // called when layout has changed and our dependencies are no longer good\n  resetDependencies() {\n    // we only need to resolve new dependencies if we're an automatic custos\n    if (this.auto) this.needsLayout = true;\n  }\n\n  static getGlyphCode(staffPosition) {\n    if (staffPosition <= 2) {\n      // ascending custodes\n      if (Math.abs(staffPosition) % 2 === 1) return GlyphCode.CustosLong;\n      else return GlyphCode.CustosShort;\n    } else {\n      // descending custodes\n      if (Math.abs(staffPosition) % 2 === 1) return GlyphCode.CustosDescLong;\n      else return GlyphCode.CustosDescShort;\n    }\n  }\n}\n\n/*\n * Divider\n */\nexport class Divider extends ChantNotationElement {\n  constructor() {\n    super();\n\n    this.isDivider = true;\n    this.resetsAccidentals = true;\n  }\n}\n\n/*\n * QuarterBar\n */\nexport class QuarterBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    this.addVisualizer(new DividerLineVisualizer(ctxt, 2, 4, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * HalfBar\n */\nexport class HalfBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, -2, 2, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * FullBar\n */\nexport class FullBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, -3, 3, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Insertion Cursor\n */\nexport class InsertionCursor extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, -4, 4));\n\n    this.origin.x = this.bounds.width / 2;\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * DominicanBar\n */\nexport class DominicanBar extends Divider {\n  constructor(staffPosition) {\n    super();\n    staffPosition--;\n    var parity = staffPosition % 2;\n\n    this.staffPosition = staffPosition - 2 * parity;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    this.addVisualizer(\n      new DividerLineVisualizer(\n        ctxt,\n        this.staffPosition - 3,\n        this.staffPosition,\n        this\n      )\n    );\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * DoubleBar\n */\nexport class DoubleBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var line0 = new DividerLineVisualizer(ctxt, -3, 3, this);\n    line0.bounds.x = 0;\n    this.addVisualizer(line0);\n\n    var line1 = new DividerLineVisualizer(ctxt, -3, 3, this);\n    line1.bounds.x = ctxt.intraNeumeSpacing * 2 - line1.bounds.width;\n    this.addVisualizer(line1);\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\nexport const AccidentalType = {\n  Flat: -1,\n  Natural: 0,\n  Sharp: 1\n};\n\n/*\n * Accidental\n */\nexport class Accidental extends ChantNotationElement {\n  constructor(staffPosition, accidentalType) {\n    super();\n    this.isAccidental = true;\n    this.keepWithNext = true; // accidentals should always stay connected...\n\n    this.staffPosition = staffPosition;\n    this.accidentalType = accidentalType;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(this.createGlyphVisualizer(ctxt));\n\n    this.finishLayout(ctxt);\n  }\n\n  // creation of the glyph visualizer is refactored out or performLayout\n  // so that clefs can use the same logic for their accidental glyph\n  createGlyphVisualizer(ctxt) {\n    var glyphCode = GlyphCode.Flat;\n\n    switch (this.accidentalType) {\n      case AccidentalType.Natural:\n        glyphCode = GlyphCode.Natural;\n        break;\n      case AccidentalType.Sharp:\n        glyphCode = GlyphCode.Sharp;\n        break;\n      default:\n        glyphCode = GlyphCode.Flat;\n        break;\n    }\n\n    var glyph = new GlyphVisualizer(ctxt, glyphCode);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n\n    return glyph;\n  }\n\n  adjustStep(step) {\n    switch (this.accidentalType) {\n      case AccidentalType.Flat:\n        if (step === Step.Ti) return Step.Te;\n        if (step === Step.Mi) return Step.Me;\n        break;\n      case AccidentalType.Sharp:\n        if (step === Step.Do) return Step.Du;\n        if (step === Step.Fa) return Step.Fu;\n        break;\n      case AccidentalType.Natural:\n        if (step === Step.Te) return Step.Ti;\n        if (step === Step.Me) return Step.Mi;\n        if (step === Step.Du) return Step.Do;\n        if (step === Step.Fu) return Step.Fa;\n        break;\n    }\n\n    // no adjustment needed\n    return step;\n  }\n\n  applyToPitch(pitch) {\n    // no adjusment needed\n    if (this.pitch.octave !== pitch.octave) return;\n\n    pitch.step = this.adjustStep(pitch.step);\n  }\n}\n\n/*\n * Virgula\n */\nexport class Virgula extends Divider {\n  constructor() {\n    super();\n\n    // unlike other dividers a virgula does not reset accidentals\n    this.resetsAccidentals = false;\n\n    // the staff position of the virgula is customizable, so that it\n    // can be placed on different lines (top or bottom) depending on the\n    // notation tradition of what is being notated (e.g., Benedictine has it\n    //  on top line, Norbertine at the bottom)\n    this.staffPosition = 3;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.Virgula);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n\n    this.addVisualizer(glyph);\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Signs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  Units,\n  Pitch,\n  Point,\n  Rect,\n  Margins,\n  Size,\n  Step\n} from \"./Exsurge.Core.js\";\nimport {\n  MarkingPositionHint,\n  LyricType,\n  Lyric,\n  LyricArray,\n  AboveLinesText,\n  ChoralSign,\n  TranslationText,\n  DefaultTrailingSpace,\n  GlyphCode\n} from \"./Exsurge.Drawing.js\";\nimport {\n  Note,\n  LiquescentType,\n  NoteShape,\n  NoteShapeModifiers,\n  ChantMapping,\n  ChantScore,\n  ChantDocument,\n  Clef,\n  DoClef,\n  FaClef,\n  TextOnly,\n  ChantLineBreak\n} from \"./Exsurge.Chant.js\";\nimport * as Markings from \"./Exsurge.Chant.Markings.js\";\nimport * as Signs from \"./Exsurge.Chant.Signs.js\";\nimport * as Neumes from \"./Exsurge.Chant.Neumes.js\";\n\n// reusable reg exps\nvar __syllablesRegex = /(?=\\S)((?:<v>[\\s\\S]*<\\/v>|[^(])*)(?:\\(?([^)]*)\\)?)?/g\nvar __altTranslationRegex = /<alt>(.*?)<\\/alt>|\\[(alt:)?(.*?)\\]/g;\n\nvar __notationsRegex = /z0|z|Z|::|:|[,;][1-6]?|`|[cf][1-4]|cb[1-4]|\\/+| |\\!|-?[a-mA-M][oOwWvVrRsxy#~\\+><_\\.'012345]*(?:\\[[^\\]]*\\]?)*|\\{([^}]+)\\}?/g;\nvar __notationsRegex_group_insideBraces = 1;\n\nvar __bracketedCommandRegex = /^([a-z]+):(.*)/;\n\n// for the brace string inside of [ and ] in notation data\n// the capturing groups are:\n//  1. o or u, to indicate over or under\n//  2. b, cb, or cba, to indicate the brace type\n//  3. 0 or 1 to indicate the attachment point\n//  4. { or } to indicate opening/closing (this group will be null if the metric version is used)\n//  5. a float indicating the millimeter length of the brace (not supported yet)\nvar __braceSpecRegex = /([ou])(b|cb|cba):([01])(?:([{}])|;(\\d*(?:\\.\\d+)?)mm)/;\n\nconst TrailingSpaceForAccidental = ctxt =>\n  ctxt.intraNeumeSpacing * ctxt.accidentalSpaceMultiplier;\nconst TrailingSpaceMultiple = multiplier => ctxt =>\n  ctxt.intraNeumeSpacing * multiplier;\n\nconst regexHeaderEnd = /(?:^|\\n)%%\\s?\\n/;\nconst regexHeaderLine = /^([\\w-_.]+):\\s*((?:[^;\\r\\n]|;[ \\t])*)(?:;|$)/i;\nconst regexHeaderComment = /^%.*/;\nexport class GabcHeader {\n  static getLength(gabc) {\n    let match = gabc.match(regexHeaderEnd);\n    return match ? match.index + match[0].length : 0;\n  }\n\n  constructor(text) {\n    if (typeof text !== \"string\") text = \"\";\n    this.comments = [];\n    this.cValues = {};\n    this.original = \"\";\n    let match = text.match(regexHeaderEnd);\n    if (match) {\n      let txtHeader = (this.original = text.slice(\n        0,\n        match.index + match[0].length\n      ));\n      var lines = txtHeader.split(/\\r?\\n/g);\n      for (var i = 0; i < lines.length; ++i) {\n        let line = lines[i],\n          match = regexHeaderLine.exec(line);\n        if (match) {\n          var key = match[1].replace(/-([a-z])/g, function(a, letter) {\n            return letter.toUpperCase();\n          });\n          if (this[match[1]]) {\n            var arrayName = match[1] + \"Array\";\n            if (!this[arrayName]) {\n              this[arrayName] = [this[match[1]]];\n            }\n            this[arrayName].push(match[2]);\n          } else {\n            this[match[1]] = match[2];\n          }\n          if (key !== match[1]) this[key] = this[match[1]];\n        } else if ((match = regexHeaderComment.exec(line))) {\n          if (line !== \"%%\") {\n            match = regexHeaderLine.exec(line.slice(1));\n            if (match) {\n              let key = match[1].replace(/-([a-z])/g, function(a, letter) {\n                return letter.toUpperCase();\n              });\n              this.cValues[match[1]] = match[2];\n              if (key !== match[1]) this.cValues[key] = match[2];\n            } else {\n              this.comments[i] = line;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  toString() {\n    var result = [];\n    for (let key in this) {\n      if (\n        typeof this[key] !== \"string\" ||\n        /^(length|original|comments|cValues)$/.test(key)\n      ) {\n        continue;\n      }\n      var alternateKey = key.replace(/[A-Z]/g, function(letter) {\n        return \"-\" + letter.toLowerCase();\n      });\n      if (alternateKey !== key && alternateKey in this) continue;\n      var array = this[key + \"Array\"];\n      if (array) {\n        for (var i = 0; i < array.length; ++i) {\n          result.push(key + \": \" + array[i] + \";\");\n        }\n      } else {\n        result.push(key + \": \" + this[key] + \";\");\n      }\n    }\n    for (let key in this.cValues) {\n      if (key.length === 0 || !this.cValues.hasOwnProperty(key)) continue;\n      result.push(\"%\" + key + \": \" + this.cValues[key] + \";\");\n    }\n    for (let i in this.comments) {\n      if (!this.comments.hasOwnProperty(i)) continue;\n      try {\n        result.splice(i, 0, this.comments[i]);\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    return result.join(\"\\n\") + \"\\n%%\\n\";\n  }\n}\n\nvar elementCountForNotations = items =>\n  items.reduce((sum, item) => sum + (item.notes ? item.notes.length : 1), 0);\n\nexport class Gabc {\n  // takes gabc source code (without the header info) and returns an array\n  // of ChantMappings describing the chant. A chant score can then be created\n  // fron the chant mappings and later updated via updateMappings() if need\n  // be...\n  static createMappingsFromSource(ctxt, gabcSource) {\n    var headerLength = GabcHeader.getLength(gabcSource);\n    gabcSource = gabcSource.slice(headerLength);\n    var words = this.splitWords(gabcSource);\n\n    // set the default clef\n    ctxt.activeClef = Clef.default();\n\n    var mappings = this.createMappingsFromWords(\n      ctxt,\n      words,\n      clef => (ctxt.activeClef = clef)\n    );\n\n    // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n    if (\n      mappings.length > 0 &&\n      mappings[mappings.length - 1].notations.length > 0\n    )\n      mappings[mappings.length - 1].notations[\n        mappings[mappings.length - 1].notations.length - 1\n      ].trailingSpace = 0;\n\n    return mappings;\n  }\n\n  // A simple general purpose diff algorithm adapted here for comparing\n  // an array of existing mappings with an updated list of gabc words.\n  // note before is an array of mappings, and after is an array of strings\n  // (gabc words).\n  //\n  // This is definitely not the most effecient diff algorithm, but for our\n  // limited needs and source size it seems to work just fine...\n  //\n  // code is adapted from: https://github.com/paulgb/simplediff\n  //\n  // Returns:\n  //   A list of pairs, with the first part of the pair being one of three\n  //   strings ('-', '+', '=') and the second part being a list of values from\n  //   the original before and/or after lists. The first part of the pair\n  //   corresponds to whether the list of values is a deletion, insertion, or\n  //   unchanged, respectively.\n  static diffDescriptorsAndNewWords(before, after) {\n    // Create a map from before values to their indices\n    var oldIndexMap = {},\n      i;\n    for (i = 0; i < before.length; i++) {\n      oldIndexMap[before[i].source] = oldIndexMap[before[i].source] || [];\n      oldIndexMap[before[i].source].push(i);\n    }\n\n    var overlap = [],\n      startOld,\n      startNew,\n      subLength,\n      inew;\n\n    startOld = startNew = subLength = 0;\n\n    for (inew = 0; inew < after.length; inew++) {\n      var _overlap = [];\n      oldIndexMap[after[inew]] = oldIndexMap[after[inew]] || [];\n      for (i = 0; i < oldIndexMap[after[inew]].length; i++) {\n        var iold = oldIndexMap[after[inew]][i];\n        // now we are considering all values of val such that\n        // `before[iold] == after[inew]`\n        _overlap[iold] = ((iold && overlap[iold - 1]) || 0) + 1;\n        if (_overlap[iold] > subLength) {\n          // this is the largest substring seen so far, so store its indices\n          subLength = _overlap[iold];\n          startOld = iold - subLength + 1;\n          startNew = inew - subLength + 1;\n        }\n      }\n      overlap = _overlap;\n    }\n\n    if (subLength === 0) {\n      // If no common substring is found, we return an insert and delete...\n      var result = [];\n\n      if (before.length) result.push([\"-\", before]);\n\n      if (after.length) result.push([\"+\", after]);\n\n      return result;\n    }\n\n    // ...otherwise, the common substring is unchanged and we recursively\n    // diff the text before and after that substring\n    return [].concat(\n      this.diffDescriptorsAndNewWords(\n        before.slice(0, startOld),\n        after.slice(0, startNew)\n      ),\n      [[\"=\", after.slice(startNew, startNew + subLength)]],\n      this.diffDescriptorsAndNewWords(\n        before.slice(startOld + subLength),\n        after.slice(startNew + subLength)\n      )\n    );\n  }\n\n  // this function essentially performs and applies a rudimentary diff between a\n  // previously parsed set of mappings and between a new gabc source text.\n  // the mappings array passed in is changed in place to be updated from the\n  // new source\n  static updateMappingsFromSource(\n    ctxt,\n    mappings,\n    newGabcSource,\n    insertionIndex = null,\n    oldInsertionIndex = null\n  ) {\n    var headerLength = GabcHeader.getLength(newGabcSource);\n    newGabcSource = newGabcSource.slice(headerLength);\n    // always remove the last old mapping since it's spacing/trailingSpace is handled specially\n    mappings.pop();\n\n    if (insertionIndex === null) {\n      insertionIndex = NaN;\n    }\n    if (oldInsertionIndex === null) {\n      oldInsertionIndex = NaN;\n    }\n\n    var newWords = this.splitWords(newGabcSource);\n\n    var results = this.diffDescriptorsAndNewWords(mappings, newWords);\n\n    var index = 0,\n      j,\n      k,\n      l,\n      sourceIndex = 0,\n      wordLength = 0,\n      mapping,\n      elementIndex = 0;\n\n    ctxt.activeClef = Clef.default();\n\n    // apply the results to the mappings, marking notations that need to be processed\n    var lastTranslationNeumes = [];\n    for (var i = 0; i < results.length; i++) {\n      var resultCode = results[i][0];\n      var resultValues = results[i][1];\n\n      if (index > 0)\n        sourceIndex =\n          mappings[index - 1].sourceIndex +\n          mappings[index - 1].source.length +\n          1;\n      if (resultCode === \"=\") {\n        var sourceIndexDiff = sourceIndex - mappings[index].sourceIndex;\n        // skip over ones that haven't changed, but updating the clef and source\n        // index (and pitch in case clef or accidentals have changed) as we go\n        for (j = 0; j < resultValues.length; j++, index++) {\n          mapping = mappings[index];\n          if (\n            elementIndex === 0 &&\n            mapping.notations.length &&\n            mapping.notations[0].isClef\n          ) {\n            // the first clef doesn't get kept as a notation:\n            elementIndex = -1;\n          }\n          if (\n            insertionIndex >= elementIndex ||\n            oldInsertionIndex >= elementIndex\n          ) {\n            // check if the insertion index is within this mapping:\n            let elementCount = elementCountForNotations(mapping.notations);\n            if (\n              (insertionIndex >= elementIndex &&\n                insertionIndex < elementIndex + elementCount) ||\n              (oldInsertionIndex >= elementIndex &&\n                oldInsertionIndex < elementIndex + elementCount)\n            ) {\n              // re-do this mapping:\n              // TODO: check sourceIndex\n              let sourceIndex = mapping.sourceIndex + sourceIndexDiff;\n              mapping = this.createMappingFromWord(\n                ctxt,\n                resultValues[j],\n                sourceIndex,\n                lastTranslationNeumes,\n                insertionIndex - elementIndex\n              );\n              mappings.splice(index, 1, mapping);\n\n              elementIndex += elementCount;\n              continue;\n            }\n            elementIndex += elementCount;\n          }\n          mapping.sourceIndex += sourceIndexDiff;\n          for (k = 0; k < mapping.notations.length; k++) {\n            var curNotation = mapping.notations[k];\n            var prevIsAccidental =\n              mapping.notations[k - 1] && mapping.notations[k - 1].isAccidental;\n            // notify the notation that its dependencies are no longer valid\n            curNotation.resetDependencies();\n\n            if (curNotation.isClef) {\n              ctxt.activeClef = mappings[index].notations[k];\n            }\n\n            if (curNotation.isAccidental) {\n              ctxt.activeClef.activeAccidental = curNotation;\n            } else if (\n              curNotation.resetsAccidentals ||\n              (!prevIsAccidental &&\n                curNotation.hasLyrics() &&\n                curNotation.lyrics[0].lyricType <= LyricType.BeginningSyllable)\n            ) {\n              ctxt.activeClef.resetAccidentals();\n            }\n\n            // update source index, pitch, and automatic braces\n            if (curNotation.notes) {\n              for (l = 0; l < curNotation.notes.length; ++l) {\n                let note = curNotation.notes[l];\n                note.sourceIndex += sourceIndexDiff;\n                note.pitch = ctxt.activeClef.staffPositionToPitch(\n                  note.staffPosition\n                );\n                if (note.braceEnd && note.braceEnd.automatic)\n                  delete note.braceEnd;\n                if (this.needToEndBrace && !note.braceStart && !note.braceEnd) {\n                  note.braceEnd = new Markings.BracePoint(\n                    note,\n                    this.needToEndBrace.isAbove,\n                    this.needToEndBrace.shape,\n                    this.needToEndBrace.attachment ===\n                    Markings.BraceAttachment.Left\n                      ? Markings.BraceAttachment.Right\n                      : Markings.BraceAttachment.Left\n                  );\n                  note.braceEnd.automatic = true;\n                  delete this.needToEndBrace;\n                } else if (note.braceStart && note.braceStart.automatic) {\n                  this.needToEndBrace = note.braceStart;\n                }\n              }\n            }\n            if (curNotation.translationText) {\n              for (l = 0; l < curNotation.translationText.length; ++l) {\n                let transText = curNotation.translationText[l];\n                delete transText.endNeume;\n                curNotation.translationText[l].sourceIndex += sourceIndexDiff;\n                if (\n                  transText.textAnchor === \"end\" &&\n                  lastTranslationNeumes[0]\n                ) {\n                  let lastTranslationText =\n                    lastTranslationNeumes[0].translationText[l];\n                  if (lastTranslationText)\n                    lastTranslationText.endNeume = curNotation;\n                }\n              }\n              lastTranslationNeumes[0] = curNotation;\n            }\n            if (sourceIndexDiff) {\n              if (typeof curNotation.sourceIndex === \"number\") {\n                curNotation.sourceIndex += sourceIndexDiff;\n              }\n              for (l = 0; l < curNotation.lyrics.length; ++l) {\n                curNotation.lyrics[l].sourceIndex += sourceIndexDiff;\n              }\n              if (curNotation.alText) {\n                for (l = 0; l < curNotation.alText.length; ++l) {\n                  curNotation.alText[l].sourceIndex += sourceIndexDiff;\n                }\n              }\n            }\n          }\n        }\n      } else if (resultCode === \"-\") {\n        // delete elements that no longer exist, but first notify all\n        // elements of the change\n        mappings.splice(index, resultValues.length);\n      } else if (resultCode === \"+\") {\n        // insert new ones\n        for (j = 0; j < resultValues.length; j++) {\n          wordLength = resultValues[j].length + 1;\n          mapping = this.createMappingFromWord(\n            ctxt,\n            resultValues[j],\n            sourceIndex,\n            lastTranslationNeumes,\n            insertionIndex - elementIndex\n          );\n\n          if (\n            elementIndex === 0 &&\n            mapping.notations.length &&\n            mapping.notations[0].isClef\n          ) {\n            // the first clef doesn't get kept as a notation:\n            elementIndex = -1;\n            let elementCount = elementCountForNotations(mapping.notations);\n            if (insertionIndex < elementCount) {\n              // re-do the first mapping, because it was broken up incorrectly, due to the presence of the initial clef\n              mapping = this.createMappingFromWord(\n                ctxt,\n                resultValues[j],\n                sourceIndex,\n                lastTranslationNeumes,\n                insertionIndex - elementIndex\n              );\n            }\n          }\n\n          for (k = 0; k < mapping.notations.length; k++) {\n            let curNotation = mapping.notations[k];\n            elementIndex += curNotation.notes ? curNotation.notes.length : 1;\n            if (curNotation.isClef) {\n              ctxt.activeClef = mapping.notations[k];\n            }\n          }\n\n          mappings.splice(index++, 0, mapping);\n          sourceIndex += wordLength;\n        }\n      }\n    }\n\n    // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n    if (\n      mappings.length > 0 &&\n      mappings[mappings.length - 1].notations.length > 0\n    )\n      mappings[mappings.length - 1].notations[\n        mappings[mappings.length - 1].notations.length - 1\n      ].trailingSpace = 0;\n\n    return headerLength;\n  }\n\n  // takes an array of gabc words (like that returned by splitWords below)\n  // and returns an array of ChantMapping objects, one for each word.\n  static createMappingsFromWords(ctxt, words) {\n    var mappings = [];\n    var sourceIndex = 0,\n      wordLength = 0,\n      lastTranslationNeumes = [];\n\n    for (var i = 0; i < words.length; i++) {\n      sourceIndex += wordLength;\n      wordLength = words[i].length + 1;\n      var word = words[i].trim();\n\n      if (word === \"\") continue;\n\n      var mapping = this.createMappingFromWord(\n        ctxt,\n        word,\n        sourceIndex,\n        lastTranslationNeumes\n      );\n\n      if (mapping) mappings.push(mapping);\n    }\n\n    return mappings;\n  }\n\n  // takes a gabc word (like those returned by splitWords below) and returns\n  // a ChantMapping object that contains the gabc word source text as well\n  // as the generated notations.\n  static createMappingFromWord(\n    ctxt,\n    word,\n    sourceIndex,\n    lastTranslationNeumes,\n    insertionIndex\n  ) {\n    var matches = [];\n    var notations = [];\n    var currSyllable = 0;\n\n    while ((match = __syllablesRegex.exec(word))) matches.push(match);\n\n    for (var j = 0; j < matches.length; j++) {\n      var match = matches[j];\n\n      var lyricText = match[1].replace(\n        /(^|<\\/sp>)([\\s\\S]*?)($|<sp>)/g,\n        (_, pre, main, post) => `${pre}${main.replace(/~/g, \" \")}${post}`\n      );\n      var alText = [];\n      var translationText = [];\n      var notationData = match[2];\n\n      // new words reset the accidentals, per the Solesmes style (see LU xviij)\n      // but we need to also make sure that there _is_ a word and that it has notes associated with it.\n      if (\n        currSyllable === 0 &&\n        /[a-z]/i.test(lyricText) &&\n        /[a-m]/i.test(notationData)\n      )\n        ctxt.activeClef.resetAccidentals();\n\n      var items = this.parseNotations(\n        ctxt,\n        notationData,\n        sourceIndex + match.index + match[1].length + 1,\n        insertionIndex\n      );\n\n      if (items.length === 0) continue;\n\n      if (insertionIndex >= 0)\n        insertionIndex -= elementCountForNotations(items);\n\n      items[0].firstOfSyllable = !!lyricText;\n      items[0].firstOfParentheses = true;\n      notations.push(...items);\n\n      // add the lyrics and/or alText to the first notation that makes sense...\n      var notationWithLyrics = null;\n      for (var i = 0; i < items.length; i++) {\n        var cne = items[i];\n\n        if (cne.isAccidental && i + 1 < items.length) continue;\n\n        notationWithLyrics = cne;\n        break;\n      }\n\n      var m = __altTranslationRegex.exec();\n      let indexOffset = 0;\n      while ((m = __altTranslationRegex.exec(lyricText))) {\n        let index = m.index;\n        lyricText =\n          lyricText.slice(0, index) + lyricText.slice(index + m[0].length);\n        index += sourceIndex + indexOffset + 1;\n        if (typeof m[1] === \"string\") {\n          let elem = new AboveLinesText(\n            ctxt,\n            m[1],\n            notationWithLyrics,\n            index + 4\n          );\n          elem.alIndex = alText.push(elem) - 1;\n        } else if (typeof m[2] === \"string\") {\n          let elem = new AboveLinesText(\n            ctxt,\n            m[3],\n            notationWithLyrics,\n            index + m[2].length\n          );\n          elem.alIndex = alText.push(elem) - 1;\n        } else {\n          let elem = new TranslationText(ctxt, m[3], notationWithLyrics, index);\n          elem.translationIndex = translationText.push(elem) - 1;\n        }\n        indexOffset += m[0].length;\n        __altTranslationRegex.exec();\n      }\n      if (lyricText === \"\" && alText.length === 0) continue;\n\n      if (notationWithLyrics === null)\n        return new ChantMapping(word, notations, sourceIndex);\n\n      if (alText.length) notationWithLyrics.alText = alText;\n\n      if (translationText.length) {\n        notationWithLyrics.translationText = translationText;\n        for (i = 0; i < translationText.length; ++i) {\n          let transText = translationText[i];\n          if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n            let lastTranslationText =\n              lastTranslationNeumes[0].translationText[i];\n            if (lastTranslationText)\n              lastTranslationText.endNeume = notationWithLyrics;\n          }\n        }\n        lastTranslationNeumes[0] = notationWithLyrics;\n      }\n\n      if (lyricText === \"\") continue;\n\n      var proposedLyricType;\n\n      // if it's not a neume or a TextOnly notation, then make the lyrics a directive\n      if (!cne.isNeume && cne.constructor !== TextOnly)\n        proposedLyricType = LyricType.Directive;\n      // otherwise trye to guess the lyricType for the first lyric anyway\n      else if (currSyllable === 0 && j === matches.length - 1)\n        proposedLyricType = LyricType.SingleSyllable;\n      else if (currSyllable === 0 && j < matches.length - 1)\n        proposedLyricType = LyricType.BeginningSyllable;\n      else if (j === matches.length - 1)\n        proposedLyricType = LyricType.EndingSyllable;\n      else proposedLyricType = LyricType.MiddleSyllable;\n\n      currSyllable++;\n\n      var lyrics = this.createSyllableLyrics(\n        ctxt,\n        lyricText,\n        proposedLyricType,\n        notationWithLyrics,\n        items,\n        sourceIndex + match.index\n      );\n\n      if (lyrics === null || lyrics.length === 0) continue;\n\n      notationWithLyrics.lyrics = lyrics;\n    }\n\n    return new ChantMapping(word, notations, sourceIndex);\n  }\n\n  // returns an array of lyrics (an array because each syllable can have multiple lyrics)\n  static createSyllableLyrics(\n    ctxt,\n    text,\n    proposedLyricType,\n    notation,\n    notations,\n    sourceIndex\n  ) {\n    var lyrics = [];\n\n    // an extension to gabc: multiple lyrics per syllable can be separated by a |\n    var lyricTexts = text.split(\"|\");\n\n    for (var i = 0; i < lyricTexts.length; i++) {\n      var lyricText = lyricTexts[i];\n\n      if (i > 0) {\n        if (lyricText.match(/\\s$/)) {\n          lyricText = lyricText.replace(/s+$/, \"\");\n          proposedLyricType = LyricType.EndingSyllable;\n        } else {\n          proposedLyricType = LyricType.MiddleSyllable;\n        }\n      }\n\n      // gabc allows lyrics to indicate the centering part of the text by\n      // using braces to indicate how to center the lyric. So a lyric can\n      // look like \"f{i}re\" or \"{fenced}\" to center on the i or on the entire\n      // word, respectively. Here we determine if the lyric should be spaced\n      // manually with this method of using braces.\n      // however, we don't want to consider any braces inside of v tags, so we\n      // do a bit of text processing here:\n      var lyricTextWithoutVTags = lyricText;\n      const vtagRegex = /<v>[\\s\\S]*?<\\/v>/;\n      let match;\n      const vtags = [];\n      while ((match = vtagRegex.exec(lyricTextWithoutVTags))) {\n        let index = match.index;\n        let length = match[0].length;\n        vtags[index] = length;\n        lyricTextWithoutVTags = lyricTextWithoutVTags.slice(0, index) + lyricTextWithoutVTags.slice(index + length);\n      }\n      var centerStartIndex = lyricTextWithoutVTags.indexOf(\"{\");\n      var centerLength = 0;\n\n      if (centerStartIndex >= 0) {\n        let indexClosingBracket = lyricTextWithoutVTags.indexOf(\"}\");\n\n        if (\n          indexClosingBracket >= 0 &&\n          indexClosingBracket > centerStartIndex\n        ) {\n          const getTrueIndex = (indexWithoutVTags) => {\n            // map indices back to the lyricText with the V tags:\n            let accum = 0;\n            for (let index in vtags) {\n              if (vtags.hasOwnProperty(index) && indexWithoutVTags >= index) {\n                accum += vtags[index];\n              } else {\n                break;\n              }\n            }\n            return indexWithoutVTags + accum;\n          }\n          centerStartIndex = getTrueIndex(centerStartIndex);\n          indexClosingBracket = getTrueIndex(indexClosingBracket);\n          centerLength = indexClosingBracket - centerStartIndex - 1;\n\n          // strip out the brackets:\n          lyricText =\n            lyricText.substring(0, centerStartIndex) +\n            lyricText.substring(centerStartIndex + 1, indexClosingBracket) +\n            lyricText.substring(indexClosingBracket + 1, lyricText.length);\n        } else centerStartIndex = -1; // if there's no closing bracket, don't enable centering\n      }\n\n      var lyric = this.makeLyric(\n        ctxt,\n        lyricText,\n        proposedLyricType,\n        notation,\n        notations,\n        sourceIndex\n      );\n\n      if (centerStartIndex >= 0) {\n        // update indices in case there had been any tags, etc.\n        let textIndex = 0,\n          centerEndIndex = -1;\n        for (let span of lyric.spans) {\n          if (\n            centerStartIndex >= span.index &&\n            centerStartIndex <= span.index + span.text.length\n          ) {\n            centerEndIndex = centerStartIndex + centerLength;\n            centerStartIndex += textIndex - span.index;\n          }\n          if (\n            centerEndIndex >= 0 &&\n            centerEndIndex >= span.index &&\n            centerEndIndex <= span.index + span.text.length\n          ) {\n            centerEndIndex += textIndex - span.index;\n            centerLength = centerEndIndex - centerStartIndex;\n            centerEndIndex = -1;\n            break;\n          }\n          textIndex += span.text.length;\n        }\n        if (centerEndIndex >= 0) {\n          centerEndIndex = textIndex;\n          centerLength = centerEndIndex - centerStartIndex;\n        }\n      }\n\n      // if we have manual lyric centering, then set it now\n      if (centerStartIndex >= 0) {\n        lyric.centerStartIndex = centerStartIndex;\n        lyric.centerLength = centerLength;\n      }\n\n      lyric.lyricIndex = lyrics.push(lyric) - 1;\n      sourceIndex += lyricText.length + 1;\n    }\n    notation.lyrics = lyrics;\n    return lyrics;\n  }\n\n  static makeLyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n    var elides = false;\n    var forceConnector = false;\n    if (text.length > 1) {\n      if (text[text.length - 1] === \"-\") {\n        forceConnector = true;\n        if (lyricType === LyricType.EndingSyllable)\n          lyricType = LyricType.MiddleSyllable;\n        else if (lyricType === LyricType.SingleSyllable)\n          lyricType = LyricType.BeginningSyllable;\n\n        text = text.slice(0, -1);\n      } else if (text[text.length - 1] === \" \") {\n        if (lyricType === LyricType.MiddleSyllable)\n          lyricType = LyricType.EndingSyllable;\n        else if (lyricType === LyricType.BeginningSyllable)\n          lyricType = LyricType.SingleSyllable;\n\n        text = text.slice(0, -1);\n      } else if (/<\\/i>$/.test(text)) {\n        // must be an elision\n        elides = true;\n      }\n    }\n\n    if (text.match(/^(?:[*†]+|i+j|\\d+)\\.?$/)) lyricType = LyricType.Directive;\n\n    var lyric = new Lyric(\n      ctxt,\n      text,\n      lyricType,\n      notation,\n      notations,\n      sourceIndex\n    );\n    lyric.elidesToNext = elides;\n    if (forceConnector) lyric.setForceConnector(true);\n\n    return lyric;\n  }\n\n  // takes a string of gabc notations and creates exsurge objects out of them.\n  // returns an array of notations.\n  static parseNotations(ctxt, data, sourceIndex, insertionIndex) {\n    // if there is no data, then this must be a text only object\n    if (!data) return [new TextOnly(sourceIndex, 0)];\n\n    var baseSourceIndex = sourceIndex;\n    var sourceLength = 0;\n    var notations = [];\n    var notes = [];\n    var trailingSpace = DefaultTrailingSpace;\n\n    var addToLastSourceGabc = gabc => {\n      if (notes.length > 0) {\n        notes[notes.length - 1].sourceGabc += gabc;\n      }\n    };\n    var addNotation = notation => {\n      // first, if we have any notes left over, we create a neume out of them\n      if (notes.length > 0) {\n        // create neume(s)\n        var neumes = this.createNeumesFromNotes(ctxt, notes, trailingSpace);\n        for (var i = 0; i < neumes.length; i++) notations.push(neumes[i]);\n\n        notes = [];\n      }\n\n      // reset the trailing space\n      trailingSpace = DefaultTrailingSpace;\n\n      // then, if we're passed a notation, let's add it\n      // also, perform chant logic here\n      if (notation !== null) {\n        let prevNotation = notations[notations.length - 1];\n        notation.sourceIndex = sourceIndex;\n        notation.sourceGabc = match[0];\n        if (notation.isClef) {\n          ctxt.activeClef = notation;\n          if (\n            prevNotation &&\n            prevNotation.trailingSpace.isDefault &&\n            prevNotation.isDivider\n          ) {\n            prevNotation.trailingSpace = TrailingSpaceForAccidental;\n          }\n        } else if (notation.isAccidental) {\n          ctxt.activeClef.activeAccidental = notation;\n        } else if (\n          notation.trailingSpace.isDefault &&\n          notation instanceof Signs.Custos\n        ) {\n          notation.trailingSpace = TrailingSpaceForAccidental;\n        } else if (notation.resetsAccidentals)\n          ctxt.activeClef.resetAccidentals();\n\n        notations.push(notation);\n      }\n    };\n\n    var regex = new RegExp(__notationsRegex.source, \"g\");\n    var match;\n\n    while ((match = regex.exec(data))) {\n      sourceIndex = baseSourceIndex + match.index;\n      sourceLength = match[0].length;\n      var atom = match[0];\n\n      // handle the clefs and dividers here\n      switch (atom) {\n        case \",\":\n          addNotation(new Signs.QuarterBar());\n          break;\n        case \"`\":\n          addNotation(new Signs.Virgula());\n          break;\n        case \";\":\n          addNotation(new Signs.HalfBar());\n          break;\n        case \";1\":\n        case \";2\":\n        case \";3\":\n        case \";4\":\n        case \";5\":\n        case \";6\":\n        case \",1\":\n        case \",2\":\n        case \",3\":\n        case \",4\":\n        case \",5\":\n        case \",6\":\n          addNotation(new Signs.DominicanBar(parseInt(atom[1], 10)));\n          break;\n        case \":\":\n          addNotation(new Signs.FullBar());\n          break;\n        case \"::\":\n          addNotation(new Signs.DoubleBar());\n          break;\n        // other gregorio dividers are not supported yet\n\n        case \"c1\":\n          addNotation((ctxt.activeClef = new DoClef(-3, 2)));\n          break;\n\n        case \"c2\":\n          addNotation((ctxt.activeClef = new DoClef(-1, 2)));\n          break;\n\n        case \"c3\":\n          addNotation((ctxt.activeClef = new DoClef(1, 2)));\n          break;\n\n        case \"c4\":\n          addNotation((ctxt.activeClef = new DoClef(3, 2)));\n          break;\n\n        case \"f1\":\n          addNotation((ctxt.activeClef = new FaClef(-3, 2)));\n          break;\n\n        case \"f2\":\n          addNotation((ctxt.activeClef = new FaClef(-1, 2)));\n          break;\n\n        case \"f3\":\n          addNotation((ctxt.activeClef = new FaClef(1, 2)));\n          break;\n\n        case \"f4\":\n          addNotation((ctxt.activeClef = new FaClef(3, 2)));\n          break;\n\n        case \"cb1\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              -3,\n              2,\n              new Signs.Accidental(-4, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"cb2\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              -1,\n              2,\n              new Signs.Accidental(-2, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"cb3\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              1,\n              2,\n              new Signs.Accidental(0, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"cb4\":\n          addNotation(\n            (ctxt.activeClef = new DoClef(\n              3,\n              2,\n              new Signs.Accidental(2, Signs.AccidentalType.Flat)\n            ))\n          );\n          break;\n\n        case \"z\":\n          addNotation(new ChantLineBreak(true));\n          break;\n        case \"Z\":\n          addNotation(new ChantLineBreak(false));\n          break;\n        case \"z0\":\n          addNotation(new Signs.Custos(true));\n          break;\n\n        // spacing indicators\n        case \"!\":\n          trailingSpace = 0;\n          addToLastSourceGabc(atom);\n          addNotation(null);\n          break;\n        case \" \":\n          // fixme: is this correct? logically what is the difference in gabc\n          // between putting a space between notes vs putting '//' between notes?\n          trailingSpace = TrailingSpaceMultiple(2);\n          addToLastSourceGabc(atom);\n          addNotation(null);\n          break;\n\n        default:\n          // might be a number of slashes, a custos, might be an accidental, or might be a note\n          if (atom[0] === \"/\") {\n            trailingSpace = TrailingSpaceMultiple(atom.length);\n            addToLastSourceGabc(atom);\n            addNotation(null);\n          } else if (atom.length > 1 && atom[1] === \"+\") {\n            // custos\n            var custos = new Signs.Custos();\n\n            custos.staffPosition = this.gabcHeightToExsurgeHeight(atom[0]);\n\n            addNotation(custos);\n          } else if (atom.length > 1 && /[xy#]/.test(atom[1])) {\n            var accidentalType;\n\n            switch (atom[1]) {\n              case \"y\":\n                accidentalType = Signs.AccidentalType.Natural;\n                break;\n              case \"#\":\n                accidentalType = Signs.AccidentalType.Sharp;\n                break;\n              default:\n                accidentalType = Signs.AccidentalType.Flat;\n                break;\n            }\n\n            var noteArray = [];\n            this.createNoteFromData(\n              ctxt,\n              ctxt.activeClef,\n              atom,\n              noteArray,\n              sourceIndex\n            );\n            var accidental = new Signs.Accidental(\n              noteArray[0].staffPosition,\n              accidentalType\n            );\n            accidental.pitch = this.gabcHeightToExsurgePitch(\n              ctxt.activeClef,\n              atom[0]\n            );\n            accidental.sourceIndex = sourceIndex;\n            accidental.sourceLength = sourceLength;\n            accidental.trailingSpace = TrailingSpaceForAccidental;\n\n            ctxt.activeClef.activeAccidental = accidental;\n\n            addNotation(accidental);\n          } else if (atom.length > 1 && atom[0] === \"{\") {\n            trailingSpace = 0;\n            addNotation(null);\n            let bracketedNotations = this.parseNotations(\n              ctxt,\n              match[__notationsRegex_group_insideBraces],\n              sourceIndex + 1\n            );\n            // Set the width of these notations to 0\n            bracketedNotations.forEach(neume => {\n              neume.hasNoWidth = true;\n              neume.firstWithNoWidth = bracketedNotations[0];\n            });\n            notations.push(...bracketedNotations);\n          } else {\n            // looks like it's a note\n            if (insertionIndex === -1) {\n              trailingSpace = TrailingSpaceMultiple(1);\n              addNotation(null);\n            }\n            this.createNoteFromData(\n              ctxt,\n              ctxt.activeClef,\n              atom,\n              notes,\n              sourceIndex\n            );\n            --insertionIndex;\n          }\n          break;\n      }\n    }\n\n    // finish up any remaining notes we have left\n    addNotation(null);\n\n    return notations;\n  }\n\n  static createNeumesFromNotes(ctxt, notes, finalTrailingSpace) {\n    var neumes = [];\n    var firstNoteIndex = 0;\n    var currNoteIndex = 0;\n\n    // here we use a simple finite state machine to create the neumes from the notes\n    // createNeume is helper function which returns the next state after a neume is created\n    // (unknownState). Each state object has a neume() function and a handle() function.\n    // neume() allows us to create the neume of the state in the event that we run out\n    // of notes. handle() gives the state an opportunity to examine the currNote and\n    // determine what to do...either transition to a different neume/state, or\n    // continue building the neume of that state. handle() returns the next state\n\n    var createNeume = function(neume, includeCurrNote, includePrevNote = true) {\n      // add the notes to the neume\n      var lastNoteIndex;\n      if (includeCurrNote) lastNoteIndex = currNoteIndex;\n      else if (includePrevNote) lastNoteIndex = currNoteIndex - 1;\n      else lastNoteIndex = currNoteIndex - 2;\n\n      if (lastNoteIndex < 0) return;\n\n      while (firstNoteIndex <= lastNoteIndex) {\n        let note = notes[firstNoteIndex++];\n        neume.addNote(note);\n        if (note.alText) {\n          if (!neume.alText) neume.alText = [];\n          neume.alText.push(note.alText);\n          note.alText.noteIndex = firstNoteIndex - 1;\n        }\n      }\n\n      neumes.push(neume);\n\n      if (includeCurrNote === false) {\n        currNoteIndex--;\n\n        if (includePrevNote === false) currNoteIndex--;\n\n        neume.keepWithNext = true;\n        if (notes[currNoteIndex + 1].shape === NoteShape.Quilisma)\n          neume.trailingSpace = 0;\n        else {\n          neume.trailingSpace = TrailingSpaceMultiple(1);\n          neume.allowLineBreakBeforeNext = true;\n        }\n      }\n\n      return unknownState;\n    };\n\n    var unknownState = {\n      neume: function() {\n        return new Neumes.Punctum();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape === NoteShape.Virga) return virgaState;\n        else if (currNote.shape === NoteShape.Stropha) return apostrophaState;\n        else if (currNote.shape === NoteShape.Oriscus) return oriscusState;\n        else if (currNote.shape === NoteShape.Inclinatum)\n          return punctaInclinataState;\n        else if (currNote.shapeModifiers & NoteShapeModifiers.Cavum)\n          return createNeume(new Neumes.Punctum(), true);\n        else return punctumState;\n      }\n    };\n\n    var punctumState = {\n      neume: function() {\n        return new Neumes.Punctum();\n      },\n      handle: function(currNote, prevNote, notesRemaining) {\n        if (currNote.shape || prevNote.liquescent === LiquescentType.Small) {\n          var neume = new Neumes.Punctum();\n          var state = createNeume(neume, false);\n          // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n          // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n          // Otherwise, we want no trailing space.\n          if (\n            currNote.staffPosition > prevNote.staffPosition &&\n            (currNote.staffPosition % 2 === 1 ||\n              prevNote.staffPosition !== currNote.staffPosition - 1 ||\n              !prevNote.morae ||\n              prevNote.morae.length === 0)\n          )\n            neume.trailingSpace = 0;\n          return state;\n        }\n\n        if (currNote.staffPosition > prevNote.staffPosition) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          return podatusState;\n        } else if (currNote.staffPosition < prevNote.staffPosition) {\n          if (prevNote.ictus)\n            prevNote.ictus.positionHint = MarkingPositionHint.Above;\n          if (currNote.shape === NoteShape.Inclinatum) return climacusState;\n          else if (prevNote.staffPosition - currNote.staffPosition <= 4) {\n            return clivisState;\n          }\n        } else if (!prevNote.morae || !prevNote.morae.length) {\n          return distrophaState;\n        }\n        return createNeume(new Neumes.Punctum(), false);\n      }\n    };\n\n    var punctaInclinataState = {\n      neume: function() {\n        return new Neumes.PunctaInclinata();\n      },\n      handle: function() {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.PunctaInclinata(), false);\n        else return punctaInclinataState;\n      }\n    };\n\n    var oriscusState = {\n      neume: function() {\n        return new Neumes.Oriscus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape === NoteShape.Default) {\n          if (currNote.staffPosition > prevNote.staffPosition) {\n            prevNote.shapeModifiers |= NoteShapeModifiers.Ascending;\n            return createNeume(new Neumes.PesQuassus(), true);\n          } else if (currNote.staffPosition < prevNote.staffPosition) {\n            prevNote.shapeModifiers |= NoteShapeModifiers.Descending;\n            return createNeume(new Neumes.Clivis(), true);\n          }\n        }\n        // stand alone oriscus\n        var neume = new Neumes.Oriscus(),\n          state = createNeume(neume, false);\n        // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n        // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n        // Otherwise, we want no trailing space.\n        if (\n          currNote.staffPosition > prevNote.staffPosition &&\n          (currNote.staffPosition % 2 === 1 ||\n            prevNote.staffPosition !== currNote.staffPosition - 1 ||\n            !prevNote.morae ||\n            prevNote.morae.length === 0)\n        )\n          neume.trailingSpace = 0;\n        return state;\n      }\n    };\n\n    var podatusState = {\n      neume: function() {\n        return new Neumes.Podatus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition > prevNote.staffPosition) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          if (prevNote.ictus)\n            prevNote.ictus.positionHint = MarkingPositionHint.Below;\n\n          if (prevNote.shape === NoteShape.Oriscus) return salicusState;\n          else return scandicusState;\n        } else if (currNote.staffPosition < prevNote.staffPosition) {\n          if (currNote.shape === NoteShape.Inclinatum)\n            return pesSubpunctisState;\n          else return torculusState;\n        } else return createNeume(new Neumes.Podatus(), false);\n      }\n    };\n\n    var clivisState = {\n      neume: function() {\n        return new Neumes.Clivis();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition > prevNote.staffPosition\n        ) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          return porrectusState;\n        } else return createNeume(new Neumes.Clivis(), false);\n      }\n    };\n\n    var climacusState = {\n      neume: function() {\n        return new Neumes.Climacus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.Climacus(), false);\n        else return state;\n      }\n    };\n\n    var porrectusState = {\n      neume: function() {\n        return new Neumes.Porrectus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return createNeume(new Neumes.PorrectusFlexus(), true);\n        else return createNeume(new Neumes.Porrectus(), false);\n      }\n    };\n\n    var pesSubpunctisState = {\n      neume: function() {\n        return new Neumes.PesSubpunctis();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.PesSubpunctis(), false);\n        else return state;\n      }\n    };\n\n    var salicusState = {\n      neume: function() {\n        return new Neumes.Salicus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition < prevNote.staffPosition)\n          return salicusFlexusState;\n        else return createNeume(new Neumes.Salicus(), false);\n      }\n    };\n\n    var salicusFlexusState = {\n      neume: function() {\n        return new Neumes.SalicusFlexus();\n      },\n      handle: function(currNote, prevNote) {\n        return createNeume(new Neumes.SalicusFlexus(), false);\n      }\n    };\n\n    var scandicusState = {\n      neume: function() {\n        return new Neumes.Scandicus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          prevNote.shape === NoteShape.Virga &&\n          currNote.shape === NoteShape.Inclinatum &&\n          currNote.staffPosition < prevNote.staffPosition\n        ) {\n          // if we get here, then it seems we have a podatus, now being followed by a climacus\n          // rather than a scandicus. react accordingly\n          return createNeume(new Neumes.Podatus(), false, false);\n        } else if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return scandicusFlexusState;\n        else return createNeume(new Neumes.Scandicus(), false);\n      }\n    };\n\n    var scandicusFlexusState = {\n      neume: function() {\n        return new Neumes.ScandicusFlexus();\n      },\n      handle: function(currNote, prevNote) {\n        return createNeume(new Neumes.ScandicusFlexus(), false);\n      }\n    };\n\n    var virgaState = {\n      neume: function() {\n        return new Neumes.Virga();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Inclinatum &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return climacusState;\n        else if (\n          currNote.shape === NoteShape.Virga &&\n          currNote.staffPosition === prevNote.staffPosition\n        )\n          return bivirgaState;\n        else return createNeume(new Neumes.Virga(), false);\n      }\n    };\n\n    var bivirgaState = {\n      neume: function() {\n        return new Neumes.Bivirga();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Virga &&\n          currNote.staffPosition === prevNote.staffPosition\n        )\n          return createNeume(new Neumes.Trivirga(), true);\n        else return createNeume(new Neumes.Bivirga(), false);\n      }\n    };\n\n    var apostrophaState = {\n      neume: function() {\n        return new Neumes.Apostropha();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition === prevNote.staffPosition)\n          return distrophaState;\n        else return createNeume(new Neumes.Apostropha(), false);\n      }\n    };\n\n    var distrophaState = {\n      neume: function() {\n        return new Neumes.Distropha();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition === prevNote.staffPosition) {\n          if (prevNote.morae && prevNote.morae.length) {\n            return createNeume(new Neumes.Distropha(), false);\n          } else {\n            return tristrophaState;\n          }\n        } else return createNeume(new Neumes.Apostropha(), false, false);\n      }\n    };\n\n    var tristrophaState = {\n      neume: function() {\n        return new Neumes.Tristropha();\n      },\n      handle: function(currNote, prevNote) {\n        // we only create a tristropha when the note run ends after three\n        // and the neume() function of this state is called. Otherwise\n        // we always interpret the third note to belong to the next sequence\n        // of notes.\n        //\n        // fixme: gabc allows any number of punctum/stropha in succession...\n        // is this a valid neume type? Or is it just multiple *stropha neumes\n        // in succession? Should we simplify the apostropha/distropha/\n        // tristropha classes to a generic stropha neume that can have 1 or\n        // more successive notes?\n        return createNeume(new Neumes.Distropha(), false, false);\n      }\n    };\n\n    var torculusState = {\n      neume: function() {\n        return new Neumes.Torculus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition > prevNote.staffPosition\n        ) {\n          let prevNoteButOne = notes[currNoteIndex - 2];\n          if (\n            prevNoteButOne &&\n            prevNoteButOne.staffPosition - prevNote.staffPosition <= 4\n          ) {\n            if (currNote.ictus)\n              currNote.ictus.positionHint = MarkingPositionHint.Above;\n            return torculusResupinusState;\n          }\n        }\n        return createNeume(new Neumes.Torculus(), false);\n      }\n    };\n\n    var torculusResupinusState = {\n      neume: function() {\n        return new Neumes.TorculusResupinus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return createNeume(new Neumes.TorculusResupinusFlexus(), true);\n        else return createNeume(new Neumes.TorculusResupinus(), false);\n      }\n    };\n\n    var state = unknownState;\n\n    while (currNoteIndex < notes.length) {\n      var prevNote = currNoteIndex > 0 ? notes[currNoteIndex - 1] : null;\n      var currNote = notes[currNoteIndex];\n\n      state = state.handle(\n        currNote,\n        prevNote,\n        notes.length - 1 - currNoteIndex\n      );\n\n      // if we are on the last note, then try to create a neume if we need to.\n      if (currNoteIndex === notes.length - 1 && state !== unknownState)\n        createNeume(state.neume(), true);\n\n      currNoteIndex++;\n    }\n\n    if (neumes.length > 0) {\n      if (!finalTrailingSpace.isDefault) {\n        neumes[neumes.length - 1].trailingSpace = finalTrailingSpace;\n        neumes[neumes.length - 1].keepWithNext = true;\n\n        if (finalTrailingSpace > 0)\n          neumes[neumes.length - 1].allowLineBreakBeforeNext = neumes[\n            neumes.length - 1\n          ].keepWithNext = true;\n      }\n    }\n\n    return neumes;\n  }\n\n  // appends any notes created to the notes array argument\n  static createNoteFromData(ctxt, clef, data, notes, sourceIndex) {\n    var note = new Note();\n    note.sourceIndex = sourceIndex;\n    note.sourceGabc = data;\n\n    if (data.length < 1) throw \"Invalid note data: \" + data;\n\n    if (data[0] === \"-\") {\n      // liquescent initio debilis\n      note.liquescent = LiquescentType.InitioDebilis;\n      data = data.substring(1);\n    }\n\n    if (data.length < 1) throw \"Invalid note data: \" + data;\n\n    // the next char is always the pitch\n    var pitch = this.gabcHeightToExsurgePitch(clef, data[0]);\n\n    if (data[0] === data[0].toUpperCase()) note.shape = NoteShape.Inclinatum;\n\n    note.staffPosition = this.gabcHeightToExsurgeHeight(data[0]);\n    note.pitch = pitch;\n\n    var mark;\n\n    var episemaNoteIndex = notes.length;\n    var episemaNote = note;\n\n    // process the modifiers\n    for (var i = 1; i < data.length; i++) {\n      var c = data[i];\n      var lookahead = \"\\0\";\n\n      var haveLookahead = i + 1 < data.length;\n      if (haveLookahead) lookahead = data[i + 1];\n\n      switch (c) {\n        // rhythmic markings\n        case \".\":\n          mark = null;\n\n          // gabc supports putting up to two morae on each note, by repeating the\n          // period. here, we check to see if we've already created a mora for the\n          // note, and if so, we simply force the second one to have an Above\n          // position hint. if a user decides to try to put position indicators\n          // on the double morae (such as 1 or 2), then really the behavior is\n          // not defined by gabc, so it's on the user to figure it out.\n          if (note.morae.length > 0 && notes.length) {\n            var previousNote = notes.slice(-1)[0];\n            var previousMora = note.morae.slice(-1)[0];\n            previousMora.note = previousNote;\n          }\n\n          mark = new Markings.Mora(ctxt, note);\n          if (haveLookahead && lookahead === \"1\")\n            mark.positionHint = MarkingPositionHint.Above;\n          else if (haveLookahead && lookahead === \"0\")\n            mark.positionHint = MarkingPositionHint.Below;\n\n          note.morae.push(mark);\n          break;\n\n        case \"_\":\n          var episemaHadModifier = false;\n\n          mark = new Markings.HorizontalEpisema(episemaNote);\n          while (haveLookahead) {\n            if (lookahead === \"0\")\n              mark.positionHint = MarkingPositionHint.Below;\n            else if (lookahead === \"1\")\n              mark.positionHint = MarkingPositionHint.Above;\n            else if (lookahead === \"2\") mark.terminating = true;\n            // episema terminates\n            else if (lookahead === \"3\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Left;\n            else if (lookahead === \"4\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Center;\n            else if (lookahead === \"5\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Right;\n            else break;\n\n            // the gabc definition for episemata is so convoluted...\n            // - double underscores create episemata over multiple notes.\n            // - unless the _ has a 0, 1, 3, 4, or 5 modifier, which means\n            //   another underscore puts a second episema on the same note\n            // - (when there's a 2 lookahead, then this is treated as an\n            //   unmodified underscore, so another underscore would be\n            //   added to previous notes\n            if (\n              mark.alignment !== Markings.HorizontalEpisemaAlignment.Default &&\n              mark.positionHint !== MarkingPositionHint.Below\n            )\n              episemaHadModifier = true;\n\n            i++;\n            haveLookahead = i + 1 < data.length;\n\n            if (haveLookahead) lookahead = data[i + 1];\n          }\n\n          // since gabc allows consecutive underscores which is a shortcut to\n          // apply the episemata to previous notes, we keep track of that here\n          // in order to add the new episema to the correct note.\n\n          if (episemaNote) episemaNote.episemata.push(mark);\n\n          if (episemaNote === note && episemaHadModifier) episemaNote = note;\n          else if (episemaNoteIndex >= 0 && notes.length > 0)\n            episemaNote = notes[--episemaNoteIndex];\n\n          break;\n\n        case \"'\":\n          mark = new Markings.Ictus(ctxt, note);\n          if (haveLookahead && lookahead === \"1\")\n            mark.positionHint = MarkingPositionHint.Above;\n          else if (haveLookahead && lookahead === \"0\")\n            mark.positionHint = MarkingPositionHint.Below;\n          else if (note.shape === NoteShape.Virga)\n            // ictus on a virga goes above by default:\n            mark.positionHint = MarkingPositionHint.Above;\n\n          note.ictus = mark;\n          break;\n\n        //note shapes\n        case \"r\":\n          if (haveLookahead && /^[0-5]$/.test(lookahead)) {\n            switch (lookahead) {\n              case \"0\":\n                note.shapeModifiers |= NoteShapeModifiers.Cavum;\n                note.shapeModifiers |= NoteShapeModifiers.Linea;\n                break;\n              case \"1\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.AcuteAccent\n                );\n                break;\n              case \"2\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.GraveAccent\n                );\n                break;\n              case \"3\":\n                note.accent = new Markings.Accent(ctxt, note, GlyphCode.Circle);\n                break;\n              case \"4\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.Semicircle\n                );\n                break;\n              case \"5\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.ReversedSemicircle\n                );\n                break;\n              default:\n            }\n            i++;\n          } else note.shapeModifiers |= NoteShapeModifiers.Cavum;\n          break;\n        \n        case \"R\":\n          note.shapeModifiers |= NoteShapeModifiers.Linea;\n          break;\n\n        case \"s\":\n          if (note.shape === NoteShape.Stropha) {\n            // if we're already a stropha, that means this is gabc's\n            // quick stropha feature (e.g., gsss). create a new note\n            let newNote = new Note();\n            newNote.sourceIndex = sourceIndex + i;\n            newNote.sourceGabc = \"s\";\n            newNote.staffPosition = note.staffPosition;\n            newNote.pitch = note.pitch;\n            notes.push(note);\n            note = newNote;\n            episemaNoteIndex++; // since a new note was added, increase the index here\n          }\n\n          note.shape = NoteShape.Stropha;\n          break;\n\n        case \"v\":\n          if (note.shape === NoteShape.Virga) {\n            // if we're already a stropha, that means this is gabc's\n            // quick virga feature (e.g., gvvv). create a new note\n            let newNote = new Note();\n            newNote.sourceIndex = sourceIndex + i;\n            newNote.sourceGabc = \"v\";\n            newNote.staffPosition = note.staffPosition;\n            newNote.pitch = note.pitch;\n            notes.push(note);\n            note = newNote;\n            episemaNoteIndex++; // since a new note was added, increase the index here\n          }\n\n          note.shape = NoteShape.Virga;\n          break;\n        \n        case \"V\":\n          note.shape = NoteShape.Virga;\n          note.shapeModifers |= NoteShapeModifiers.Reverse;\n          break;\n\n        case \"w\":\n          note.shape = NoteShape.Quilisma;\n          break;\n\n        case \"o\":\n          note.shape = NoteShape.Oriscus;\n          if (haveLookahead && lookahead === \"<\") {\n            note.shapeModifiers |= NoteShapeModifiers.Ascending;\n            i++;\n          } else if (haveLookahead && lookahead === \">\") {\n            note.shapeModifiers |= NoteShapeModifiers.Descending;\n            i++;\n          }\n          break;\n\n        case \"O\":\n          note.shape = NoteShape.Oriscus;\n          if (haveLookahead && lookahead === \"<\") {\n            note.shapeModifiers |=\n              NoteShapeModifiers.Ascending | NoteShapeModifiers.Stemmed;\n            i++;\n          } else if (haveLookahead && lookahead === \">\") {\n            note.shapeModifiers |=\n              NoteShapeModifiers.Descending | NoteShapeModifiers.Stemmed;\n            i++;\n          } else note.shapeModifiers |= NoteShapeModifiers.Stemmed;\n          break;\n\n        // liquescents\n        case \"~\":\n          if (note.shape === NoteShape.Inclinatum)\n            note.liquescent |= LiquescentType.Small;\n          else if (note.shape === NoteShape.Oriscus)\n            note.liquescent |= LiquescentType.Large;\n          else note.liquescent |= LiquescentType.Small;\n          break;\n        case \"<\":\n          note.liquescent |= LiquescentType.Ascending;\n          break;\n        case \">\":\n          note.liquescent |= LiquescentType.Descending;\n          break;\n\n        // accidentals\n        case \"x\":\n          if (note.pitch.step === Step.Mi) note.pitch.step = Step.Me;\n          else if (note.pitch.step === Step.Ti) note.pitch.step = Step.Te;\n          break;\n        case \"y\":\n          if (note.pitch.step === Step.Te) note.pitch.step = Step.Ti;\n          else if (note.pitch.step === Step.Me) note.pitch.step = Step.Mi;\n          else if (note.pitch.step === Step.Du) note.pitch.step = Step.Do;\n          else if (note.pitch.step === Step.Fu) note.pitch.step = Step.Fa;\n          break;\n        case \"#\":\n          if (note.pitch.step === Step.Do) note.pitch.step = Step.Du;\n          else if (note.pitch.step === Step.Fa) note.pitch.step = Step.Fu;\n          break;\n\n        // gabc special item groups\n        case \"[\":\n          // read in the whole group and parse it\n          var startIndex = ++i;\n          while (i < data.length && data[i] !== \"]\") i++;\n\n          this.processInstructionForNote(\n            ctxt,\n            note,\n            data.substring(startIndex, i),\n            startIndex\n          );\n          break;\n      }\n    }\n\n    if (\n      this.needToEndBrace &&\n      !note.braceStart &&\n      !note.braceEnd &&\n      !/[xy#]/.test(c)\n    ) {\n      note.braceEnd = new Markings.BracePoint(\n        note,\n        this.needToEndBrace.isAbove,\n        this.needToEndBrace.shape,\n        this.needToEndBrace.attachment === Markings.BraceAttachment.Left\n          ? Markings.BraceAttachment.Right\n          : Markings.BraceAttachment.Left\n      );\n      note.braceEnd.automatic = true;\n      delete this.needToEndBrace;\n    }\n\n    notes.push(note);\n  }\n\n  // an instruction in this context is referring to a special gabc coding found after\n  // notes between ['s and ]'s. choral signs and braces fall into this\n  // category.\n  //\n  // currently only brace instructions are supported here!\n  static processInstructionForNote(ctxt, note, instruction, sourceIndexOffset) {\n    var results = instruction.match(__bracketedCommandRegex);\n    if (results === null) return;\n    var cmd = results[1];\n    var data = results[2];\n    switch (cmd) {\n      case \"cs\":\n        note.choralSign = new ChoralSign(\n          ctxt,\n          data,\n          note,\n          note.sourceIndex + sourceIndexOffset,\n          instruction.length\n        );\n        return;\n      case \"alt\":\n        note.alText = new AboveLinesText(\n          ctxt,\n          data,\n          note,\n          note.sourceIndex + sourceIndexOffset,\n          instruction.length\n        );\n        return;\n    }\n\n    results = instruction.match(__braceSpecRegex);\n\n    if (results === null) return;\n\n    // see the comments at the definition of __braceSpecRegex for the\n    // capturing groups\n    var above = results[1] === \"o\";\n    var shape = Markings.BraceShape.CurlyBrace; // default\n\n    switch (results[2]) {\n      case \"b\":\n        shape = Markings.BraceShape.RoundBrace;\n        break;\n      case \"cb\":\n        shape = Markings.BraceShape.CurlyBrace;\n        break;\n      case \"cba\":\n        shape = Markings.BraceShape.AccentedCurlyBrace;\n        break;\n    }\n\n    var attachmentPoint =\n      results[3] === \"1\"\n        ? Markings.BraceAttachment.Left\n        : Markings.BraceAttachment.Right;\n\n    if (results[4] === \"{\" || results[5])\n      note.braceStart = new Markings.BracePoint(\n        note,\n        above,\n        shape,\n        attachmentPoint\n      );\n    else\n      note.braceEnd = new Markings.BracePoint(\n        note,\n        above,\n        shape,\n        attachmentPoint\n      );\n\n    // just have the next note end a brace that uses length;\n    if (results[5]) {\n      note.braceStart.automatic = true;\n      this.needToEndBrace = note.braceStart;\n    }\n  }\n\n  // takes raw gabc text source and parses it into words. For example, passing\n  // in a string of \"me(f.) (,) ma(fff)num(d!ewf) tu(fgF'E)am,(f.)\" would return\n  // an array of four strings: [\"me(f.)\", \"(,)\", \"ma(fff)num(d!ewf)\", \"tu(fgF'E)am,(f.)\"]\n  static splitWords(gabcNotations) {\n    // split the notations on whitespace boundaries, as long as the space\n    // immediately follows a set of parentheses. Prior to doing that, we replace\n    // all whitespace with spaces, which prevents tabs and newlines from ending\n    // up in the notation data.\n    gabcNotations = gabcNotations\n      // .trim()\n      // .replace(/\\s/g, \" \")\n      .replace(/\\)\\s(?=[^\\)]*(?:\\(|$))/g, \")\\n\");\n    return gabcNotations.split(/\\n/g);\n  }\n\n  static parseSource(gabcSource) {\n    return this.parseWords(this.splitWords(gabcSource));\n  }\n\n  // gabcWords is an array of strings, e.g., the result of splitWords above\n  static parseWords(gabcWords) {\n    var words = [];\n\n    for (var i = 0; i < gabcWords.length; i++)\n      words.push(this.parseWord(gabcWords[i]));\n\n    return words;\n  }\n\n  // returns an array of objects, each of which has the following properties\n  //  - notations (string)\n  //  - lyrics (array of strings)\n  static parseWord(gabcWord) {\n    var syllables = [];\n    var matches = [];\n\n    syllables.wordLength = gabcWord.length;\n\n    while ((match = __syllablesRegex.exec(gabcWord))) matches.push(match);\n\n    for (var j = 0; j < matches.length; j++) {\n      var match = matches[j];\n\n      var lyrics = match[1].trim().split(\"|\");\n      var notations = match[2];\n\n      syllables.push({\n        notations: notations,\n        lyrics: lyrics\n      });\n    }\n\n    return syllables;\n  }\n\n  // returns pitch\n  static gabcHeightToExsurgeHeight(gabcHeight) {\n    return gabcHeight.toLowerCase().charCodeAt(0) - \"a\".charCodeAt(0) - 6;\n  }\n\n  // returns pitch\n  static gabcHeightToExsurgePitch(clef, gabcHeight) {\n    var exsurgeHeight = this.gabcHeightToExsurgeHeight(gabcHeight);\n\n    var pitch = clef.staffPositionToPitch(exsurgeHeight);\n\n    return pitch;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Gabc.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  LiquescentType,\n  NoteShape,\n  NoteShapeModifiers\n} from \"./Exsurge.Chant.js\";\nimport {\n  ChantNotationElement,\n  GlyphCode, LineaVisualizer, MarkingPositionHint,\n  NeumeLineVisualizer, VirgaLineVisualizer\n} from \"./Exsurge.Drawing.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\n\nclass NeumeBuilder {\n  constructor(ctxt, neume, startingX = 0) {\n    this.ctxt = ctxt;\n    this.neume = neume;\n    this.x = startingX;\n    this.lastNote = null;\n    this.lineIsHanging = false;\n    this.minX = 0;\n  }\n\n  // used to start a hanging line on the left of the next note\n  lineFrom(note) {\n    var previousNotation = this.ctxt.notations[this.ctxt.currNotationIndex - 1];\n    if (\n      this.x === 0 &&\n      previousNotation &&\n      previousNotation.notes &&\n      previousNotation.trailingSpace === 0\n    ) {\n      this.lastNote = previousNotation.notes.slice(-1)[0];\n      this.minX = -this.ctxt.neumeLineWeight;\n    } else {\n      this.lastNote = note;\n      this.lineIsHanging = true;\n    }\n    return this;\n  }\n\n  // add a note, with a connecting line on the left if we have one\n  noteAt(note, glyph, withLineTo = true) {\n    if (!note) throw \"NeumeBuilder.noteAt: note must be a valid note\";\n\n    if (!glyph) throw \"NeumeBuilder.noteAt: glyph must be a valid glyph code\";\n\n    note.setGlyph(this.ctxt, glyph);\n    var noteAlignsRight = note.glyphVisualizer.align === \"right\";\n\n    var needsLine =\n      withLineTo &&\n      this.lastNote !== null &&\n      (this.lineIsHanging ||\n        (this.lastNote.glyphVisualizer &&\n          this.lastNote.glyphVisualizer.align === \"right\") ||\n        Math.abs(this.lastNote.staffPosition - note.staffPosition) > 1);\n\n    if (needsLine) {\n      var line = new NeumeLineVisualizer(\n        this.ctxt,\n        this.lastNote,\n        note,\n        this.lineIsHanging\n      );\n      this.neume.addVisualizer(line);\n      line.bounds.x = Math.max(this.minX, this.x - line.bounds.width);\n\n      if (!noteAlignsRight) this.x = line.bounds.x;\n    }\n    \n    let xOffset = 0;\n    if (note.shapeModifiers & NoteShapeModifiers.Linea) {\n      var linea = new LineaVisualizer(\n        this.ctxt,\n        note\n      );\n      this.neume.addVisualizer(linea);\n      note.origin.x += linea.origin.x;\n      xOffset = linea.origin.x;\n    }\n\n    // if this is the first note of a right aligned glyph (probably an initio debilis),\n    // then there's nothing to worry about. but if it's not then first, then this\n    // subtraction will right align it visually\n    if (noteAlignsRight && this.lastNote)\n      note.bounds.x = this.x - note.bounds.width;\n    else {\n      note.bounds.x = this.x + xOffset;\n      this.x += note.bounds.width + xOffset;\n    }\n\n    this.neume.addVisualizer(note);\n\n    this.lastNote = note;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n\n  // a special form of noteAdd that creates a virga\n  // uses a punctum cuadratum and a line rather than the virga glyphs\n  virgaAt(note, withLineTo = true) {\n    // add the punctum for the virga\n    this.noteAt(note, GlyphCode.PunctumQuadratum);\n\n    // add a line for the virga\n    var line = new VirgaLineVisualizer(this.ctxt, note);\n    this.x -= line.bounds.width;\n    if (note.shapeModifers & NoteShapeModifiers.Reverse) {\n      line.bounds.x = 0;\n    } else {\n      line.bounds.x = this.x;\n    }\n    this.neume.addVisualizer(line);\n\n    this.lastNote = note;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n\n  advanceBy(x) {\n    this.lastNote = null;\n    this.lineIsHanging = false;\n\n    this.x += x;\n\n    return this;\n  }\n\n  // for terminating hanging lines with no lower notes\n  withLineEndingAt(note) {\n    if (this.lastNote === null) return;\n\n    var line = new NeumeLineVisualizer(this.ctxt, this.lastNote, note, true);\n    this.neume.addVisualizer(line);\n    this.x -= line.bounds.width;\n    line.bounds.x = this.x;\n\n    this.neume.addVisualizer(line);\n\n    this.lastNote = note;\n\n    return this;\n  }\n\n  withPodatus(lowerNote, upperNote) {\n    var upperGlyph;\n    var lowerGlyph;\n\n    if (lowerNote.liquescent === LiquescentType.InitioDebilis) {\n      // liquescent upper note or not?\n      if (upperNote.liquescent === LiquescentType.None)\n        upperGlyph = GlyphCode.PunctumQuadratum;\n      else upperGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n\n      lowerGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Small) {\n      lowerGlyph = GlyphCode.BeginningAscLiquescent;\n      upperGlyph = GlyphCode.TerminatingAscLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Ascending) {\n      lowerGlyph = GlyphCode.PunctumQuadratum;\n      upperGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Descending) {\n      lowerGlyph = GlyphCode.PunctumQuadratum;\n      upperGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    } else {\n      // standard shape\n      lowerGlyph = GlyphCode.PodatusLower;\n      upperGlyph = GlyphCode.PodatusUpper;\n    }\n\n    // allow a quilisma pes\n    if (lowerNote.shape === NoteShape.Quilisma) lowerGlyph = GlyphCode.Quilisma;\n\n    this.noteAt(lowerNote, lowerGlyph).noteAt(upperNote, upperGlyph);\n\n    // make sure we don't have lines connected to the podatus\n    this.lastNote = null;\n\n    return this;\n  }\n\n  withClivis(upper, lower) {\n    var lowerGlyph;\n\n    if (upper.shape === NoteShape.Oriscus)\n      this.noteAt(upper, GlyphCode.OriscusDes, false);\n    else this.lineFrom(lower).noteAt(upper, GlyphCode.PunctumQuadratum);\n\n    if (lower.liquescent & LiquescentType.Small) {\n      lowerGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (lower.liquescent === LiquescentType.Ascending)\n      lowerGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (lower.liquescent === LiquescentType.Descending)\n      lowerGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else lowerGlyph = GlyphCode.PunctumQuadratum;\n\n    this.noteAt(lower, lowerGlyph);\n\n    // make sure we don't have lines connected to the clivis\n    this.lastNote = null;\n\n    return this;\n  }\n\n  // lays out a sequence of notes that are inclinata (e.g., climacus, pes subpunctis)\n  withInclinata(notes) {\n    var staffPosition = notes[0].staffPosition,\n      prevStaffPosition = notes[0].staffPosition;\n\n    // it is important to advance by the width of the inclinatum glyph itself\n    // rather than by individual note widths, so that any liquescents are spaced\n    // the same as non-liquscents\n    var advanceWidth =\n      Glyphs.PunctumInclinatum.bounds.width * this.ctxt.glyphScaling;\n\n    // now add all the punctum inclinatum\n    for (var i = 0; i < notes.length; i++, prevStaffPosition = staffPosition) {\n      var note = notes[i];\n\n      if (note.liquescent & LiquescentType.Small)\n        note.setGlyph(this.ctxt, GlyphCode.PunctumInclinatumLiquescent);\n      else if (note.liquescent & LiquescentType.Large)\n        // fixme: is the large inclinatum liquescent the same as the apostropha?\n        note.setGlyph(this.ctxt, GlyphCode.Stropha);\n      // fixme: some climaci in the new chant books end with a punctum quadratum\n      // (see, for example, the antiphon \"Sancta Maria\" for October 7).\n      else note.setGlyph(this.ctxt, GlyphCode.PunctumInclinatum);\n\n      staffPosition = note.staffPosition;\n\n      var multiple = Math.abs(prevStaffPosition - staffPosition);\n      switch (multiple) {\n        case 0:\n          multiple = 1.1;\n          break;\n        default:\n          multiple *= 2 / 3;\n          break;\n      }\n\n      if (i > 0) this.x += advanceWidth * multiple;\n\n      note.bounds.x = this.x;\n\n      this.neume.addVisualizer(note);\n    }\n\n    return this;\n  }\n\n  withPorrectusSwash(start, end) {\n    var needsLine =\n      this.lastNote !== null &&\n      (this.lineIsHanging ||\n        (this.lastNote.glyphVisualizer &&\n          this.lastNote.glyphVisualizer.align === \"right\") ||\n        Math.abs(this.lastNote.staffPosition - start.staffPosition) > 1);\n\n    if (needsLine) {\n      var line = new NeumeLineVisualizer(\n        this.ctxt,\n        this.lastNote,\n        start,\n        this.lineIsHanging\n      );\n      this.x = Math.max(this.minX, this.x - line.bounds.width);\n      line.bounds.x = this.x;\n      this.neume.addVisualizer(line);\n    }\n\n    var glyph;\n\n    switch (start.staffPosition - end.staffPosition) {\n      case 1:\n        glyph = GlyphCode.Porrectus1;\n        break;\n      case 2:\n        glyph = GlyphCode.Porrectus2;\n        break;\n      case 3:\n        glyph = GlyphCode.Porrectus3;\n        break;\n      case 4:\n        glyph = GlyphCode.Porrectus4;\n        break;\n      default:\n        // fixme: should we generate an error here?\n        glyph = GlyphCode.None;\n        break;\n    }\n\n    start.setGlyph(this.ctxt, glyph);\n    start.bounds.x = this.x;\n\n    // the second glyph does not draw anything, but it still has logical importance for the editing\n    // environment...it can respond to changes which will then change the swash glyph of the first.\n    end.setGlyph(this.ctxt, GlyphCode.None);\n\n    this.x = start.bounds.right();\n    end.bounds.x = this.x - end.bounds.width;\n\n    this.neume.addVisualizer(start);\n    this.neume.addVisualizer(end);\n\n    this.lastNote = end;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n}\n\n/*\n * Neumes base class\n */\nexport class Neume extends ChantNotationElement {\n  constructor(notes = []) {\n    super();\n\n    this.isNeume = true; // poor man's reflection\n    this.notes = notes;\n\n    for (var i = 0; i < notes.length; i++) notes[i].neume = this;\n  }\n\n  addNote(note) {\n    note.neume = this;\n    this.notes.push(note);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n  }\n\n  finishLayout(ctxt) {\n    this.ledgerLines = this.requiresLedgerLine();\n\n    // allow subclasses an opportunity to position their own markings...\n    this.positionMarkings();\n\n    // layout the markings of the notes\n    for (var i = 0; i < this.notes.length; i++) {\n      var note = this.notes[i];\n      var j;\n\n      for (j = 0; j < note.episemata.length; j++) {\n        note.episemata[j].performLayout(ctxt);\n        this.addVisualizer(note.episemata[j]);\n      }\n\n      for (j = 0; j < note.morae.length; j++) {\n        note.morae[j].performLayout(ctxt);\n        this.addVisualizer(note.morae[j]);\n      }\n\n      // if the note has an ictus, then add it here\n      if (note.ictus) {\n        note.ictus.performLayout(ctxt);\n        this.addVisualizer(note.ictus);\n      }\n\n      if (note.accent) {\n        note.accent.performLayout(ctxt);\n        this.addVisualizer(note.accent);\n      }\n\n      if (note.choralSign) {\n        note.choralSign.performLayout(ctxt);\n        this.addVisualizer(note.choralSign);\n      }\n\n      // braces are handled by the chant line, so we don't mess with them here\n      // this is because brace size depends on chant line logic (neume spacing,\n      // justification, etc.) so they are considered chant line level\n      // markings rather than note level markings\n    }\n\n    this.origin.x = this.notes[0].origin.x;\n    this.origin.y = this.notes[0].origin.y;\n\n    super.finishLayout(ctxt);\n  }\n\n  requiresLedgerLine() {\n    var firstAbove = false,\n      needsAbove = false,\n      firstBelow = false,\n      needsBelow = false,\n      // isPorrectus = false,\n      result = [];\n\n    if (!this.notes) return result;\n\n    for (var i = 0; i < this.notes.length; ++i) {\n      var note = this.notes[i];\n      var staffPosition = note.staffPosition;\n      if (staffPosition >= 4) {\n        needsAbove = needsAbove || staffPosition >= 5;\n        if (firstAbove === false) firstAbove = Math.max(0, i - 1);\n        if (staffPosition >= 5) continue;\n      } else if (staffPosition <= -4) {\n        needsBelow = needsBelow || staffPosition <= -5;\n        if (firstBelow === false) firstBelow = Math.max(0, i - 1);\n        if (staffPosition <= -5) continue;\n      }\n      if (needsAbove || needsBelow) {\n        var endI = i; // Math.abs(staffPosition) >= 4? i : i - 1;\n        result.push({\n          element: this.notes[firstAbove || firstBelow || 0],\n          endElem: this.notes[endI],\n          staffPosition: needsAbove ? 5 : -5\n        });\n        firstAbove = firstBelow = needsAbove = needsBelow = false;\n      }\n      // isPorrectus = /^Porrectus\\d$/.test(note.glyphVisualizer.glyphCode);\n    }\n    if (needsAbove || needsBelow) {\n      result.push({\n        element: this.notes[firstAbove || firstBelow || 0],\n        endElem: this.notes[this.notes.length - 1],\n        staffPosition: needsAbove ? 5 : -5\n      });\n    }\n    return result;\n  }\n\n  resetDependencies() {}\n\n  build(ctxt) {\n    return new NeumeBuilder(ctxt, this);\n  }\n  positionEpisemata(note, position) {\n    var i;\n    for (i = 0; i < note.episemata.length; i++)\n      if (note.episemata[i].positionHint === MarkingPositionHint.Default)\n        note.episemata[i].positionHint = position;\n    if (note.choralSign) note.choralSign.positionHint = position;\n    return note.episemata.length;\n  }\n  positionEpisemataAbove(note) {\n    return this.positionEpisemata(note, MarkingPositionHint.Above);\n  }\n  positionEpisemataBelow(note) {\n    return this.positionEpisemata(note, MarkingPositionHint.Below);\n  }\n\n  positionPodatusEpisemata(bottomNote, topNote) {\n    // 1. episema on lower note by default be below, upper note above\n    this.positionEpisemataBelow(bottomNote);\n    this.positionEpisemataAbove(topNote);\n    if (topNote.ictus) {\n      topNote.ictus.positionHint = MarkingPositionHint.Above;\n    }\n  }\n  positionInclinataMorae(notes) {\n    notes = notes.slice(-2);\n    if (notes.length < 2 || notes[1].staffPosition > notes[0].staffPosition)\n      return;\n    var bottomNote = notes[1],\n      topNote = notes[0],\n      mark;\n\n    // The mora on the second (lower) note should be below the punctum,\n    // if the punctum is on a line and the previous punctum is in the space above.\n    if (\n      Math.abs(bottomNote.staffPosition % 2) === 1 &&\n      topNote.staffPosition - bottomNote.staffPosition === 1 &&\n      bottomNote.morae.length > 0\n    ) {\n      mark = bottomNote.morae.slice(-1)[0];\n      if (mark.positionHint === MarkingPositionHint.Default)\n        mark.positionHint = MarkingPositionHint.Below;\n    }\n  }\n  positionPodatusMorae(bottomNote, topNote) {\n    var mark;\n\n    // The mora on the first (lower) note should be below it,\n    // if it is on a line.\n    if (Math.abs(bottomNote.staffPosition % 2) === 1) {\n      if (bottomNote.morae.length === 1) {\n        mark = bottomNote.morae[0];\n      } else if (topNote.morae.length > 1) {\n        mark = topNote.morae[0];\n      }\n      if (mark && mark.positionHint === MarkingPositionHint.Default)\n        mark.positionHint = MarkingPositionHint.Below;\n    }\n\n    // if there is a mora on the first note but not on the second, and the neume\n    // continues with a punctum higher than the second note, we need to adjust\n    // the space after the neume so that it follows immediately with no gap\n    if (bottomNote.morae.length > 0 && topNote.morae.length === 0) {\n      bottomNote.morae[0].ignoreBounds = true;\n    }\n  }\n  // for any subclasses that begin with a podatus, they can call this from their own positionMarkings()\n  positionPodatusMarkings(bottomNote, topNote) {\n    this.positionPodatusEpisemata(bottomNote, topNote);\n    this.positionPodatusMorae(bottomNote, topNote);\n  }\n\n  // just like a clivis, but the first note of the three also works like the second note of the clivis:\n  // episema below, unless the middle note also has an episema\n  positionTorculusMarkings(firstNote, secondNote, thirdNote) {\n    var hasTopEpisema = this.positionClivisMarkings(secondNote, thirdNote);\n    hasTopEpisema =\n      this.positionEpisemata(\n        firstNote,\n        hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n      ) && hasTopEpisema;\n    return hasTopEpisema;\n  }\n  positionClivisMorae(firstNote, secondNote) {\n    // 1. second note of a clivis that ends on a line and goes down one step has its mora below:\n    var morae = firstNote.morae.concat(secondNote.morae);\n    if (\n      secondNote.morae.length &&\n      firstNote.staffPosition - secondNote.staffPosition === 1 &&\n      Math.abs(secondNote.staffPosition % 2) === 1\n    ) {\n      morae.slice(-1)[0].positionHint = MarkingPositionHint.Below;\n    }\n  }\n  positionClivisEpisemata(firstNote, secondNote) {\n    var hasTopEpisema = this.positionEpisemataAbove(firstNote);\n    this.positionEpisemata(\n      secondNote,\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n    return hasTopEpisema;\n  }\n  positionClivisMarkings(firstNote, secondNote) {\n    this.positionClivisMorae(firstNote, secondNote);\n    return this.positionClivisEpisemata(firstNote, secondNote);\n  }\n\n  positionPorrectusMarkings(firstNote, secondNote, thirdNote) {\n    // episemata on first and second note work like a clivis,\n    // the second note should have its episema below, unless the first note also has an episema.\n    this.positionClivisEpisemata(firstNote, secondNote);\n    this.positionPodatusMarkings(secondNote, thirdNote);\n  }\n\n  positionPorrectusFlexusMarkings(first, second, third, fourth) {\n    var hasTopEpisema = this.positionEpisemataAbove(first);\n    hasTopEpisema = this.positionClivisMarkings(third, fourth) || hasTopEpisema;\n    this.positionEpisemata(\n      second,\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n  }\n\n  // subclasses can override this in order to correctly place markings in a neume specific way\n  positionMarkings() {}\n}\n\n/*\n * Apostropha\n */\nexport class Apostropha extends Neume {\n  positionMarkings() {\n    var positionHint = MarkingPositionHint.Above;\n\n    // logic here is this: if first episema is default position, place it above.\n    // then place the second one (if there is one) opposite of the first.\n    for (var i = 0; i < this.notes[0].episemata.length; i++) {\n      if (\n        this.notes[0].episemata[i].positionHint === MarkingPositionHint.Default\n      )\n        this.notes[0].episemata[i].positionHint = positionHint;\n      else positionHint = this.notes[0].episemata[i].positionHint;\n\n      // now place the next one in the opposite position\n      positionHint =\n        positionHint === MarkingPositionHint.Above\n          ? MarkingPositionHint.Below\n          : MarkingPositionHint.Above;\n    }\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).noteAt(\n      this.notes[0],\n      Apostropha.getNoteGlyphCode(this.notes[0])\n    );\n\n    this.finishLayout(ctxt);\n  }\n\n  static getNoteGlyphCode(note) {\n    if (note.shape === NoteShape.Stropha) return GlyphCode.Stropha;\n\n    if (note.liquescent & LiquescentType.Ascending)\n      return GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (note.liquescent & LiquescentType.Descending)\n      return GlyphCode.PunctumQuadratumDesLiquescent;\n\n    if (note.shapeModifiers & NoteShapeModifiers.Cavum)\n      return GlyphCode.PunctumCavum;\n\n    return GlyphCode.PunctumQuadratum;\n  }\n}\n\n/*\n * Bivirga\n *\n * For simplicity in implementation, Bivirga's have two notes in the object\n * structure. These technically must be the same pitch though.\n */\nexport class Bivirga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Trivirga\n *\n * For simplicity in implementation, Trivirga's have three notes in the object\n * structure. These technically must be the same pitch though.\n */\nexport class Trivirga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n    this.positionEpisemataAbove(this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[1])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[2]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Climacus\n */\nexport class Climacus extends Neume {\n  positionMarkings() {\n    for (var i = 0; i < this.notes.length; i++) {\n      this.positionEpisemataAbove(this.notes[i]);\n    }\n    this.positionInclinataMorae(this.notes);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .withInclinata(this.notes.slice(1));\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Clivis\n */\nexport class Clivis extends Neume {\n  positionMarkings() {\n    this.positionClivisMarkings(this.notes[0], this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var upper = this.notes[0];\n    var lower = this.notes[1];\n\n    this.build(ctxt).withClivis(upper, lower);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Distropha\n *\n * For simplicity in implementation, Distropha's have two notes in the object\n * structure. These technically must be the same pitch though (like Bivirga).\n */\nexport class Distropha extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    let glyphCodes = this.notes.map((note) =>\n      Apostropha.getNoteGlyphCode(note)\n    );\n    let glyphAdvance = ctxt.intraNeumeSpacing;\n    glyphCodes.slice(0, 2).forEach((glyphCode) => {\n      if (glyphCode === GlyphCode.Stropha)\n        glyphAdvance -= ctxt.intraNeumeSpacing / 4;\n    });\n\n    this.build(ctxt)\n      .noteAt(this.notes[0], glyphCodes[0])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[1], glyphCodes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Oriscus\n */\nexport class Oriscus extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // determine the glyph to use\n    var note = this.notes[0];\n    var glyph;\n\n    if (note.liquescent !== LiquescentType.None) {\n      glyph = GlyphCode.OriscusLiquescent;\n    } else {\n      if (note.shapeModifiers & NoteShapeModifiers.Ascending)\n        glyph = GlyphCode.OriscusAsc;\n      else if (note.shapeModifiers & NoteShapeModifiers.Descending)\n        glyph = GlyphCode.OriscusDes;\n      else {\n        // by default we take the descending form, unless we can figure out by a lookahead here\n        glyph = GlyphCode.OriscusDes;\n\n        // try to find a neume following this one\n        var neume = ctxt.findNextNeume();\n\n        if (neume) {\n          var nextNoteStaffPosition = ctxt.activeClef.pitchToStaffPosition(\n            neume.notes[0].pitch\n          );\n\n          if (nextNoteStaffPosition > note.staffPosition)\n            glyph = GlyphCode.OriscusAsc;\n        }\n      }\n    }\n\n    this.build(ctxt).noteAt(note, glyph);\n\n    this.finishLayout(ctxt);\n  }\n\n  resetDependencies() {\n    // a single oriscus tries to automatically use the right direction\n    // based on the following neumes. if we don't have a manually designated\n    // direction, then we reset our layout so that we can try to guess it\n    // at next layout phase.\n    if (\n      this.notes[0].shapeModifiers & NoteShapeModifiers.Ascending ||\n      this.notes[0].shapeModifiers & NoteShapeModifiers.Descending\n    )\n      return;\n\n    this.needsLayout = true;\n  }\n}\n\n/*\n * PesQuassus\n */\nexport class PesQuassus extends Neume {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var lower = this.notes[0];\n    var upper = this.notes[1];\n\n    var lowerGlyph;\n\n    var lowerStaffPos = lower.staffPosition;\n    var upperStaffPos = upper.staffPosition;\n\n    if (lower.shape === NoteShape.Oriscus) lowerGlyph = GlyphCode.OriscusAsc;\n    else lowerGlyph = GlyphCode.PunctumQuadratum;\n\n    var builder = this.build(ctxt).noteAt(lower, lowerGlyph);\n\n    if (upperStaffPos - lowerStaffPos === 1)\n      // use a virga glyph in this case\n      builder.virgaAt(upper);\n    else if (upper.liquescent === LiquescentType.LargeDescending)\n      builder\n        .noteAt(upper, GlyphCode.PunctumQuadratumDesLiquescent)\n        .withLineEndingAt(lower);\n    else\n      builder.noteAt(upper, GlyphCode.PunctumQuadratum).withLineEndingAt(lower);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * PesSubpunctis\n */\nexport class PesSubpunctis extends Neume {\n  positionMarkings() {\n    this.positionPodatusEpisemata(this.notes[0], this.notes[1]);\n    for (var i = 2; i < this.notes.length; ++i) {\n      this.positionEpisemataAbove(this.notes[i]);\n    }\n    this.positionInclinataMorae(this.notes.slice(1));\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // podatus followed by inclinata\n    this.build(ctxt)\n      .withPodatus(this.notes[0], this.notes[1])\n      .advanceBy(ctxt.intraNeumeSpacing * 0.68)\n      .withInclinata(this.notes.slice(2));\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Podatus\n *\n * This podatus class handles a few neume types actually, depending on the note\n * data: Podatus (including various liquescent types on the upper note),\n * Podatus initio debilis, and Quilisma-Pes\n */\nexport class Podatus extends Neume {\n  positionMarkings() {\n    this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).withPodatus(this.notes[0], this.notes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Porrectus\n */\nexport class Porrectus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    var thirdGlyph;\n\n    if (third.liquescent & LiquescentType.Small)\n      thirdGlyph = GlyphCode.TerminatingAscLiquescent;\n    else if (third.liquescent & LiquescentType.Descending)\n      thirdGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else thirdGlyph = GlyphCode.PodatusUpper;\n\n    this.build(ctxt)\n      .lineFrom(second)\n      .withPorrectusSwash(first, second)\n      .noteAt(third, thirdGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * PorrectusFlexus\n */\nexport class PorrectusFlexus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusFlexusMarkings(\n      this.notes[0],\n      this.notes[1],\n      this.notes[2],\n      this.notes[3]\n    );\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var thirdGlyph = GlyphCode.PunctumQuadratum,\n      fourthGlyph;\n\n    if (fourth.liquescent & LiquescentType.Small) {\n      thirdGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      fourthGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (fourth.liquescent & LiquescentType.Ascending)\n      fourthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (fourth.liquescent & LiquescentType.Descending)\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fourthGlyph = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .lineFrom(second)\n      .withPorrectusSwash(first, second)\n      .noteAt(third, thirdGlyph)\n      .noteAt(fourth, fourthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n// this is some type of pseudo nume right? there is no such thing as a neume\n// of puncta inclinata, but this will be part of other composite neumes.\nexport class PunctaInclinata extends Neume {\n  positionMarkings() {\n    this.positionInclinataMorae(this.notes);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).withInclinata(this.notes);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Punctum\n */\nexport class Punctum extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var note = this.notes[0];\n    var glyph = GlyphCode.PunctumQuadratum;\n\n    // determine the glyph to use\n    if (note.liquescent !== LiquescentType.None) {\n      if (note.shape === NoteShape.Inclinatum)\n        glyph = GlyphCode.PunctumInclinatumLiquescent;\n      else if (note.shape === NoteShape.Oriscus)\n        glyph = GlyphCode.OriscusLiquescent;\n      else if (note.liquescent & LiquescentType.Ascending)\n        glyph = GlyphCode.PunctumQuadratumAscLiquescent;\n      else if (note.liquescent & LiquescentType.Descending)\n        glyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      else glyph = GlyphCode.PunctumQuadratumLiquescent;\n    } else {\n      if (note.shapeModifiers & NoteShapeModifiers.Cavum)\n        glyph = GlyphCode.PunctumCavum;\n      else if (note.shape === NoteShape.Inclinatum)\n        glyph = GlyphCode.PunctumInclinatum;\n      else if (note.shape === NoteShape.Quilisma) glyph = GlyphCode.Quilisma;\n      else glyph = GlyphCode.PunctumQuadratum;\n    }\n\n    this.build(ctxt).noteAt(note, glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Salicus\n */\nexport class Salicus extends Neume {\n  positionMarkings() {\n    // by default place episema below\n    // fixme: is this correct?\n    for (var i = 0; i < this.notes.length; i++)\n      this.positionEpisemataBelow(this.notes[i]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    var builder = this.build(ctxt).noteAt(first, GlyphCode.PunctumQuadratum);\n\n    // if the next note doesn't require a stem connector, then add a tad bit\n    // of spacing here\n    if (!(second.shapeModifiers & NoteShapeModifiers.Stemmed))\n      builder.advanceBy(ctxt.intraNeumeSpacing);\n\n    // second note is always an oriscus, which may or may not be stemmed\n    // to the first\n    builder.noteAt(second, GlyphCode.OriscusAsc);\n\n    // third note can be a punctum quadratum or various liquescent forms\n    if (third.liquescent & LiquescentType.Small)\n      builder.noteAt(third, GlyphCode.TerminatingAscLiquescent);\n    else if (third.liquescent === LiquescentType.Ascending)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumAscLiquescent);\n    else if (third.liquescent === LiquescentType.Descending)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.virgaAt(third);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Salicus Flexus\n */\nexport class SalicusFlexus extends Neume {\n  positionMarkings() {\n    var hasTopEpisema = this.positionTorculusMarkings(\n      this.notes[1],\n      this.notes[2],\n      this.notes[3]\n    );\n    this.positionEpisemata(\n      this.notes[0],\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var builder = this.build(ctxt).noteAt(first, GlyphCode.PunctumQuadratum);\n\n    // if the next note doesn't require a stem connector, then add a tad bit\n    // of spacing here\n    if (!(second.shapeModifiers & NoteShapeModifiers.Stemmed))\n      builder.advanceBy(ctxt.intraNeumeSpacing);\n\n    // second note is always an oriscus, which may or may not be stemmed\n    // to the first\n    builder.noteAt(second, GlyphCode.OriscusAsc);\n\n    // third note can be a punctum quadratum or various liquescent forms,\n    // ...based on note four though!\n    if (fourth.liquescent & LiquescentType.Small)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.noteAt(third, GlyphCode.PunctumQuadratum);\n\n    // finally, do the fourth note\n    if (fourth.liquescent & LiquescentType.Small)\n      builder.noteAt(fourth, GlyphCode.TerminatingDesLiquescent);\n    else if (fourth.liquescent & LiquescentType.Ascending)\n      builder.noteAt(fourth, GlyphCode.PunctumQuadratumAscLiquescent);\n    else if (fourth.liquescent & LiquescentType.Descending)\n      builder.noteAt(fourth, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.noteAt(fourth, GlyphCode.PunctumQuadratum);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Scandicus\n */\nexport class Scandicus extends Neume {\n  positionMarkings() {\n    if (this.notes[2].shape === NoteShape.Virga) {\n      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n      this.positionEpisemataAbove(this.notes[2]);\n    } else {\n      this.positionEpisemataBelow(this.notes[0]);\n      this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n    }\n  }\n\n  // if the third note shape is a virga, then the scadicus is rendered\n  // as a podatus followed by a virga. Otherwise, it's rendered as a\n  // punctum followed by a podatus...\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    if (third.shape === NoteShape.Virga) {\n      this.build(ctxt).withPodatus(first, second).virgaAt(third);\n    } else {\n      this.build(ctxt)\n        .noteAt(\n          first,\n          first.shape === NoteShape.Quilisma\n            ? GlyphCode.Quilisma\n            : GlyphCode.PunctumQuadratum\n        )\n        .withPodatus(second, third);\n    }\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Scandicus Flexus\n */\nexport class ScandicusFlexus extends Neume {\n  positionMarkings() {\n    if (this.notes[2].shape === NoteShape.Virga) {\n      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n      this.positionClivisMarkings(this.notes[2], this.notes[3]);\n    } else {\n      this.positionEpisemataBelow(this.notes[0]);\n      this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n      this.positionEpisemataAbove(this.notes[3]);\n    }\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    if (third.shape === NoteShape.Virga) {\n      this.build(ctxt)\n        .withPodatus(first, second)\n        .advanceBy(ctxt.intraNeumeSpacing)\n        .withClivis(third, fourth);\n    } else {\n      var fourthGlyph = GlyphCode.PunctumQuadratum;\n\n      if (fourth.liquescent & LiquescentType.Ascending)\n        fourthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n      else if (fourth.liquescent & LiquescentType.Descending)\n        fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n\n      this.build(ctxt)\n        .noteAt(first, GlyphCode.PunctumQuadratum)\n        .withPodatus(second, third)\n        .advanceBy(ctxt.intraNeumeSpacing)\n        .noteAt(fourth, fourthGlyph);\n    }\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Torculus\n */\nexport class Torculus extends Neume {\n  positionMarkings() {\n    this.positionTorculusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var note1 = this.notes[0];\n    var note2 = this.notes[1];\n    var note3 = this.notes[2];\n\n    var glyph1, glyph3;\n\n    if (note1.liquescent === LiquescentType.InitioDebilis)\n      glyph1 = GlyphCode.TerminatingDesLiquescent;\n    else if (note1.shape === NoteShape.Quilisma) glyph1 = GlyphCode.Quilisma;\n    else glyph1 = GlyphCode.PunctumQuadratum;\n\n    if (note3.liquescent & LiquescentType.Small)\n      glyph3 = GlyphCode.TerminatingDesLiquescent;\n    else if (note3.liquescent & LiquescentType.Ascending)\n      glyph3 = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (note3.liquescent & LiquescentType.Descending)\n      glyph3 = GlyphCode.PunctumQuadratumDesLiquescent;\n    else glyph3 = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .noteAt(note1, glyph1)\n      .noteAt(note2, GlyphCode.PunctumQuadratum)\n      .noteAt(note3, glyph3);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TorculusResupinus\n */\nexport class TorculusResupinus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n    this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var firstGlyph, fourthGlyph;\n\n    if (first.liquescent === LiquescentType.InitioDebilis) {\n      firstGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (first.shape === NoteShape.Quilisma)\n      firstGlyph = GlyphCode.Quilisma;\n    else firstGlyph = GlyphCode.PunctumQuadratum;\n\n    if (fourth.liquescent & LiquescentType.Small)\n      fourthGlyph = GlyphCode.TerminatingAscLiquescent;\n    else if (third.liquescent & LiquescentType.Descending)\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fourthGlyph = GlyphCode.PodatusUpper;\n\n    this.build(ctxt)\n      .noteAt(first, firstGlyph)\n      .withPorrectusSwash(second, third)\n      .noteAt(fourth, fourthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TorculusResupinusFlexus\n */\nexport class TorculusResupinusFlexus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusFlexusMarkings(\n      this.notes[1],\n      this.notes[2],\n      this.notes[3],\n      this.notes[4]\n    );\n    this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n    var fifth = this.notes[4];\n\n    var firstGlyph,\n      fourthGlyph = GlyphCode.PunctumQuadratum,\n      fifthGlyph;\n\n    if (first.liquescent === LiquescentType.InitioDebilis) {\n      firstGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (first.shape === NoteShape.Quilisma)\n      firstGlyph = GlyphCode.Quilisma;\n    else firstGlyph = GlyphCode.PunctumQuadratum;\n\n    if (fifth.liquescent & LiquescentType.Small) {\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      fifthGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (fifth.liquescent & LiquescentType.Ascending)\n      fifthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (fifth.liquescent & LiquescentType.Descending)\n      fifthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fifthGlyph = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .noteAt(first, firstGlyph)\n      .withPorrectusSwash(second, third)\n      .noteAt(fourth, fourthGlyph)\n      .noteAt(fifth, fifthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Tristropha\n *\n * For simplicity in implementation, Tristropha's have three notes in the object\n * structure. These technically must be the same pitch though (like the\n * Distropha and Bivirga).\n */\nexport class Tristropha extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n    this.positionEpisemataAbove(this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    let glyphCodes = this.notes.map((note) =>\n      Apostropha.getNoteGlyphCode(note)\n    );\n    let glyphAdvance =\n      glyphCodes[0] === GlyphCode.Stropha\n        ? ctxt.intraNeumeSpacing / 2\n        : ctxt.intraNeumeSpacing;\n\n    this.build(ctxt)\n      .noteAt(this.notes[0], glyphCodes[0])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[1], glyphCodes[1])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[2], glyphCodes[2]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Virga\n */\nexport class Virga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).virgaAt(this.notes[0]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Neumes.js","//\n// Author(s):\n// Benjamin Bloomfield <benjamin@sourceandsummit.com>\n//\n// Copyright (c) 2019\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { Rect } from \"./Exsurge.Core.js\";\nimport {\n  ChantLayoutElement, QuickSvg, Subtitle, Supertitle, TextLeftRight, Title\n} from \"./Exsurge.Drawing.js\";\n\nexport class Titles extends ChantLayoutElement {\n  constructor(\n    ctxt,\n    score,\n    { supertitle, title, subtitle, textLeft, textRight } = {}\n  ) {\n    super();\n    this.score = score;\n    this.setSupertitle(ctxt, supertitle);\n    this.setTitle(ctxt, title);\n    this.setSubtitle(ctxt, subtitle);\n    this.setTextLeft(ctxt, textLeft);\n    this.setTextRight(ctxt, textRight);\n  }\n\n  setBoundsX(ctxt, elementName, width) {\n    let element = this[elementName];\n    switch (ctxt.textStyles[elementName].alignment) {\n      case \"left\":\n        element.textAnchor = \"start\";\n        element.bounds.x = 0;\n        break;\n      case \"right\":\n        element.textAnchor = \"end\";\n        element.bounds.x = width;\n        break;\n      case \"center\":\n      default:\n        element.textAnchor = \"middle\";\n        element.bounds.x = width / 2;\n    }\n  }\n\n  /**\n   * Lays out the titles, and returns their total height\n   * @param  {ChantContext} ctxt\n   * @return {number}      the tottal height of titles laid out\n   */\n  layoutTitles(ctxt, width) {\n    this.bounds = new Rect(0, 0, 0, 0);\n    let y = 0;\n    if (this.supertitle) {\n      this.supertitle.recalculateMetrics(ctxt);\n      this.supertitle.setMaxWidth(ctxt, width);\n\n      this.setBoundsX(ctxt, \"supertitle\", width);\n      this.supertitle.bounds.y = y;\n      this.bounds.union(this.supertitle.bounds);\n      this.supertitle.bounds.y += this.supertitle.origin.y;\n      y += this.supertitle.bounds.height + this.supertitle.padding(ctxt);\n    }\n    if (this.title) {\n      if (y) y += this.title.padding(ctxt);\n      this.title.recalculateMetrics(ctxt);\n      this.title.setMaxWidth(ctxt, width);\n      this.setBoundsX(ctxt, \"title\", width);\n      this.title.bounds.y = y;\n      this.bounds.union(this.title.bounds);\n      this.title.bounds.y += this.title.origin.y;\n      y += this.title.bounds.height + this.title.padding(ctxt);\n    }\n    if (this.subtitle) {\n      if (y) y += this.subtitle.padding(ctxt);\n      this.subtitle.recalculateMetrics(ctxt);\n      this.subtitle.setMaxWidth(ctxt, width);\n      this.setBoundsX(ctxt, \"subtitle\", width);\n      this.subtitle.bounds.y = y;\n      this.bounds.union(this.subtitle.bounds);\n      this.subtitle.bounds.y += this.subtitle.origin.y;\n      y += this.subtitle.bounds.height + this.subtitle.padding(ctxt);\n    }\n    let finalY = y,\n      textLeft = this.score.overrideTextLeft || this.textLeft;\n    if (textLeft) {\n      textLeft.recalculateMetrics(ctxt);\n      textLeft.bounds.y = y;\n      this.bounds.union(textLeft.bounds);\n      textLeft.bounds.y += textLeft.origin.y;\n      finalY = y + textLeft.bounds.height + textLeft.padding(ctxt);\n    }\n    if (this.textRight) {\n      this.textRight.recalculateMetrics(ctxt);\n      this.textRight.bounds.x = width;\n      this.textRight.bounds.y = y;\n      this.bounds.union(this.textRight.bounds);\n      this.textRight.bounds.y += this.textRight.origin.y;\n      finalY = Math.max(\n        finalY,\n        y + this.textRight.bounds.height + this.textRight.padding(ctxt)\n      );\n    }\n    return finalY;\n  }\n\n  setSupertitle(ctxt, supertitle) {\n    this.supertitle = supertitle ? new Supertitle(ctxt, supertitle) : null;\n  }\n  setTitle(ctxt, title) {\n    this.title = title ? new Title(ctxt, title) : null;\n  }\n  setSubtitle(ctxt, subtitle) {\n    this.subtitle = subtitle ? new Subtitle(ctxt, subtitle) : null;\n  }\n  setTextLeft(ctxt, textLeft) {\n    this.textLeft = textLeft\n      ? new TextLeftRight(ctxt, textLeft, \"textLeft\")\n      : null;\n  }\n  setTextRight(ctxt, textRight) {\n    this.textRight = textRight\n      ? new TextLeftRight(ctxt, textRight, \"textRight\")\n      : null;\n  }\n\n  hasSupertitle(ctxt, supertitle) {\n    return !!this.supertitle;\n  }\n  hasTitle(ctxt, title) {\n    return !!this.title;\n  }\n  hasSubtitle(ctxt, subtitle) {\n    return !!this.subtitle;\n  }\n  hasTextLeft(ctxt, textLeft) {\n    return !!this.textLeft;\n  }\n  hasTextRight(ctxt, textRight) {\n    return !!this.textRight;\n  }\n\n  draw(ctxt, scale = 1) {\n    var canvasCtxt = ctxt.canvasCtxt;\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) el.draw(ctxt, scale);\n    }\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getInnerNodes(ctxt, functionName = \"createSvgNode\") {\n    var nodes = [];\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) nodes.push(el[functionName](ctxt));\n    }\n    return nodes;\n  }\n\n  createSvgNode(ctxt) {\n    var nodes = this.getInnerNodes(ctxt, \"createSvgNode\");\n\n    var node = QuickSvg.createNode(\"g\", { class: \"Titles\" }, nodes);\n\n    node.source = this;\n    this.svg = node;\n\n    return node;\n  }\n\n  createSvgTree(ctxt) {\n    var nodes = this.getInnerNodes(ctxt, \"createSvgTree\");\n\n    return QuickSvg.createSvgTree(\n      \"g\",\n      { class: \"Titles\", source: this },\n      ...nodes\n    );\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = \"\";\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) fragment += el.createSvgFragment(ctxt);\n    }\n\n    fragment = QuickSvg.createFragment(\"g\", { class: \"Titles\" }, fragment);\n    return fragment;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Titles.js"],"sourceRoot":""}